
liq_ds_sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08006bd0  08006bd0  00016bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007074  08007074  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007074  08007074  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007074  08007074  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007078  08007078  00017078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800707c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000010c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122ae  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b3  00000000  00000000  000324ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00034b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  000358f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225a8  00000000  00000000  00036568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012258  00000000  00000000  00058b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb96a  00000000  00000000  0006ad68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001366d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047e4  00000000  00000000  00136728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bb4 	.word	0x08006bb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006bb4 	.word	0x08006bb4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000bc4:	f000 fc48 	bl	8001458 <wire_reset>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <send_cmd+0x1a>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e01e      	b.n	8000c10 <send_cmd+0x58>

  if (!rom_code) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d103      	bne.n	8000be0 <send_cmd+0x28>
    wire_write(DS_SKIP_ROM);
 8000bd8:	20cc      	movs	r0, #204	; 0xcc
 8000bda:	f000 fcc3 	bl	8001564 <wire_write>
 8000bde:	e012      	b.n	8000c06 <send_cmd+0x4e>
  } else {
    wire_write(DS_MATCH_ROM);
 8000be0:	2055      	movs	r0, #85	; 0x55
 8000be2:	f000 fcbf 	bl	8001564 <wire_write>
    for (i = 0; i < DS_ROM_CODE_SIZE; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e009      	b.n	8000c00 <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fcb5 	bl	8001564 <wire_write>
    for (i = 0; i < DS_ROM_CODE_SIZE; i++)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b07      	cmp	r3, #7
 8000c04:	ddf2      	ble.n	8000bec <send_cmd+0x34>
  }
  wire_write(cmd);
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fcab 	bl	8001564 <wire_write>
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <ds_start_measure>:

HAL_StatusTypeDef ds_start_measure(const uint8_t* rom_code)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS_CONVERT_T);
 8000c20:	2144      	movs	r1, #68	; 0x44
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffc8 	bl	8000bb8 <send_cmd>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <ds_read_scratchpad>:

static HAL_StatusTypeDef ds_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000c32:	b590      	push	{r4, r7, lr}
 8000c34:	b085      	sub	sp, #20
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS_READ_SCRATCHPAD) != HAL_OK)
 8000c3c:	21be      	movs	r1, #190	; 0xbe
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffba 	bl	8000bb8 <send_cmd>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <ds_read_scratchpad+0x1c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e01e      	b.n	8000c8c <ds_read_scratchpad+0x5a>

  for (i = 0; i < DS_SCRATCHPAD_SIZE; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e009      	b.n	8000c68 <ds_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	18d4      	adds	r4, r2, r3
 8000c5a:	f000 fc9f 	bl	800159c <wire_read>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS_SCRATCHPAD_SIZE; i++)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	ddf2      	ble.n	8000c54 <ds_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS_SCRATCHPAD_SIZE - 1);
 8000c6e:	2108      	movs	r1, #8
 8000c70:	6838      	ldr	r0, [r7, #0]
 8000c72:	f000 fcde 	bl	8001632 <wire_crc>
 8000c76:	4603      	mov	r3, r0
 8000c78:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS_SCRATCHPAD_SIZE - 1] == crc)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	7afa      	ldrb	r2, [r7, #11]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d101      	bne.n	8000c8a <ds_read_scratchpad+0x58>
    return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <ds_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <ds_get_temp>:

float ds_get_temp(const uint8_t* rom_code)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffc5 	bl	8000c32 <ds_read_scratchpad>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <ds_get_temp+0x20>
    return 85.0f;
 8000cae:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000cdc <ds_get_temp+0x48>
 8000cb2:	e00b      	b.n	8000ccc <ds_get_temp+0x38>
 8000cb4:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000cb6:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8000cb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000cbc:	ee07 3a90 	vmov	s15, r3
 8000cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000cc8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ccc:	eef0 7a47 	vmov.f32	s15, s14
}
 8000cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	42aa0000 	.word	0x42aa0000

08000ce0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4a3c      	ldr	r2, [pc, #240]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d00:	6153      	str	r3, [r2, #20]
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	4b37      	ldr	r3, [pc, #220]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a36      	ldr	r2, [pc, #216]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d18:	6153      	str	r3, [r2, #20]
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	4a30      	ldr	r2, [pc, #192]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	6153      	str	r3, [r2, #20]
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b28      	ldr	r3, [pc, #160]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2120      	movs	r1, #32
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f000 ffc5 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d68:	4821      	ldr	r0, [pc, #132]	; (8000df0 <MX_GPIO_Init+0x110>)
 8000d6a:	f000 ffbf 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	481b      	ldr	r0, [pc, #108]	; (8000df4 <MX_GPIO_Init+0x114>)
 8000d86:	f000 fe0f 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f000 fe00 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dae:	2311      	movs	r3, #17
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480b      	ldr	r0, [pc, #44]	; (8000df0 <MX_GPIO_Init+0x110>)
 8000dc2:	f000 fdf1 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LV_Pin;
 8000dc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LV_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f000 fde3 	bl	80019a8 <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48000400 	.word	0x48000400
 8000df4:	48000800 	.word	0x48000800

08000df8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if (ch == '\n'){
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d102      	bne.n	8000e0c <__io_putchar+0x14>
		__io_putchar('\r');
 8000e06:	200d      	movs	r0, #13
 8000e08:	f7ff fff6 	bl	8000df8 <__io_putchar>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000e0c:	1d39      	adds	r1, r7, #4
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	2201      	movs	r2, #1
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <__io_putchar+0x2c>)
 8000e16:	f002 fd23 	bl	8003860 <HAL_UART_Transmit>
	return 1;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000250 	.word	0x20000250

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f000 fc4b 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f8a7 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f7ff ff53 	bl	8000ce0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e3a:	f000 fa83 	bl	8001344 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000e3e:	f000 fa2b 	bl	8001298 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000e42:	4847      	ldr	r0, [pc, #284]	; (8000f60 <main+0x138>)
 8000e44:	f002 fb2c 	bl	80034a0 <HAL_TIM_Base_Start>

  wire_reset();
 8000e48:	f000 fb06 	bl	8001458 <wire_reset>
  wire_write(0xcc);
 8000e4c:	20cc      	movs	r0, #204	; 0xcc
 8000e4e:	f000 fb89 	bl	8001564 <wire_write>
  wire_write(0x44);
 8000e52:	2044      	movs	r0, #68	; 0x44
 8000e54:	f000 fb86 	bl	8001564 <wire_write>

  HAL_Delay(750);
 8000e58:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000e5c:	f000 fc9a 	bl	8001794 <HAL_Delay>

  wire_reset();
 8000e60:	f000 fafa 	bl	8001458 <wire_reset>
  wire_write(0xcc);
 8000e64:	20cc      	movs	r0, #204	; 0xcc
 8000e66:	f000 fb7d 	bl	8001564 <wire_write>
  wire_write(0xbe);
 8000e6a:	20be      	movs	r0, #190	; 0xbe
 8000e6c:	f000 fb7a 	bl	8001564 <wire_write>

  int i;
  uint8_t scratchpad[9];
  for (i = 0; i < 9; i++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e00b      	b.n	8000e8e <main+0x66>
    scratchpad[i] = wire_read();
 8000e76:	f000 fb91 	bl	800159c <wire_read>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b2d9      	uxtb	r1, r3
 8000e7e:	463a      	mov	r2, r7
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	460a      	mov	r2, r1
 8000e86:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 9; i++)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	ddf0      	ble.n	8000e76 <main+0x4e>

  uint8_t crc = wire_crc(scratchpad, 8);
 8000e94:	463b      	mov	r3, r7
 8000e96:	2108      	movs	r1, #8
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fbca 	bl	8001632 <wire_crc>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	74fb      	strb	r3, [r7, #19]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ds_start_measure(NULL);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff feb8 	bl	8000c18 <ds_start_measure>

	  	  HAL_Delay(750);
 8000ea8:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000eac:	f000 fc72 	bl	8001794 <HAL_Delay>

	  	  float temp = ds_get_temp(NULL);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff feef 	bl	8000c94 <ds_get_temp>
 8000eb6:	ed87 0a03 	vstr	s0, [r7, #12]
	  	  if(temp >= 80.0f)
 8000eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ebe:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000f64 <main+0x13c>
 8000ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eca:	db03      	blt.n	8000ed4 <main+0xac>
	  		  printf("Error\n");
 8000ecc:	4826      	ldr	r0, [pc, #152]	; (8000f68 <main+0x140>)
 8000ece:	f003 fe03 	bl	8004ad8 <puts>
 8000ed2:	e034      	b.n	8000f3e <main+0x116>
	  	  else if (temp > 40.0f && temp < 80.0f)
 8000ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000f6c <main+0x144>
 8000edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee4:	dd11      	ble.n	8000f0a <main+0xe2>
 8000ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eea:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000f64 <main+0x13c>
 8000eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef6:	d508      	bpl.n	8000f0a <main+0xe2>
	  		  printf("Too high temperature = %.1f*C\n", temp);
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff fb2d 	bl	8000558 <__aeabi_f2d>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	481b      	ldr	r0, [pc, #108]	; (8000f70 <main+0x148>)
 8000f04:	f003 fd62 	bl	80049cc <iprintf>
 8000f08:	e019      	b.n	8000f3e <main+0x116>
	  	  else if(temp<-10.0f)
 8000f0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f0e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8000f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1a:	d508      	bpl.n	8000f2e <main+0x106>
	  	  	  printf("Too low temperature = %.1f*C\n", temp);
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f7ff fb1b 	bl	8000558 <__aeabi_f2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <main+0x14c>)
 8000f28:	f003 fd50 	bl	80049cc <iprintf>
 8000f2c:	e007      	b.n	8000f3e <main+0x116>
	  	  else
	  		  printf("Temperature = %.1f*C\n", temp);
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f7ff fb12 	bl	8000558 <__aeabi_f2d>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <main+0x150>)
 8000f3a:	f003 fd47 	bl	80049cc <iprintf>
	  	  if(HAL_GPIO_ReadPin(LV_GPIO_Port, LV_Pin))
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f000 feb9 	bl	8001cbc <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <main+0x130>
	  		  printf("Liquid level = 1  ");
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <main+0x154>)
 8000f52:	f003 fd3b 	bl	80049cc <iprintf>
 8000f56:	e7a4      	b.n	8000ea2 <main+0x7a>
	  	  else
	  		  printf("Liquid level = 0  ");
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <main+0x158>)
 8000f5a:	f003 fd37 	bl	80049cc <iprintf>
  {
 8000f5e:	e7a0      	b.n	8000ea2 <main+0x7a>
 8000f60:	20000204 	.word	0x20000204
 8000f64:	42a00000 	.word	0x42a00000
 8000f68:	08006bd0 	.word	0x08006bd0
 8000f6c:	42200000 	.word	0x42200000
 8000f70:	08006bd8 	.word	0x08006bd8
 8000f74:	08006bf8 	.word	0x08006bf8
 8000f78:	08006c18 	.word	0x08006c18
 8000f7c:	08006c30 	.word	0x08006c30
 8000f80:	08006c44 	.word	0x08006c44

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0a6      	sub	sp, #152	; 0x98
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f8e:	2228      	movs	r2, #40	; 0x28
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f003 f8a8 	bl	80040e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2258      	movs	r2, #88	; 0x58
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 f89a 	bl	80040e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fd0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fe9a 	bl	8001d1c <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fee:	f000 f827 	bl	8001040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001002:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001008:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800100c:	2102      	movs	r1, #2
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fd9a 	bl	8002b48 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800101a:	f000 f811 	bl	8001040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4618      	mov	r0, r3
 800102a:	f001 ffc3 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001034:	f000 f804 	bl	8001040 <Error_Handler>
  }
}
 8001038:	bf00      	nop
 800103a:	3798      	adds	r7, #152	; 0x98
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	e7fe      	b.n	8001048 <Error_Handler+0x8>
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_MspInit+0x44>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_MspInit+0x44>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_MspInit+0x44>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_MspInit+0x44>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_MspInit+0x44>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001082:	2007      	movs	r0, #7
 8001084:	f000 fc5c 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 fb38 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	return 1;
 80010ec:	2301      	movs	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_kill>:

int _kill(int pid, int sig)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001102:	f002 ffc7 	bl	8004094 <__errno>
 8001106:	4603      	mov	r3, r0
 8001108:	2216      	movs	r2, #22
 800110a:	601a      	str	r2, [r3, #0]
	return -1;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_exit>:

void _exit (int status)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffe7 	bl	80010f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800112a:	e7fe      	b.n	800112a <_exit+0x12>

0800112c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e00a      	b.n	8001154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800113e:	f3af 8000 	nop.w
 8001142:	4601      	mov	r1, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	b2ca      	uxtb	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf0      	blt.n	800113e <_read+0x12>
	}

return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e009      	b.n	800118c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe39 	bl	8000df8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	dbf1      	blt.n	8001178 <_write+0x12>
	}
	return len;
 8001194:	687b      	ldr	r3, [r7, #4]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <_close>:

int _close(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c6:	605a      	str	r2, [r3, #4]
	return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_isatty>:

int _isatty(int file)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f002 ff2c 	bl	8004094 <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20010000 	.word	0x20010000
 8001268:	00000400 	.word	0x00000400
 800126c:	200001f8 	.word	0x200001f8
 8001270:	200002e8 	.word	0x200002e8

08001274 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_TIM6_Init+0x64>)
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <MX_TIM6_Init+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_TIM6_Init+0x64>)
 80012b0:	2247      	movs	r2, #71	; 0x47
 80012b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_TIM6_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_TIM6_Init+0x64>)
 80012bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_TIM6_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM6_Init+0x64>)
 80012ca:	f002 f891 	bl	80033f0 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012d4:	f7ff feb4 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_TIM6_Init+0x64>)
 80012e6:	f002 f9e1 	bl	80036ac <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012f0:	f7ff fea6 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000204 	.word	0x20000204
 8001300:	40001000 	.word	0x40001000

08001304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_TIM_Base_MspInit+0x38>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10b      	bne.n	800132e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_TIM_Base_MspInit+0x3c>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <HAL_TIM_Base_MspInit+0x3c>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_TIM_Base_MspInit+0x3c>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40001000 	.word	0x40001000
 8001340:	40021000 	.word	0x40021000

08001344 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_USART2_UART_Init+0x58>)
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <MX_USART2_UART_Init+0x5c>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_USART2_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART2_UART_Init+0x58>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART2_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001388:	f002 fa1c 	bl	80037c4 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001392:	f7ff fe55 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000250 	.word	0x20000250
 80013a0:	40004400 	.word	0x40004400

080013a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_UART_MspInit+0x7c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d128      	bne.n	8001418 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_UART_MspInit+0x80>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <HAL_UART_MspInit+0x80>)
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_UART_MspInit+0x80>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_UART_MspInit+0x80>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_UART_MspInit+0x80>)
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	6153      	str	r3, [r2, #20]
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_UART_MspInit+0x80>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013f6:	230c      	movs	r3, #12
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001406:	2307      	movs	r3, #7
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f000 fac8 	bl	80019a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40004400 	.word	0x40004400
 8001424:	40021000 	.word	0x40021000

08001428 <delay_us>:
#include "wire.h"
#include "gpio.h"
#include "tim.h"

void delay_us(uint32_t us)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <delay_us+0x2c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 8001438:	bf00      	nop
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <delay_us+0x2c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d8f9      	bhi.n	800143a <delay_us+0x12>
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	20000204 	.word	0x20000204

08001458 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001464:	4812      	ldr	r0, [pc, #72]	; (80014b0 <wire_reset+0x58>)
 8001466:	f000 fc41 	bl	8001cec <HAL_GPIO_WritePin>
  delay_us(480);
 800146a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800146e:	f7ff ffdb 	bl	8001428 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <wire_reset+0x58>)
 800147a:	f000 fc37 	bl	8001cec <HAL_GPIO_WritePin>
  delay_us(70);
 800147e:	2046      	movs	r0, #70	; 0x46
 8001480:	f7ff ffd2 	bl	8001428 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <wire_reset+0x58>)
 800148a:	f000 fc17 	bl	8001cbc <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8001492:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001496:	f7ff ffc7 	bl	8001428 <delay_us>

  if (rc == 0)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <wire_reset+0x4c>
    return HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e000      	b.n	80014a6 <wire_reset+0x4e>
  else
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	48000400 	.word	0x48000400

080014b4 <write_bit>:

void write_bit(int value)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if (value) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d012      	beq.n	80014e8 <write_bit+0x34>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c8:	4812      	ldr	r0, [pc, #72]	; (8001514 <write_bit+0x60>)
 80014ca:	f000 fc0f 	bl	8001cec <HAL_GPIO_WritePin>
    delay_us(6);
 80014ce:	2006      	movs	r0, #6
 80014d0:	f7ff ffaa 	bl	8001428 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <write_bit+0x60>)
 80014dc:	f000 fc06 	bl	8001cec <HAL_GPIO_WritePin>
    delay_us(64);
 80014e0:	2040      	movs	r0, #64	; 0x40
 80014e2:	f7ff ffa1 	bl	8001428 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 80014e6:	e011      	b.n	800150c <write_bit+0x58>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <write_bit+0x60>)
 80014f0:	f000 fbfc 	bl	8001cec <HAL_GPIO_WritePin>
    delay_us(60);
 80014f4:	203c      	movs	r0, #60	; 0x3c
 80014f6:	f7ff ff97 	bl	8001428 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <write_bit+0x60>)
 8001502:	f000 fbf3 	bl	8001cec <HAL_GPIO_WritePin>
    delay_us(10);
 8001506:	200a      	movs	r0, #10
 8001508:	f7ff ff8e 	bl	8001428 <delay_us>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	48000400 	.word	0x48000400

08001518 <read_bit>:

int read_bit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001524:	480e      	ldr	r0, [pc, #56]	; (8001560 <read_bit+0x48>)
 8001526:	f000 fbe1 	bl	8001cec <HAL_GPIO_WritePin>
  delay_us(6);
 800152a:	2006      	movs	r0, #6
 800152c:	f7ff ff7c 	bl	8001428 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <read_bit+0x48>)
 8001538:	f000 fbd8 	bl	8001cec <HAL_GPIO_WritePin>
  delay_us(9);
 800153c:	2009      	movs	r0, #9
 800153e:	f7ff ff73 	bl	8001428 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <read_bit+0x48>)
 8001548:	f000 fbb8 	bl	8001cbc <HAL_GPIO_ReadPin>
 800154c:	4603      	mov	r3, r0
 800154e:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8001550:	2037      	movs	r0, #55	; 0x37
 8001552:	f7ff ff69 	bl	8001428 <delay_us>
  return rc;
 8001556:	687b      	ldr	r3, [r7, #4]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	48000400 	.word	0x48000400

08001564 <wire_write>:

void wire_write(uint8_t byte)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e00b      	b.n	800158c <wire_write+0x28>
    write_bit(byte & 0x01);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff9a 	bl	80014b4 <write_bit>
    byte >>= 1;
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b07      	cmp	r3, #7
 8001590:	ddf0      	ble.n	8001574 <wire_write+0x10>
  }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <wire_read>:

uint8_t wire_read(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	e00e      	b.n	80015ca <wire_read+0x2e>
    value >>= 1;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 80015b2:	f7ff ffb1 	bl	8001518 <read_bit>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <wire_read+0x28>
      value |= 0x80;
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015c2:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	dded      	ble.n	80015ac <wire_read+0x10>
  }
  return value;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <byte_crc>:

uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	460a      	mov	r2, r1
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	4613      	mov	r3, r2
 80015e8:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e016      	b.n	800161e <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80015f0:	79fa      	ldrb	r2, [r7, #7]
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	4053      	eors	r3, r2
 80015f6:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <byte_crc+0x38>
      crc ^= 0x8c;
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 800160e:	43db      	mvns	r3, r3
 8001610:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b07      	cmp	r3, #7
 8001622:	dde5      	ble.n	80015f0 <byte_crc+0x16>
  }
  return crc;
 8001624:	79fb      	ldrb	r3, [r7, #7]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e00d      	b.n	8001662 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4413      	add	r3, r2
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ffc1 	bl	80015da <byte_crc>
 8001658:	4603      	mov	r3, r0
 800165a:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	dbed      	blt.n	8001646 <wire_crc+0x14>

    return crc;
 800166a:	7afb      	ldrb	r3, [r7, #11]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480d      	ldr	r0, [pc, #52]	; (80016b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800167a:	490e      	ldr	r1, [pc, #56]	; (80016b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800167c:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <LoopForever+0xe>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001690:	4c0b      	ldr	r4, [pc, #44]	; (80016c0 <LoopForever+0x16>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800169e:	f7ff fde9 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a2:	f002 fcfd 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016a6:	f7ff fbbf 	bl	8000e28 <main>

080016aa <LoopForever>:

LoopForever:
    b LoopForever
 80016aa:	e7fe      	b.n	80016aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016b8:	0800707c 	.word	0x0800707c
  ldr r2, =_sbss
 80016bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80016c0:	200002e8 	.word	0x200002e8

080016c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_2_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x28>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x28>)
 80016d2:	f043 0310 	orr.w	r3, r3, #16
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f931 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fcb2 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40022000 	.word	0x40022000

080016f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f93b 	bl	800198e <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f911 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000008 	.word	0x20000008
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	200002d4 	.word	0x200002d4

0800177c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200002d4 	.word	0x200002d4

08001794 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff47 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff5c 	bl	8001824 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffb0 	bl	80018fc <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e160      	b.n	8001c7a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8152 	beq.w	8001c74 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d005      	beq.n	80019e8 <HAL_GPIO_Init+0x40>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d130      	bne.n	8001a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 0201 	and.w	r2, r3, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d017      	beq.n	8001a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d123      	bne.n	8001ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	08da      	lsrs	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3208      	adds	r2, #8
 8001a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	6939      	ldr	r1, [r7, #16]
 8001ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0203 	and.w	r2, r3, #3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80ac 	beq.w	8001c74 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b34:	4a59      	ldr	r2, [pc, #356]	; (8001c9c <HAL_GPIO_Init+0x2f4>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b5e:	d025      	beq.n	8001bac <HAL_GPIO_Init+0x204>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <HAL_GPIO_Init+0x2f8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d01f      	beq.n	8001ba8 <HAL_GPIO_Init+0x200>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a4e      	ldr	r2, [pc, #312]	; (8001ca4 <HAL_GPIO_Init+0x2fc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d019      	beq.n	8001ba4 <HAL_GPIO_Init+0x1fc>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a4d      	ldr	r2, [pc, #308]	; (8001ca8 <HAL_GPIO_Init+0x300>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <HAL_GPIO_Init+0x1f8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_GPIO_Init+0x1f4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a4b      	ldr	r2, [pc, #300]	; (8001cb0 <HAL_GPIO_Init+0x308>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x1f0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <HAL_GPIO_Init+0x30c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_GPIO_Init+0x1ec>
 8001b90:	2306      	movs	r3, #6
 8001b92:	e00c      	b.n	8001bae <HAL_GPIO_Init+0x206>
 8001b94:	2307      	movs	r3, #7
 8001b96:	e00a      	b.n	8001bae <HAL_GPIO_Init+0x206>
 8001b98:	2305      	movs	r3, #5
 8001b9a:	e008      	b.n	8001bae <HAL_GPIO_Init+0x206>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e006      	b.n	8001bae <HAL_GPIO_Init+0x206>
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e004      	b.n	8001bae <HAL_GPIO_Init+0x206>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x206>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_GPIO_Init+0x206>
 8001bac:	2300      	movs	r3, #0
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	f002 0203 	and.w	r2, r2, #3
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bbe:	4937      	ldr	r1, [pc, #220]	; (8001c9c <HAL_GPIO_Init+0x2f4>)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bf0:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c1a:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c44:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3301      	adds	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f47f ae97 	bne.w	80019b8 <HAL_GPIO_Init+0x10>
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	48000c00 	.word	0x48000c00
 8001cac:	48001000 	.word	0x48001000
 8001cb0:	48001400 	.word	0x48001400
 8001cb4:	48001800 	.word	0x48001800
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e001      	b.n	8001cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f000 bf01 	b.w	8002b38 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8160 	beq.w	8002006 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d46:	4bae      	ldr	r3, [pc, #696]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d00c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d52:	4bab      	ldr	r3, [pc, #684]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d159      	bne.n	8001e12 <HAL_RCC_OscConfig+0xf6>
 8001d5e:	4ba8      	ldr	r3, [pc, #672]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d152      	bne.n	8001e12 <HAL_RCC_OscConfig+0xf6>
 8001d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d70:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_OscConfig+0x82>
 8001d98:	4b99      	ldr	r3, [pc, #612]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	e015      	b.n	8001dca <HAL_RCC_OscConfig+0xae>
 8001d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001dc6:	4b8e      	ldr	r3, [pc, #568]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dce:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001dd2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001dd6:	fa92 f2a2 	rbit	r2, r2
 8001dda:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001dde:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0220 	orr.w	r2, r2, #32
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8102 	beq.w	8002004 <HAL_RCC_OscConfig+0x2e8>
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f040 80fc 	bne.w	8002004 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f000 be93 	b.w	8002b38 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_OscConfig+0x110>
 8001e1e:	4b78      	ldr	r3, [pc, #480]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a77      	ldr	r2, [pc, #476]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e030      	b.n	8001e8e <HAL_RCC_OscConfig+0x172>
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x134>
 8001e36:	4b72      	ldr	r3, [pc, #456]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a71      	ldr	r2, [pc, #452]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6e      	ldr	r2, [pc, #440]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e01e      	b.n	8001e8e <HAL_RCC_OscConfig+0x172>
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x15a>
 8001e5c:	4b68      	ldr	r3, [pc, #416]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a67      	ldr	r2, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a64      	ldr	r2, [pc, #400]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e00b      	b.n	8001e8e <HAL_RCC_OscConfig+0x172>
 8001e76:	4b62      	ldr	r3, [pc, #392]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a61      	ldr	r2, [pc, #388]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b5f      	ldr	r3, [pc, #380]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a5e      	ldr	r2, [pc, #376]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d059      	beq.n	8001f4c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fc70 	bl	800177c <HAL_GetTick>
 8001e9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea2:	f7ff fc6b 	bl	800177c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d902      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	f000 be40 	b.w	8002b38 <HAL_RCC_OscConfig+0xe1c>
 8001eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ebc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001ecc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d102      	bne.n	8001eea <HAL_RCC_OscConfig+0x1ce>
 8001ee4:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	e015      	b.n	8001f16 <HAL_RCC_OscConfig+0x1fa>
 8001eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f02:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f1a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001f1e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001f22:	fa92 f2a2 	rbit	r2, r2
 8001f26:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001f2a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f2e:	fab2 f282 	clz	r2, r2
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f042 0220 	orr.w	r2, r2, #32
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f002 021f 	and.w	r2, r2, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ab      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x186>
 8001f4a:	e05c      	b.n	8002006 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fc16 	bl	800177c <HAL_GetTick>
 8001f50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f56:	f7ff fc11 	bl	800177c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d902      	bls.n	8001f6c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	f000 bde6 	b.w	8002b38 <HAL_RCC_OscConfig+0xe1c>
 8001f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f70:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001f80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_OscConfig+0x282>
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x2ae>
 8001f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_RCC_OscConfig+0x2e4>)
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fce:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001fd2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001fd6:	fa92 f2a2 	rbit	r2, r2
 8001fda:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001fde:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fe2:	fab2 f282 	clz	r2, r2
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f042 0220 	orr.w	r2, r2, #32
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f002 021f 	and.w	r2, r2, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1ab      	bne.n	8001f56 <HAL_RCC_OscConfig+0x23a>
 8001ffe:	e002      	b.n	8002006 <HAL_RCC_OscConfig+0x2ea>
 8002000:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8170 	beq.w	80022f6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002016:	4bd0      	ldr	r3, [pc, #832]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002022:	4bcd      	ldr	r3, [pc, #820]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d16d      	bne.n	800210a <HAL_RCC_OscConfig+0x3ee>
 800202e:	4bca      	ldr	r3, [pc, #808]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203a:	d166      	bne.n	800210a <HAL_RCC_OscConfig+0x3ee>
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800204e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d102      	bne.n	800206c <HAL_RCC_OscConfig+0x350>
 8002066:	4bbc      	ldr	r3, [pc, #752]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	e013      	b.n	8002094 <HAL_RCC_OscConfig+0x378>
 800206c:	2302      	movs	r3, #2
 800206e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800207e:	2302      	movs	r3, #2
 8002080:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002084:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002090:	4bb1      	ldr	r3, [pc, #708]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	2202      	movs	r2, #2
 8002096:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800209a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800209e:	fa92 f2a2 	rbit	r2, r2
 80020a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80020a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020aa:	fab2 f282 	clz	r2, r2
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f042 0220 	orr.w	r2, r2, #32
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f002 021f 	and.w	r2, r2, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_RCC_OscConfig+0x3ba>
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d002      	beq.n	80020d6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	f000 bd31 	b.w	8002b38 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d6:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	21f8      	movs	r1, #248	; 0xf8
 80020e6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80020ee:	fa91 f1a1 	rbit	r1, r1
 80020f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80020f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020fa:	fab1 f181 	clz	r1, r1
 80020fe:	b2c9      	uxtb	r1, r1
 8002100:	408b      	lsls	r3, r1
 8002102:	4995      	ldr	r1, [pc, #596]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002108:	e0f5      	b.n	80022f6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8085 	beq.w	8002220 <HAL_RCC_OscConfig+0x504>
 8002116:	2301      	movs	r3, #1
 8002118:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002128:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002136:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	461a      	mov	r2, r3
 800213e:	2301      	movs	r3, #1
 8002140:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7ff fb1b 	bl	800177c <HAL_GetTick>
 8002146:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214c:	f7ff fb16 	bl	800177c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d902      	bls.n	8002162 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	f000 bceb 	b.w	8002b38 <HAL_RCC_OscConfig+0xe1c>
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002174:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_RCC_OscConfig+0x476>
 800218c:	4b72      	ldr	r3, [pc, #456]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	e013      	b.n	80021ba <HAL_RCC_OscConfig+0x49e>
 8002192:	2302      	movs	r3, #2
 8002194:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80021a4:	2302      	movs	r3, #2
 80021a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021b6:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2202      	movs	r2, #2
 80021bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80021cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f042 0220 	orr.w	r2, r2, #32
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f002 021f 	and.w	r2, r2, #31
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0af      	beq.n	800214c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b5a      	ldr	r3, [pc, #360]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	21f8      	movs	r1, #248	; 0xf8
 80021fc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002204:	fa91 f1a1 	rbit	r1, r1
 8002208:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800220c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002210:	fab1 f181 	clz	r1, r1
 8002214:	b2c9      	uxtb	r1, r1
 8002216:	408b      	lsls	r3, r1
 8002218:	494f      	ldr	r1, [pc, #316]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
 800221e:	e06a      	b.n	80022f6 <HAL_RCC_OscConfig+0x5da>
 8002220:	2301      	movs	r3, #1
 8002222:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002232:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002240:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	461a      	mov	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fa96 	bl	800177c <HAL_GetTick>
 8002250:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002256:	f7ff fa91 	bl	800177c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d902      	bls.n	800226c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	f000 bc66 	b.w	8002b38 <HAL_RCC_OscConfig+0xe1c>
 800226c:	2302      	movs	r3, #2
 800226e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800227e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d102      	bne.n	800229c <HAL_RCC_OscConfig+0x580>
 8002296:	4b30      	ldr	r3, [pc, #192]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	e013      	b.n	80022c4 <HAL_RCC_OscConfig+0x5a8>
 800229c:	2302      	movs	r3, #2
 800229e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80022ae:	2302      	movs	r3, #2
 80022b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_RCC_OscConfig+0x63c>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	2202      	movs	r2, #2
 80022c6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80022ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80022ce:	fa92 f2a2 	rbit	r2, r2
 80022d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80022d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1af      	bne.n	8002256 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80da 	beq.w	80024ba <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d069      	beq.n	80023e4 <HAL_RCC_OscConfig+0x6c8>
 8002310:	2301      	movs	r3, #1
 8002312:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002322:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_OscConfig+0x640>)
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	461a      	mov	r2, r3
 8002336:	2301      	movs	r3, #1
 8002338:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7ff fa1f 	bl	800177c <HAL_GetTick>
 800233e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	e00d      	b.n	8002360 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002344:	f7ff fa1a 	bl	800177c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d905      	bls.n	8002360 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e3ef      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
 8002358:	40021000 	.word	0x40021000
 800235c:	10908120 	.word	0x10908120
 8002360:	2302      	movs	r3, #2
 8002362:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002378:	2202      	movs	r2, #2
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	fa93 f2a3 	rbit	r2, r3
 8002386:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002390:	2202      	movs	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a4:	4ba4      	ldr	r3, [pc, #656]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 80023a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023ac:	2102      	movs	r1, #2
 80023ae:	6019      	str	r1, [r3, #0]
 80023b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	fa93 f1a3 	rbit	r1, r3
 80023ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023be:	6019      	str	r1, [r3, #0]
  return result;
 80023c0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0b0      	beq.n	8002344 <HAL_RCC_OscConfig+0x628>
 80023e2:	e06a      	b.n	80024ba <HAL_RCC_OscConfig+0x79e>
 80023e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80023fa:	601a      	str	r2, [r3, #0]
  return result;
 80023fc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002400:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	4b8c      	ldr	r3, [pc, #560]	; (800263c <HAL_RCC_OscConfig+0x920>)
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	461a      	mov	r2, r3
 8002412:	2300      	movs	r3, #0
 8002414:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff f9b1 	bl	800177c <HAL_GetTick>
 800241a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241e:	e009      	b.n	8002434 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff f9ac 	bl	800177c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e381      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
 8002434:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002438:	2202      	movs	r2, #2
 800243a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002468:	2202      	movs	r2, #2
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800247a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b6e      	ldr	r3, [pc, #440]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 800247e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002480:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002484:	2102      	movs	r1, #2
 8002486:	6019      	str	r1, [r3, #0]
 8002488:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	fa93 f1a3 	rbit	r1, r3
 8002492:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002496:	6019      	str	r1, [r3, #0]
  return result;
 8002498:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1b2      	bne.n	8002420 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8157 	beq.w	8002778 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d0:	4b59      	ldr	r3, [pc, #356]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d112      	bne.n	8002502 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024dc:	4b56      	ldr	r3, [pc, #344]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4a55      	ldr	r2, [pc, #340]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	61d3      	str	r3, [r2, #28]
 80024e8:	4b53      	ldr	r3, [pc, #332]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_RCC_OscConfig+0x924>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11a      	bne.n	8002544 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x924>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a4b      	ldr	r2, [pc, #300]	; (8002640 <HAL_RCC_OscConfig+0x924>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251a:	f7ff f92f 	bl	800177c <HAL_GetTick>
 800251e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	e009      	b.n	8002538 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7ff f92a 	bl	800177c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	; 0x64
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e2ff      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_OscConfig+0x924>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ef      	beq.n	8002524 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d106      	bne.n	800255c <HAL_RCC_OscConfig+0x840>
 800254e:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a39      	ldr	r2, [pc, #228]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	e02f      	b.n	80025bc <HAL_RCC_OscConfig+0x8a0>
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x864>
 8002566:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a33      	ldr	r2, [pc, #204]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b31      	ldr	r3, [pc, #196]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a30      	ldr	r2, [pc, #192]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0x8a0>
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b05      	cmp	r3, #5
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x888>
 800258a:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a27      	ldr	r2, [pc, #156]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0x8a0>
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a23      	ldr	r2, [pc, #140]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6213      	str	r3, [r2, #32]
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a20      	ldr	r2, [pc, #128]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 80025b6:	f023 0304 	bic.w	r3, r3, #4
 80025ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d06a      	beq.n	800269c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7ff f8d9 	bl	800177c <HAL_GetTick>
 80025ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7ff f8d4 	bl	800177c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2a7      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
 80025e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	fa93 f2a3 	rbit	r2, r3
 80025fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002604:	2202      	movs	r2, #2
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002616:	601a      	str	r2, [r3, #0]
  return result;
 8002618:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800261c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d108      	bne.n	8002644 <HAL_RCC_OscConfig+0x928>
 8002632:	4b01      	ldr	r3, [pc, #4]	; (8002638 <HAL_RCC_OscConfig+0x91c>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	e013      	b.n	8002660 <HAL_RCC_OscConfig+0x944>
 8002638:	40021000 	.word	0x40021000
 800263c:	10908120 	.word	0x10908120
 8002640:	40007000 	.word	0x40007000
 8002644:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002648:	2202      	movs	r2, #2
 800264a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	4bc0      	ldr	r3, [pc, #768]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002664:	2102      	movs	r1, #2
 8002666:	6011      	str	r1, [r2, #0]
 8002668:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	fa92 f1a2 	rbit	r1, r2
 8002672:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002676:	6011      	str	r1, [r2, #0]
  return result;
 8002678:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	fab2 f282 	clz	r2, r2
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f002 021f 	and.w	r2, r2, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f202 	lsl.w	r2, r1, r2
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d09a      	beq.n	80025d0 <HAL_RCC_OscConfig+0x8b4>
 800269a:	e063      	b.n	8002764 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7ff f86e 	bl	800177c <HAL_GetTick>
 80026a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a4:	e00b      	b.n	80026be <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7ff f869 	bl	800177c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e23c      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
 80026be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026c2:	2202      	movs	r2, #2
 80026c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026da:	2202      	movs	r2, #2
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026ec:	601a      	str	r2, [r3, #0]
  return result;
 80026ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d102      	bne.n	800270e <HAL_RCC_OscConfig+0x9f2>
 8002708:	4b95      	ldr	r3, [pc, #596]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	e00d      	b.n	800272a <HAL_RCC_OscConfig+0xa0e>
 800270e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002712:	2202      	movs	r2, #2
 8002714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	4b8e      	ldr	r3, [pc, #568]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800272e:	2102      	movs	r1, #2
 8002730:	6011      	str	r1, [r2, #0]
 8002732:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	fa92 f1a2 	rbit	r1, r2
 800273c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002740:	6011      	str	r1, [r2, #0]
  return result;
 8002742:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	fab2 f282 	clz	r2, r2
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f002 021f 	and.w	r2, r2, #31
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1a0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002764:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276c:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4a7b      	ldr	r2, [pc, #492]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002776:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 81d9 	beq.w	8002b36 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002784:	4b76      	ldr	r3, [pc, #472]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	f000 81a6 	beq.w	8002ade <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b02      	cmp	r3, #2
 800279a:	f040 811e 	bne.w	80029da <HAL_RCC_OscConfig+0xcbe>
 800279e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027b6:	601a      	str	r2, [r3, #0]
  return result;
 80027b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	461a      	mov	r2, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe ffd2 	bl	800177c <HAL_GetTick>
 80027d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	e009      	b.n	80027f2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe ffcd 	bl	800177c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1a2      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
 80027f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800280a:	601a      	str	r2, [r3, #0]
  return result;
 800280c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002810:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0xb10>
 8002826:	4b4e      	ldr	r3, [pc, #312]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e01b      	b.n	8002864 <HAL_RCC_OscConfig+0xb48>
 800282c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fa93 f2a3 	rbit	r2, r3
 8002840:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800284a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002868:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800286c:	6011      	str	r1, [r2, #0]
 800286e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	fa92 f1a2 	rbit	r1, r2
 8002878:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800287c:	6011      	str	r1, [r2, #0]
  return result;
 800287e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	fab2 f282 	clz	r2, r2
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	f042 0220 	orr.w	r2, r2, #32
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f002 021f 	and.w	r2, r2, #31
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f202 	lsl.w	r2, r1, r2
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d19e      	bne.n	80027de <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a0:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f023 020f 	bic.w	r2, r3, #15
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	492c      	ldr	r1, [pc, #176]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80028b4:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6a19      	ldr	r1, [r3, #32]
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	4925      	ldr	r1, [pc, #148]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fa93 f2a3 	rbit	r2, r3
 80028e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028e8:	601a      	str	r2, [r3, #0]
  return result;
 80028ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028ee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	461a      	mov	r2, r3
 8002902:	2301      	movs	r3, #1
 8002904:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe ff39 	bl	800177c <HAL_GetTick>
 800290a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800290e:	e009      	b.n	8002924 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe ff34 	bl	800177c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e109      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
 8002924:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800293c:	601a      	str	r2, [r3, #0]
  return result;
 800293e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002942:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_RCC_OscConfig+0xc48>
 8002958:	4b01      	ldr	r3, [pc, #4]	; (8002960 <HAL_RCC_OscConfig+0xc44>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	e01e      	b.n	800299c <HAL_RCC_OscConfig+0xc80>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800296c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002982:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_RCC_OscConfig+0xe28>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029a4:	6011      	str	r1, [r2, #0]
 80029a6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	fa92 f1a2 	rbit	r1, r2
 80029b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029b4:	6011      	str	r1, [r2, #0]
  return result;
 80029b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	fab2 f282 	clz	r2, r2
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	f042 0220 	orr.w	r2, r2, #32
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	f002 021f 	and.w	r2, r2, #31
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d09b      	beq.n	8002910 <HAL_RCC_OscConfig+0xbf4>
 80029d8:	e0ad      	b.n	8002b36 <HAL_RCC_OscConfig+0xe1a>
 80029da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029f2:	601a      	str	r2, [r3, #0]
  return result;
 80029f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe feb4 	bl	800177c <HAL_GetTick>
 8002a14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a18:	e009      	b.n	8002a2e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe feaf 	bl	800177c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e084      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
 8002a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	fa93 f2a3 	rbit	r2, r3
 8002a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a46:	601a      	str	r2, [r3, #0]
  return result;
 8002a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_RCC_OscConfig+0xd4c>
 8002a62:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <HAL_RCC_OscConfig+0xe28>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	e01b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd84>
 8002a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f107 0320 	add.w	r3, r7, #32
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fa93 f2a3 	rbit	r2, r3
 8002a96:	f107 0318 	add.w	r3, r7, #24
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_RCC_OscConfig+0xe28>)
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f107 0214 	add.w	r2, r7, #20
 8002aa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aa8:	6011      	str	r1, [r2, #0]
 8002aaa:	f107 0214 	add.w	r2, r7, #20
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	fa92 f1a2 	rbit	r1, r2
 8002ab4:	f107 0210 	add.w	r2, r7, #16
 8002ab8:	6011      	str	r1, [r2, #0]
  return result;
 8002aba:	f107 0210 	add.w	r2, r7, #16
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	fab2 f282 	clz	r2, r2
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	f042 0220 	orr.w	r2, r2, #32
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f002 021f 	and.w	r2, r2, #31
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d19e      	bne.n	8002a1a <HAL_RCC_OscConfig+0xcfe>
 8002adc:	e02b      	b.n	8002b36 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e025      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_RCC_OscConfig+0xe28>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_RCC_OscConfig+0xe28>)
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002afc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b00:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d111      	bne.n	8002b32 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d108      	bne.n	8002b32 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b09e      	sub	sp, #120	; 0x78
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e162      	b.n	8002e26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b90      	ldr	r3, [pc, #576]	; (8002da4 <HAL_RCC_ClockConfig+0x25c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d910      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b8d      	ldr	r3, [pc, #564]	; (8002da4 <HAL_RCC_ClockConfig+0x25c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0207 	bic.w	r2, r3, #7
 8002b76:	498b      	ldr	r1, [pc, #556]	; (8002da4 <HAL_RCC_ClockConfig+0x25c>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_ClockConfig+0x25c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e14a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b82      	ldr	r3, [pc, #520]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	497f      	ldr	r1, [pc, #508]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80dc 	beq.w	8002d74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d13c      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xf6>
 8002bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_RCC_ClockConfig+0xa6>
 8002be8:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	e00f      	b.n	8002c0e <HAL_RCC_ClockConfig+0xc6>
 8002bee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8002bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c00:	663b      	str	r3, [r7, #96]	; 0x60
 8002c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c0a:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c12:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c16:	fa92 f2a2 	rbit	r2, r2
 8002c1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c1e:	fab2 f282 	clz	r2, r2
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f042 0220 	orr.w	r2, r2, #32
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f002 021f 	and.w	r2, r2, #31
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d17b      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0f3      	b.n	8002e26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d13c      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x178>
 8002c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d102      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x128>
 8002c6a:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	e00f      	b.n	8002c90 <HAL_RCC_ClockConfig+0x148>
 8002c70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c82:	643b      	str	r3, [r7, #64]	; 0x40
 8002c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c8c:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c94:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c98:	fa92 f2a2 	rbit	r2, r2
 8002c9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f002 021f 	and.w	r2, r2, #31
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d13a      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0b2      	b.n	8002e26 <HAL_RCC_ClockConfig+0x2de>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x1a0>
 8002ce2:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	e00d      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1bc>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	623b      	str	r3, [r7, #32]
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2202      	movs	r2, #2
 8002d06:	61ba      	str	r2, [r7, #24]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	fa92 f2a2 	rbit	r2, r2
 8002d0e:	617a      	str	r2, [r7, #20]
  return result;
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f042 0220 	orr.w	r2, r2, #32
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f002 021f 	and.w	r2, r2, #31
 8002d22:	2101      	movs	r1, #1
 8002d24:	fa01 f202 	lsl.w	r2, r1, r2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e079      	b.n	8002e26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	491a      	ldr	r1, [pc, #104]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d44:	f7fe fd1a 	bl	800177c <HAL_GetTick>
 8002d48:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4c:	f7fe fd16 	bl	800177c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e061      	b.n	8002e26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_ClockConfig+0x260>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 020c 	and.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d1eb      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_ClockConfig+0x25c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d214      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_RCC_ClockConfig+0x25c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0207 	bic.w	r2, r3, #7
 8002d8a:	4906      	ldr	r1, [pc, #24]	; (8002da4 <HAL_RCC_ClockConfig+0x25c>)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <HAL_RCC_ClockConfig+0x25c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e040      	b.n	8002e26 <HAL_RCC_ClockConfig+0x2de>
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <HAL_RCC_ClockConfig+0x2e8>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	491a      	ldr	r1, [pc, #104]	; (8002e30 <HAL_RCC_ClockConfig+0x2e8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd6:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <HAL_RCC_ClockConfig+0x2e8>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4912      	ldr	r1, [pc, #72]	; (8002e30 <HAL_RCC_ClockConfig+0x2e8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dea:	f000 f829 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dee:	4601      	mov	r1, r0
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_RCC_ClockConfig+0x2e8>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df8:	22f0      	movs	r2, #240	; 0xf0
 8002dfa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	fa92 f2a2 	rbit	r2, r2
 8002e02:	60fa      	str	r2, [r7, #12]
  return result;
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	fab2 f282 	clz	r2, r2
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	40d3      	lsrs	r3, r2
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x2ec>)
 8002e10:	5cd3      	ldrb	r3, [r2, r3]
 8002e12:	fa21 f303 	lsr.w	r3, r1, r3
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <HAL_RCC_ClockConfig+0x2f0>)
 8002e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_RCC_ClockConfig+0x2f4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fc68 	bl	80016f4 <HAL_InitTick>
  
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3778      	adds	r7, #120	; 0x78
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08006c58 	.word	0x08006c58
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b08b      	sub	sp, #44	; 0x2c
 8002e44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d002      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x30>
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x36>
 8002e6e:	e03f      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e72:	623b      	str	r3, [r7, #32]
      break;
 8002e74:	e03f      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e7c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e80:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	fa92 f2a2 	rbit	r2, r2
 8002e88:	607a      	str	r2, [r7, #4]
  return result;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	fab2 f282 	clz	r2, r2
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	40d3      	lsrs	r3, r2
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	fa92 f2a2 	rbit	r2, r2
 8002eac:	60fa      	str	r2, [r7, #12]
  return result;
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	fab2 f282 	clz	r2, r2
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	40d3      	lsrs	r3, r2
 8002eb8:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ec8:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed8:	e007      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	623b      	str	r3, [r7, #32]
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ef2:	623b      	str	r3, [r7, #32]
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	372c      	adds	r7, #44	; 0x2c
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40021000 	.word	0x40021000
 8002f08:	007a1200 	.word	0x007a1200
 8002f0c:	08006c70 	.word	0x08006c70
 8002f10:	08006c80 	.word	0x08006c80

08002f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f32:	f7ff ffef 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f36:	4601      	mov	r1, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f40:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	fa92 f2a2 	rbit	r2, r2
 8002f4c:	603a      	str	r2, [r7, #0]
  return result;
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	40d3      	lsrs	r3, r2
 8002f58:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	08006c68 	.word	0x08006c68

08002f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f76:	f7ff ffcd 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f7a:	4601      	mov	r1, r0
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f84:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	fa92 f2a2 	rbit	r2, r2
 8002f90:	603a      	str	r2, [r7, #0]
  return result;
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	40d3      	lsrs	r3, r2
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08006c68 	.word	0x08006c68

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b092      	sub	sp, #72	; 0x48
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80d4 	beq.w	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd8:	4b4e      	ldr	r3, [pc, #312]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10e      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	61d3      	str	r3, [r2, #28]
 8002ff0:	4b48      	ldr	r3, [pc, #288]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b45      	ldr	r3, [pc, #276]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b42      	ldr	r3, [pc, #264]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a41      	ldr	r2, [pc, #260]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe fbaf 	bl	800177c <HAL_GetTick>
 800301e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe fbab 	bl	800177c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1d6      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8084 	beq.w	800315a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800305c:	429a      	cmp	r2, r3
 800305e:	d07c      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003060:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4b26      	ldr	r3, [pc, #152]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	2301      	movs	r3, #1
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	461a      	mov	r2, r3
 80030ae:	2300      	movs	r3, #0
 80030b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d04b      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fe fb5b 	bl	800177c <HAL_GetTick>
 80030c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe fb57 	bl	800177c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e180      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
 80030ec:	2302      	movs	r3, #2
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	61fb      	str	r3, [r7, #28]
  return result;
 80030f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d108      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800310e:	4b01      	ldr	r3, [pc, #4]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	e00d      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
 800311c:	10908100 	.word	0x10908100
 8003120:	2302      	movs	r3, #2
 8003122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	4ba0      	ldr	r3, [pc, #640]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2202      	movs	r2, #2
 8003132:	613a      	str	r2, [r7, #16]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	fa92 f2a2 	rbit	r2, r2
 800313a:	60fa      	str	r2, [r7, #12]
  return result;
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	fab2 f282 	clz	r2, r2
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	f002 021f 	and.w	r2, r2, #31
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0b7      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800315a:	4b95      	ldr	r3, [pc, #596]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4992      	ldr	r1, [pc, #584]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800316c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003174:	4b8e      	ldr	r3, [pc, #568]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4a8d      	ldr	r2, [pc, #564]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800317a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800318c:	4b88      	ldr	r3, [pc, #544]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f023 0203 	bic.w	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4985      	ldr	r1, [pc, #532]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031aa:	4b81      	ldr	r3, [pc, #516]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	497e      	ldr	r1, [pc, #504]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031c8:	4b79      	ldr	r3, [pc, #484]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	4976      	ldr	r1, [pc, #472]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e6:	4b72      	ldr	r3, [pc, #456]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f023 0210 	bic.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	496f      	ldr	r1, [pc, #444]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003204:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	4967      	ldr	r1, [pc, #412]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f023 0220 	bic.w	r2, r3, #32
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4960      	ldr	r1, [pc, #384]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003230:	4313      	orrs	r3, r2
 8003232:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003240:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	4958      	ldr	r1, [pc, #352]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800325e:	4b54      	ldr	r3, [pc, #336]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	4951      	ldr	r1, [pc, #324]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800327c:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	4949      	ldr	r1, [pc, #292]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800329a:	4b45      	ldr	r3, [pc, #276]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4942      	ldr	r1, [pc, #264]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032b8:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	493a      	ldr	r1, [pc, #232]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	4933      	ldr	r1, [pc, #204]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032f4:	4b2e      	ldr	r3, [pc, #184]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	492b      	ldr	r1, [pc, #172]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003312:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4924      	ldr	r1, [pc, #144]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	491c      	ldr	r1, [pc, #112]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	4915      	ldr	r1, [pc, #84]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	490d      	ldr	r1, [pc, #52]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003396:	4906      	ldr	r1, [pc, #24]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003398:	4313      	orrs	r3, r2
 800339a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80033a8:	4b01      	ldr	r3, [pc, #4]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	e002      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033bc:	490b      	ldr	r1, [pc, #44]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033da:	4904      	ldr	r1, [pc, #16]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3748      	adds	r7, #72	; 0x48
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000

080033f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e049      	b.n	8003496 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd ff74 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 f89e 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d001      	beq.n	80034b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e047      	b.n	8003548 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <HAL_TIM_Base_Start+0xb4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01d      	beq.n	8003506 <HAL_TIM_Base_Start+0x66>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d018      	beq.n	8003506 <HAL_TIM_Base_Start+0x66>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <HAL_TIM_Base_Start+0xb8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_TIM_Base_Start+0x66>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1e      	ldr	r2, [pc, #120]	; (800355c <HAL_TIM_Base_Start+0xbc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_TIM_Base_Start+0x66>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <HAL_TIM_Base_Start+0xc0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_TIM_Base_Start+0x66>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_TIM_Base_Start+0xc4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIM_Base_Start+0x66>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a19      	ldr	r2, [pc, #100]	; (8003568 <HAL_TIM_Base_Start+0xc8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d115      	bne.n	8003532 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <HAL_TIM_Base_Start+0xcc>)
 800350e:	4013      	ands	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b06      	cmp	r3, #6
 8003516:	d015      	beq.n	8003544 <HAL_TIM_Base_Start+0xa4>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d011      	beq.n	8003544 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	e008      	b.n	8003544 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e000      	b.n	8003546 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003544:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40000400 	.word	0x40000400
 800355c:	40000800 	.word	0x40000800
 8003560:	40013400 	.word	0x40013400
 8003564:	40014000 	.word	0x40014000
 8003568:	40015000 	.word	0x40015000
 800356c:	00010007 	.word	0x00010007

08003570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a42      	ldr	r2, [pc, #264]	; (800368c <TIM_Base_SetConfig+0x11c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d00f      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <TIM_Base_SetConfig+0x120>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3e      	ldr	r2, [pc, #248]	; (8003694 <TIM_Base_SetConfig+0x124>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3d      	ldr	r2, [pc, #244]	; (8003698 <TIM_Base_SetConfig+0x128>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3c      	ldr	r2, [pc, #240]	; (800369c <TIM_Base_SetConfig+0x12c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a31      	ldr	r2, [pc, #196]	; (800368c <TIM_Base_SetConfig+0x11c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d01b      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2e      	ldr	r2, [pc, #184]	; (8003690 <TIM_Base_SetConfig+0x120>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d017      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <TIM_Base_SetConfig+0x124>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <TIM_Base_SetConfig+0x128>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00f      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <TIM_Base_SetConfig+0x130>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <TIM_Base_SetConfig+0x134>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <TIM_Base_SetConfig+0x138>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a25      	ldr	r2, [pc, #148]	; (800369c <TIM_Base_SetConfig+0x12c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a12      	ldr	r2, [pc, #72]	; (800368c <TIM_Base_SetConfig+0x11c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <TIM_Base_SetConfig+0x100>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a13      	ldr	r2, [pc, #76]	; (8003698 <TIM_Base_SetConfig+0x128>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00f      	beq.n	8003670 <TIM_Base_SetConfig+0x100>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <TIM_Base_SetConfig+0x130>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00b      	beq.n	8003670 <TIM_Base_SetConfig+0x100>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <TIM_Base_SetConfig+0x134>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d007      	beq.n	8003670 <TIM_Base_SetConfig+0x100>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <TIM_Base_SetConfig+0x138>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_Base_SetConfig+0x100>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a0c      	ldr	r2, [pc, #48]	; (800369c <TIM_Base_SetConfig+0x12c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d103      	bne.n	8003678 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	615a      	str	r2, [r3, #20]
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800
 8003698:	40013400 	.word	0x40013400
 800369c:	40015000 	.word	0x40015000
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800

080036ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e06d      	b.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a30      	ldr	r2, [pc, #192]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2f      	ldr	r2, [pc, #188]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003708:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d01d      	beq.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d018      	beq.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a11      	ldr	r2, [pc, #68]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d10c      	bne.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	4313      	orrs	r3, r2
 8003784:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40013400 	.word	0x40013400
 80037b4:	40015000 	.word	0x40015000
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800
 80037c0:	40014000 	.word	0x40014000

080037c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e040      	b.n	8003858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fddc 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	; 0x24
 80037f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8c0 	bl	8003988 <UART_SetConfig>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e022      	b.n	8003858 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa8a 	bl	8003d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fb11 	bl	8003e78 <UART_CheckIdleState>
 8003856:	4603      	mov	r3, r0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003874:	2b20      	cmp	r3, #32
 8003876:	f040 8082 	bne.w	800397e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_UART_Transmit+0x26>
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07a      	b.n	8003980 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_UART_Transmit+0x38>
 8003894:	2302      	movs	r3, #2
 8003896:	e073      	b.n	8003980 <HAL_UART_Transmit+0x120>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2221      	movs	r2, #33	; 0x21
 80038ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ae:	f7fd ff65 	bl	800177c <HAL_GetTick>
 80038b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d108      	bne.n	80038e0 <HAL_UART_Transmit+0x80>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e003      	b.n	80038e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038f0:	e02d      	b.n	800394e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fb04 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e039      	b.n	8003980 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800391e:	b292      	uxth	r2, r2
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	3302      	adds	r3, #2
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	e008      	b.n	800393c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	b292      	uxth	r2, r2
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3301      	adds	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1cb      	bne.n	80038f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2200      	movs	r2, #0
 8003962:	2140      	movs	r1, #64	; 0x40
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fad0 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e005      	b.n	8003980 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4bab      	ldr	r3, [pc, #684]	; (8003c60 <UART_SetConfig+0x2d8>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	6979      	ldr	r1, [r7, #20]
 80039bc:	430b      	orrs	r3, r1
 80039be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a99      	ldr	r2, [pc, #612]	; (8003c64 <UART_SetConfig+0x2dc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d120      	bne.n	8003a46 <UART_SetConfig+0xbe>
 8003a04:	4b98      	ldr	r3, [pc, #608]	; (8003c68 <UART_SetConfig+0x2e0>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d817      	bhi.n	8003a40 <UART_SetConfig+0xb8>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <UART_SetConfig+0x90>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a35 	.word	0x08003a35
 8003a20:	08003a3b 	.word	0x08003a3b
 8003a24:	08003a2f 	.word	0x08003a2f
 8003a28:	2301      	movs	r3, #1
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e0b5      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e0b2      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a34:	2304      	movs	r3, #4
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e0af      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e0ac      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a40:	2310      	movs	r3, #16
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e0a9      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a88      	ldr	r2, [pc, #544]	; (8003c6c <UART_SetConfig+0x2e4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d124      	bne.n	8003a9a <UART_SetConfig+0x112>
 8003a50:	4b85      	ldr	r3, [pc, #532]	; (8003c68 <UART_SetConfig+0x2e0>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a5c:	d011      	beq.n	8003a82 <UART_SetConfig+0xfa>
 8003a5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a62:	d817      	bhi.n	8003a94 <UART_SetConfig+0x10c>
 8003a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a68:	d011      	beq.n	8003a8e <UART_SetConfig+0x106>
 8003a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a6e:	d811      	bhi.n	8003a94 <UART_SetConfig+0x10c>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <UART_SetConfig+0xf4>
 8003a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a78:	d006      	beq.n	8003a88 <UART_SetConfig+0x100>
 8003a7a:	e00b      	b.n	8003a94 <UART_SetConfig+0x10c>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e08b      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a82:	2302      	movs	r3, #2
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e088      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e085      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	77fb      	strb	r3, [r7, #31]
 8003a92:	e082      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a94:	2310      	movs	r3, #16
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e07f      	b.n	8003b9a <UART_SetConfig+0x212>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a74      	ldr	r2, [pc, #464]	; (8003c70 <UART_SetConfig+0x2e8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d124      	bne.n	8003aee <UART_SetConfig+0x166>
 8003aa4:	4b70      	ldr	r3, [pc, #448]	; (8003c68 <UART_SetConfig+0x2e0>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003aac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ab0:	d011      	beq.n	8003ad6 <UART_SetConfig+0x14e>
 8003ab2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ab6:	d817      	bhi.n	8003ae8 <UART_SetConfig+0x160>
 8003ab8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003abc:	d011      	beq.n	8003ae2 <UART_SetConfig+0x15a>
 8003abe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ac2:	d811      	bhi.n	8003ae8 <UART_SetConfig+0x160>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <UART_SetConfig+0x148>
 8003ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003acc:	d006      	beq.n	8003adc <UART_SetConfig+0x154>
 8003ace:	e00b      	b.n	8003ae8 <UART_SetConfig+0x160>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e061      	b.n	8003b9a <UART_SetConfig+0x212>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e05e      	b.n	8003b9a <UART_SetConfig+0x212>
 8003adc:	2304      	movs	r3, #4
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e05b      	b.n	8003b9a <UART_SetConfig+0x212>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e058      	b.n	8003b9a <UART_SetConfig+0x212>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e055      	b.n	8003b9a <UART_SetConfig+0x212>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a60      	ldr	r2, [pc, #384]	; (8003c74 <UART_SetConfig+0x2ec>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d124      	bne.n	8003b42 <UART_SetConfig+0x1ba>
 8003af8:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <UART_SetConfig+0x2e0>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b04:	d011      	beq.n	8003b2a <UART_SetConfig+0x1a2>
 8003b06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b0a:	d817      	bhi.n	8003b3c <UART_SetConfig+0x1b4>
 8003b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b10:	d011      	beq.n	8003b36 <UART_SetConfig+0x1ae>
 8003b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b16:	d811      	bhi.n	8003b3c <UART_SetConfig+0x1b4>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <UART_SetConfig+0x19c>
 8003b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b20:	d006      	beq.n	8003b30 <UART_SetConfig+0x1a8>
 8003b22:	e00b      	b.n	8003b3c <UART_SetConfig+0x1b4>
 8003b24:	2300      	movs	r3, #0
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e037      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e034      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b30:	2304      	movs	r3, #4
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e031      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b36:	2308      	movs	r3, #8
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e02e      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e02b      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a4c      	ldr	r2, [pc, #304]	; (8003c78 <UART_SetConfig+0x2f0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d124      	bne.n	8003b96 <UART_SetConfig+0x20e>
 8003b4c:	4b46      	ldr	r3, [pc, #280]	; (8003c68 <UART_SetConfig+0x2e0>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003b54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b58:	d011      	beq.n	8003b7e <UART_SetConfig+0x1f6>
 8003b5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b5e:	d817      	bhi.n	8003b90 <UART_SetConfig+0x208>
 8003b60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b64:	d011      	beq.n	8003b8a <UART_SetConfig+0x202>
 8003b66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b6a:	d811      	bhi.n	8003b90 <UART_SetConfig+0x208>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <UART_SetConfig+0x1f0>
 8003b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b74:	d006      	beq.n	8003b84 <UART_SetConfig+0x1fc>
 8003b76:	e00b      	b.n	8003b90 <UART_SetConfig+0x208>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e00d      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e00a      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b84:	2304      	movs	r3, #4
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e007      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e004      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b90:	2310      	movs	r3, #16
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e001      	b.n	8003b9a <UART_SetConfig+0x212>
 8003b96:	2310      	movs	r3, #16
 8003b98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba2:	d16d      	bne.n	8003c80 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003ba4:	7ffb      	ldrb	r3, [r7, #31]
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d827      	bhi.n	8003bfa <UART_SetConfig+0x272>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <UART_SetConfig+0x228>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003bdd 	.word	0x08003bdd
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003bfb 	.word	0x08003bfb
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003bfb 	.word	0x08003bfb
 8003bc8:	08003bfb 	.word	0x08003bfb
 8003bcc:	08003bfb 	.word	0x08003bfb
 8003bd0:	08003bf3 	.word	0x08003bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7ff f9aa 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8003bd8:	61b8      	str	r0, [r7, #24]
        break;
 8003bda:	e013      	b.n	8003c04 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bdc:	f7ff f9c8 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 8003be0:	61b8      	str	r0, [r7, #24]
        break;
 8003be2:	e00f      	b.n	8003c04 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be4:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <UART_SetConfig+0x2f4>)
 8003be6:	61bb      	str	r3, [r7, #24]
        break;
 8003be8:	e00c      	b.n	8003c04 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bea:	f7ff f929 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8003bee:	61b8      	str	r0, [r7, #24]
        break;
 8003bf0:	e008      	b.n	8003c04 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf6:	61bb      	str	r3, [r7, #24]
        break;
 8003bf8:	e004      	b.n	8003c04 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	77bb      	strb	r3, [r7, #30]
        break;
 8003c02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8086 	beq.w	8003d18 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	005a      	lsls	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	441a      	add	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	d916      	bls.n	8003c58 <UART_SetConfig+0x2d0>
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c30:	d212      	bcs.n	8003c58 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f023 030f 	bic.w	r3, r3, #15
 8003c3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	89fb      	ldrh	r3, [r7, #14]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	89fa      	ldrh	r2, [r7, #14]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	e05f      	b.n	8003d18 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	77bb      	strb	r3, [r7, #30]
 8003c5c:	e05c      	b.n	8003d18 <UART_SetConfig+0x390>
 8003c5e:	bf00      	nop
 8003c60:	efff69f3 	.word	0xefff69f3
 8003c64:	40013800 	.word	0x40013800
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40004400 	.word	0x40004400
 8003c70:	40004800 	.word	0x40004800
 8003c74:	40004c00 	.word	0x40004c00
 8003c78:	40005000 	.word	0x40005000
 8003c7c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c80:	7ffb      	ldrb	r3, [r7, #31]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d827      	bhi.n	8003cd6 <UART_SetConfig+0x34e>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <UART_SetConfig+0x304>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	08003cc1 	.word	0x08003cc1
 8003c98:	08003cd7 	.word	0x08003cd7
 8003c9c:	08003cc7 	.word	0x08003cc7
 8003ca0:	08003cd7 	.word	0x08003cd7
 8003ca4:	08003cd7 	.word	0x08003cd7
 8003ca8:	08003cd7 	.word	0x08003cd7
 8003cac:	08003ccf 	.word	0x08003ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb0:	f7ff f93c 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8003cb4:	61b8      	str	r0, [r7, #24]
        break;
 8003cb6:	e013      	b.n	8003ce0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb8:	f7ff f95a 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 8003cbc:	61b8      	str	r0, [r7, #24]
        break;
 8003cbe:	e00f      	b.n	8003ce0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <UART_SetConfig+0x3a8>)
 8003cc2:	61bb      	str	r3, [r7, #24]
        break;
 8003cc4:	e00c      	b.n	8003ce0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc6:	f7ff f8bb 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8003cca:	61b8      	str	r0, [r7, #24]
        break;
 8003ccc:	e008      	b.n	8003ce0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd2:	61bb      	str	r3, [r7, #24]
        break;
 8003cd4:	e004      	b.n	8003ce0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8003cde:	bf00      	nop
    }

    if (pclk != 0U)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d018      	beq.n	8003d18 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	085a      	lsrs	r2, r3, #1
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	441a      	add	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b0f      	cmp	r3, #15
 8003d00:	d908      	bls.n	8003d14 <UART_SetConfig+0x38c>
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d204      	bcs.n	8003d14 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	e001      	b.n	8003d18 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d24:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	007a1200 	.word	0x007a1200

08003d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01a      	beq.n	8003e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e32:	d10a      	bne.n	8003e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e88:	f7fd fc78 	bl	800177c <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d10e      	bne.n	8003eba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f82d 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e023      	b.n	8003f02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d10e      	bne.n	8003ee6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f817 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e00d      	b.n	8003f02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b09c      	sub	sp, #112	; 0x70
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1a:	e0a5      	b.n	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	f000 80a1 	beq.w	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7fd fc29 	bl	800177c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d13e      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f50:	667b      	str	r3, [r7, #100]	; 0x64
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e6      	bne.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	663b      	str	r3, [r7, #96]	; 0x60
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e067      	b.n	800408a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d04f      	beq.n	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd6:	d147      	bne.n	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
 8004002:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	613b      	str	r3, [r7, #16]
   return(result);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	66bb      	str	r3, [r7, #104]	; 0x68
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004034:	623a      	str	r2, [r7, #32]
 8004036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	69f9      	ldr	r1, [r7, #28]
 800403a:	6a3a      	ldr	r2, [r7, #32]
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	61bb      	str	r3, [r7, #24]
   return(result);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e010      	b.n	800408a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	429a      	cmp	r2, r3
 8004084:	f43f af4a 	beq.w	8003f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3770      	adds	r7, #112	; 0x70
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f002 fd7e 	bl	8006bb4 <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08007074 	.word	0x08007074
 80040dc:	08007074 	.word	0x08007074
 80040e0:	08007074 	.word	0x08007074
 80040e4:	08007078 	.word	0x08007078

080040e8 <memset>:
 80040e8:	4402      	add	r2, r0
 80040ea:	4603      	mov	r3, r0
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	f803 1b01 	strb.w	r1, [r3], #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <__cvt>:
 80040f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	ec55 4b10 	vmov	r4, r5, d0
 8004100:	2d00      	cmp	r5, #0
 8004102:	460e      	mov	r6, r1
 8004104:	4619      	mov	r1, r3
 8004106:	462b      	mov	r3, r5
 8004108:	bfbb      	ittet	lt
 800410a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800410e:	461d      	movlt	r5, r3
 8004110:	2300      	movge	r3, #0
 8004112:	232d      	movlt	r3, #45	; 0x2d
 8004114:	700b      	strb	r3, [r1, #0]
 8004116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004118:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800411c:	4691      	mov	r9, r2
 800411e:	f023 0820 	bic.w	r8, r3, #32
 8004122:	bfbc      	itt	lt
 8004124:	4622      	movlt	r2, r4
 8004126:	4614      	movlt	r4, r2
 8004128:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800412c:	d005      	beq.n	800413a <__cvt+0x42>
 800412e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004132:	d100      	bne.n	8004136 <__cvt+0x3e>
 8004134:	3601      	adds	r6, #1
 8004136:	2102      	movs	r1, #2
 8004138:	e000      	b.n	800413c <__cvt+0x44>
 800413a:	2103      	movs	r1, #3
 800413c:	ab03      	add	r3, sp, #12
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	ab02      	add	r3, sp, #8
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	ec45 4b10 	vmov	d0, r4, r5
 8004148:	4653      	mov	r3, sl
 800414a:	4632      	mov	r2, r6
 800414c:	f000 fe18 	bl	8004d80 <_dtoa_r>
 8004150:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004154:	4607      	mov	r7, r0
 8004156:	d102      	bne.n	800415e <__cvt+0x66>
 8004158:	f019 0f01 	tst.w	r9, #1
 800415c:	d022      	beq.n	80041a4 <__cvt+0xac>
 800415e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004162:	eb07 0906 	add.w	r9, r7, r6
 8004166:	d110      	bne.n	800418a <__cvt+0x92>
 8004168:	783b      	ldrb	r3, [r7, #0]
 800416a:	2b30      	cmp	r3, #48	; 0x30
 800416c:	d10a      	bne.n	8004184 <__cvt+0x8c>
 800416e:	2200      	movs	r2, #0
 8004170:	2300      	movs	r3, #0
 8004172:	4620      	mov	r0, r4
 8004174:	4629      	mov	r1, r5
 8004176:	f7fc fcaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800417a:	b918      	cbnz	r0, 8004184 <__cvt+0x8c>
 800417c:	f1c6 0601 	rsb	r6, r6, #1
 8004180:	f8ca 6000 	str.w	r6, [sl]
 8004184:	f8da 3000 	ldr.w	r3, [sl]
 8004188:	4499      	add	r9, r3
 800418a:	2200      	movs	r2, #0
 800418c:	2300      	movs	r3, #0
 800418e:	4620      	mov	r0, r4
 8004190:	4629      	mov	r1, r5
 8004192:	f7fc fca1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004196:	b108      	cbz	r0, 800419c <__cvt+0xa4>
 8004198:	f8cd 900c 	str.w	r9, [sp, #12]
 800419c:	2230      	movs	r2, #48	; 0x30
 800419e:	9b03      	ldr	r3, [sp, #12]
 80041a0:	454b      	cmp	r3, r9
 80041a2:	d307      	bcc.n	80041b4 <__cvt+0xbc>
 80041a4:	9b03      	ldr	r3, [sp, #12]
 80041a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041a8:	1bdb      	subs	r3, r3, r7
 80041aa:	4638      	mov	r0, r7
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	b004      	add	sp, #16
 80041b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b4:	1c59      	adds	r1, r3, #1
 80041b6:	9103      	str	r1, [sp, #12]
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e7f0      	b.n	800419e <__cvt+0xa6>

080041bc <__exponent>:
 80041bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041be:	4603      	mov	r3, r0
 80041c0:	2900      	cmp	r1, #0
 80041c2:	bfb8      	it	lt
 80041c4:	4249      	neglt	r1, r1
 80041c6:	f803 2b02 	strb.w	r2, [r3], #2
 80041ca:	bfb4      	ite	lt
 80041cc:	222d      	movlt	r2, #45	; 0x2d
 80041ce:	222b      	movge	r2, #43	; 0x2b
 80041d0:	2909      	cmp	r1, #9
 80041d2:	7042      	strb	r2, [r0, #1]
 80041d4:	dd2a      	ble.n	800422c <__exponent+0x70>
 80041d6:	f10d 0407 	add.w	r4, sp, #7
 80041da:	46a4      	mov	ip, r4
 80041dc:	270a      	movs	r7, #10
 80041de:	46a6      	mov	lr, r4
 80041e0:	460a      	mov	r2, r1
 80041e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80041e6:	fb07 1516 	mls	r5, r7, r6, r1
 80041ea:	3530      	adds	r5, #48	; 0x30
 80041ec:	2a63      	cmp	r2, #99	; 0x63
 80041ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80041f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041f6:	4631      	mov	r1, r6
 80041f8:	dcf1      	bgt.n	80041de <__exponent+0x22>
 80041fa:	3130      	adds	r1, #48	; 0x30
 80041fc:	f1ae 0502 	sub.w	r5, lr, #2
 8004200:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004204:	1c44      	adds	r4, r0, #1
 8004206:	4629      	mov	r1, r5
 8004208:	4561      	cmp	r1, ip
 800420a:	d30a      	bcc.n	8004222 <__exponent+0x66>
 800420c:	f10d 0209 	add.w	r2, sp, #9
 8004210:	eba2 020e 	sub.w	r2, r2, lr
 8004214:	4565      	cmp	r5, ip
 8004216:	bf88      	it	hi
 8004218:	2200      	movhi	r2, #0
 800421a:	4413      	add	r3, r2
 800421c:	1a18      	subs	r0, r3, r0
 800421e:	b003      	add	sp, #12
 8004220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004226:	f804 2f01 	strb.w	r2, [r4, #1]!
 800422a:	e7ed      	b.n	8004208 <__exponent+0x4c>
 800422c:	2330      	movs	r3, #48	; 0x30
 800422e:	3130      	adds	r1, #48	; 0x30
 8004230:	7083      	strb	r3, [r0, #2]
 8004232:	70c1      	strb	r1, [r0, #3]
 8004234:	1d03      	adds	r3, r0, #4
 8004236:	e7f1      	b.n	800421c <__exponent+0x60>

08004238 <_printf_float>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	ed2d 8b02 	vpush	{d8}
 8004240:	b08d      	sub	sp, #52	; 0x34
 8004242:	460c      	mov	r4, r1
 8004244:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004248:	4616      	mov	r6, r2
 800424a:	461f      	mov	r7, r3
 800424c:	4605      	mov	r5, r0
 800424e:	f001 fd3b 	bl	8005cc8 <_localeconv_r>
 8004252:	f8d0 a000 	ldr.w	sl, [r0]
 8004256:	4650      	mov	r0, sl
 8004258:	f7fb ffc2 	bl	80001e0 <strlen>
 800425c:	2300      	movs	r3, #0
 800425e:	930a      	str	r3, [sp, #40]	; 0x28
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	9305      	str	r3, [sp, #20]
 8004264:	f8d8 3000 	ldr.w	r3, [r8]
 8004268:	f894 b018 	ldrb.w	fp, [r4, #24]
 800426c:	3307      	adds	r3, #7
 800426e:	f023 0307 	bic.w	r3, r3, #7
 8004272:	f103 0208 	add.w	r2, r3, #8
 8004276:	f8c8 2000 	str.w	r2, [r8]
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004282:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004286:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800428a:	9307      	str	r3, [sp, #28]
 800428c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004290:	ee08 0a10 	vmov	s16, r0
 8004294:	4b9f      	ldr	r3, [pc, #636]	; (8004514 <_printf_float+0x2dc>)
 8004296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800429a:	f04f 32ff 	mov.w	r2, #4294967295
 800429e:	f7fc fc4d 	bl	8000b3c <__aeabi_dcmpun>
 80042a2:	bb88      	cbnz	r0, 8004308 <_printf_float+0xd0>
 80042a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042a8:	4b9a      	ldr	r3, [pc, #616]	; (8004514 <_printf_float+0x2dc>)
 80042aa:	f04f 32ff 	mov.w	r2, #4294967295
 80042ae:	f7fc fc27 	bl	8000b00 <__aeabi_dcmple>
 80042b2:	bb48      	cbnz	r0, 8004308 <_printf_float+0xd0>
 80042b4:	2200      	movs	r2, #0
 80042b6:	2300      	movs	r3, #0
 80042b8:	4640      	mov	r0, r8
 80042ba:	4649      	mov	r1, r9
 80042bc:	f7fc fc16 	bl	8000aec <__aeabi_dcmplt>
 80042c0:	b110      	cbz	r0, 80042c8 <_printf_float+0x90>
 80042c2:	232d      	movs	r3, #45	; 0x2d
 80042c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c8:	4b93      	ldr	r3, [pc, #588]	; (8004518 <_printf_float+0x2e0>)
 80042ca:	4894      	ldr	r0, [pc, #592]	; (800451c <_printf_float+0x2e4>)
 80042cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80042d0:	bf94      	ite	ls
 80042d2:	4698      	movls	r8, r3
 80042d4:	4680      	movhi	r8, r0
 80042d6:	2303      	movs	r3, #3
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	9b05      	ldr	r3, [sp, #20]
 80042dc:	f023 0204 	bic.w	r2, r3, #4
 80042e0:	6022      	str	r2, [r4, #0]
 80042e2:	f04f 0900 	mov.w	r9, #0
 80042e6:	9700      	str	r7, [sp, #0]
 80042e8:	4633      	mov	r3, r6
 80042ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80042ec:	4621      	mov	r1, r4
 80042ee:	4628      	mov	r0, r5
 80042f0:	f000 f9d8 	bl	80046a4 <_printf_common>
 80042f4:	3001      	adds	r0, #1
 80042f6:	f040 8090 	bne.w	800441a <_printf_float+0x1e2>
 80042fa:	f04f 30ff 	mov.w	r0, #4294967295
 80042fe:	b00d      	add	sp, #52	; 0x34
 8004300:	ecbd 8b02 	vpop	{d8}
 8004304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004308:	4642      	mov	r2, r8
 800430a:	464b      	mov	r3, r9
 800430c:	4640      	mov	r0, r8
 800430e:	4649      	mov	r1, r9
 8004310:	f7fc fc14 	bl	8000b3c <__aeabi_dcmpun>
 8004314:	b140      	cbz	r0, 8004328 <_printf_float+0xf0>
 8004316:	464b      	mov	r3, r9
 8004318:	2b00      	cmp	r3, #0
 800431a:	bfbc      	itt	lt
 800431c:	232d      	movlt	r3, #45	; 0x2d
 800431e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004322:	487f      	ldr	r0, [pc, #508]	; (8004520 <_printf_float+0x2e8>)
 8004324:	4b7f      	ldr	r3, [pc, #508]	; (8004524 <_printf_float+0x2ec>)
 8004326:	e7d1      	b.n	80042cc <_printf_float+0x94>
 8004328:	6863      	ldr	r3, [r4, #4]
 800432a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800432e:	9206      	str	r2, [sp, #24]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	d13f      	bne.n	80043b4 <_printf_float+0x17c>
 8004334:	2306      	movs	r3, #6
 8004336:	6063      	str	r3, [r4, #4]
 8004338:	9b05      	ldr	r3, [sp, #20]
 800433a:	6861      	ldr	r1, [r4, #4]
 800433c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004340:	2300      	movs	r3, #0
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	ab0a      	add	r3, sp, #40	; 0x28
 8004346:	e9cd b301 	strd	fp, r3, [sp, #4]
 800434a:	ab09      	add	r3, sp, #36	; 0x24
 800434c:	ec49 8b10 	vmov	d0, r8, r9
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6022      	str	r2, [r4, #0]
 8004354:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004358:	4628      	mov	r0, r5
 800435a:	f7ff fecd 	bl	80040f8 <__cvt>
 800435e:	9b06      	ldr	r3, [sp, #24]
 8004360:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004362:	2b47      	cmp	r3, #71	; 0x47
 8004364:	4680      	mov	r8, r0
 8004366:	d108      	bne.n	800437a <_printf_float+0x142>
 8004368:	1cc8      	adds	r0, r1, #3
 800436a:	db02      	blt.n	8004372 <_printf_float+0x13a>
 800436c:	6863      	ldr	r3, [r4, #4]
 800436e:	4299      	cmp	r1, r3
 8004370:	dd41      	ble.n	80043f6 <_printf_float+0x1be>
 8004372:	f1ab 0b02 	sub.w	fp, fp, #2
 8004376:	fa5f fb8b 	uxtb.w	fp, fp
 800437a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800437e:	d820      	bhi.n	80043c2 <_printf_float+0x18a>
 8004380:	3901      	subs	r1, #1
 8004382:	465a      	mov	r2, fp
 8004384:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004388:	9109      	str	r1, [sp, #36]	; 0x24
 800438a:	f7ff ff17 	bl	80041bc <__exponent>
 800438e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004390:	1813      	adds	r3, r2, r0
 8004392:	2a01      	cmp	r2, #1
 8004394:	4681      	mov	r9, r0
 8004396:	6123      	str	r3, [r4, #16]
 8004398:	dc02      	bgt.n	80043a0 <_printf_float+0x168>
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	07d2      	lsls	r2, r2, #31
 800439e:	d501      	bpl.n	80043a4 <_printf_float+0x16c>
 80043a0:	3301      	adds	r3, #1
 80043a2:	6123      	str	r3, [r4, #16]
 80043a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d09c      	beq.n	80042e6 <_printf_float+0xae>
 80043ac:	232d      	movs	r3, #45	; 0x2d
 80043ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b2:	e798      	b.n	80042e6 <_printf_float+0xae>
 80043b4:	9a06      	ldr	r2, [sp, #24]
 80043b6:	2a47      	cmp	r2, #71	; 0x47
 80043b8:	d1be      	bne.n	8004338 <_printf_float+0x100>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1bc      	bne.n	8004338 <_printf_float+0x100>
 80043be:	2301      	movs	r3, #1
 80043c0:	e7b9      	b.n	8004336 <_printf_float+0xfe>
 80043c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80043c6:	d118      	bne.n	80043fa <_printf_float+0x1c2>
 80043c8:	2900      	cmp	r1, #0
 80043ca:	6863      	ldr	r3, [r4, #4]
 80043cc:	dd0b      	ble.n	80043e6 <_printf_float+0x1ae>
 80043ce:	6121      	str	r1, [r4, #16]
 80043d0:	b913      	cbnz	r3, 80043d8 <_printf_float+0x1a0>
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	07d0      	lsls	r0, r2, #31
 80043d6:	d502      	bpl.n	80043de <_printf_float+0x1a6>
 80043d8:	3301      	adds	r3, #1
 80043da:	440b      	add	r3, r1
 80043dc:	6123      	str	r3, [r4, #16]
 80043de:	65a1      	str	r1, [r4, #88]	; 0x58
 80043e0:	f04f 0900 	mov.w	r9, #0
 80043e4:	e7de      	b.n	80043a4 <_printf_float+0x16c>
 80043e6:	b913      	cbnz	r3, 80043ee <_printf_float+0x1b6>
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	07d2      	lsls	r2, r2, #31
 80043ec:	d501      	bpl.n	80043f2 <_printf_float+0x1ba>
 80043ee:	3302      	adds	r3, #2
 80043f0:	e7f4      	b.n	80043dc <_printf_float+0x1a4>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e7f2      	b.n	80043dc <_printf_float+0x1a4>
 80043f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80043fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043fc:	4299      	cmp	r1, r3
 80043fe:	db05      	blt.n	800440c <_printf_float+0x1d4>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	6121      	str	r1, [r4, #16]
 8004404:	07d8      	lsls	r0, r3, #31
 8004406:	d5ea      	bpl.n	80043de <_printf_float+0x1a6>
 8004408:	1c4b      	adds	r3, r1, #1
 800440a:	e7e7      	b.n	80043dc <_printf_float+0x1a4>
 800440c:	2900      	cmp	r1, #0
 800440e:	bfd4      	ite	le
 8004410:	f1c1 0202 	rsble	r2, r1, #2
 8004414:	2201      	movgt	r2, #1
 8004416:	4413      	add	r3, r2
 8004418:	e7e0      	b.n	80043dc <_printf_float+0x1a4>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	055a      	lsls	r2, r3, #21
 800441e:	d407      	bmi.n	8004430 <_printf_float+0x1f8>
 8004420:	6923      	ldr	r3, [r4, #16]
 8004422:	4642      	mov	r2, r8
 8004424:	4631      	mov	r1, r6
 8004426:	4628      	mov	r0, r5
 8004428:	47b8      	blx	r7
 800442a:	3001      	adds	r0, #1
 800442c:	d12c      	bne.n	8004488 <_printf_float+0x250>
 800442e:	e764      	b.n	80042fa <_printf_float+0xc2>
 8004430:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004434:	f240 80e0 	bls.w	80045f8 <_printf_float+0x3c0>
 8004438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800443c:	2200      	movs	r2, #0
 800443e:	2300      	movs	r3, #0
 8004440:	f7fc fb4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004444:	2800      	cmp	r0, #0
 8004446:	d034      	beq.n	80044b2 <_printf_float+0x27a>
 8004448:	4a37      	ldr	r2, [pc, #220]	; (8004528 <_printf_float+0x2f0>)
 800444a:	2301      	movs	r3, #1
 800444c:	4631      	mov	r1, r6
 800444e:	4628      	mov	r0, r5
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	f43f af51 	beq.w	80042fa <_printf_float+0xc2>
 8004458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800445c:	429a      	cmp	r2, r3
 800445e:	db02      	blt.n	8004466 <_printf_float+0x22e>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	07d8      	lsls	r0, r3, #31
 8004464:	d510      	bpl.n	8004488 <_printf_float+0x250>
 8004466:	ee18 3a10 	vmov	r3, s16
 800446a:	4652      	mov	r2, sl
 800446c:	4631      	mov	r1, r6
 800446e:	4628      	mov	r0, r5
 8004470:	47b8      	blx	r7
 8004472:	3001      	adds	r0, #1
 8004474:	f43f af41 	beq.w	80042fa <_printf_float+0xc2>
 8004478:	f04f 0800 	mov.w	r8, #0
 800447c:	f104 091a 	add.w	r9, r4, #26
 8004480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004482:	3b01      	subs	r3, #1
 8004484:	4543      	cmp	r3, r8
 8004486:	dc09      	bgt.n	800449c <_printf_float+0x264>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	079b      	lsls	r3, r3, #30
 800448c:	f100 8105 	bmi.w	800469a <_printf_float+0x462>
 8004490:	68e0      	ldr	r0, [r4, #12]
 8004492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004494:	4298      	cmp	r0, r3
 8004496:	bfb8      	it	lt
 8004498:	4618      	movlt	r0, r3
 800449a:	e730      	b.n	80042fe <_printf_float+0xc6>
 800449c:	2301      	movs	r3, #1
 800449e:	464a      	mov	r2, r9
 80044a0:	4631      	mov	r1, r6
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b8      	blx	r7
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f af27 	beq.w	80042fa <_printf_float+0xc2>
 80044ac:	f108 0801 	add.w	r8, r8, #1
 80044b0:	e7e6      	b.n	8004480 <_printf_float+0x248>
 80044b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	dc39      	bgt.n	800452c <_printf_float+0x2f4>
 80044b8:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <_printf_float+0x2f0>)
 80044ba:	2301      	movs	r3, #1
 80044bc:	4631      	mov	r1, r6
 80044be:	4628      	mov	r0, r5
 80044c0:	47b8      	blx	r7
 80044c2:	3001      	adds	r0, #1
 80044c4:	f43f af19 	beq.w	80042fa <_printf_float+0xc2>
 80044c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044cc:	4313      	orrs	r3, r2
 80044ce:	d102      	bne.n	80044d6 <_printf_float+0x29e>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	07d9      	lsls	r1, r3, #31
 80044d4:	d5d8      	bpl.n	8004488 <_printf_float+0x250>
 80044d6:	ee18 3a10 	vmov	r3, s16
 80044da:	4652      	mov	r2, sl
 80044dc:	4631      	mov	r1, r6
 80044de:	4628      	mov	r0, r5
 80044e0:	47b8      	blx	r7
 80044e2:	3001      	adds	r0, #1
 80044e4:	f43f af09 	beq.w	80042fa <_printf_float+0xc2>
 80044e8:	f04f 0900 	mov.w	r9, #0
 80044ec:	f104 0a1a 	add.w	sl, r4, #26
 80044f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f2:	425b      	negs	r3, r3
 80044f4:	454b      	cmp	r3, r9
 80044f6:	dc01      	bgt.n	80044fc <_printf_float+0x2c4>
 80044f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044fa:	e792      	b.n	8004422 <_printf_float+0x1ea>
 80044fc:	2301      	movs	r3, #1
 80044fe:	4652      	mov	r2, sl
 8004500:	4631      	mov	r1, r6
 8004502:	4628      	mov	r0, r5
 8004504:	47b8      	blx	r7
 8004506:	3001      	adds	r0, #1
 8004508:	f43f aef7 	beq.w	80042fa <_printf_float+0xc2>
 800450c:	f109 0901 	add.w	r9, r9, #1
 8004510:	e7ee      	b.n	80044f0 <_printf_float+0x2b8>
 8004512:	bf00      	nop
 8004514:	7fefffff 	.word	0x7fefffff
 8004518:	08006c94 	.word	0x08006c94
 800451c:	08006c98 	.word	0x08006c98
 8004520:	08006ca0 	.word	0x08006ca0
 8004524:	08006c9c 	.word	0x08006c9c
 8004528:	08006ca4 	.word	0x08006ca4
 800452c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800452e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004530:	429a      	cmp	r2, r3
 8004532:	bfa8      	it	ge
 8004534:	461a      	movge	r2, r3
 8004536:	2a00      	cmp	r2, #0
 8004538:	4691      	mov	r9, r2
 800453a:	dc37      	bgt.n	80045ac <_printf_float+0x374>
 800453c:	f04f 0b00 	mov.w	fp, #0
 8004540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004544:	f104 021a 	add.w	r2, r4, #26
 8004548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800454a:	9305      	str	r3, [sp, #20]
 800454c:	eba3 0309 	sub.w	r3, r3, r9
 8004550:	455b      	cmp	r3, fp
 8004552:	dc33      	bgt.n	80045bc <_printf_float+0x384>
 8004554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004558:	429a      	cmp	r2, r3
 800455a:	db3b      	blt.n	80045d4 <_printf_float+0x39c>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	07da      	lsls	r2, r3, #31
 8004560:	d438      	bmi.n	80045d4 <_printf_float+0x39c>
 8004562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004564:	9b05      	ldr	r3, [sp, #20]
 8004566:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	eba2 0901 	sub.w	r9, r2, r1
 800456e:	4599      	cmp	r9, r3
 8004570:	bfa8      	it	ge
 8004572:	4699      	movge	r9, r3
 8004574:	f1b9 0f00 	cmp.w	r9, #0
 8004578:	dc35      	bgt.n	80045e6 <_printf_float+0x3ae>
 800457a:	f04f 0800 	mov.w	r8, #0
 800457e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004582:	f104 0a1a 	add.w	sl, r4, #26
 8004586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	eba3 0309 	sub.w	r3, r3, r9
 8004590:	4543      	cmp	r3, r8
 8004592:	f77f af79 	ble.w	8004488 <_printf_float+0x250>
 8004596:	2301      	movs	r3, #1
 8004598:	4652      	mov	r2, sl
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	47b8      	blx	r7
 80045a0:	3001      	adds	r0, #1
 80045a2:	f43f aeaa 	beq.w	80042fa <_printf_float+0xc2>
 80045a6:	f108 0801 	add.w	r8, r8, #1
 80045aa:	e7ec      	b.n	8004586 <_printf_float+0x34e>
 80045ac:	4613      	mov	r3, r2
 80045ae:	4631      	mov	r1, r6
 80045b0:	4642      	mov	r2, r8
 80045b2:	4628      	mov	r0, r5
 80045b4:	47b8      	blx	r7
 80045b6:	3001      	adds	r0, #1
 80045b8:	d1c0      	bne.n	800453c <_printf_float+0x304>
 80045ba:	e69e      	b.n	80042fa <_printf_float+0xc2>
 80045bc:	2301      	movs	r3, #1
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	9205      	str	r2, [sp, #20]
 80045c4:	47b8      	blx	r7
 80045c6:	3001      	adds	r0, #1
 80045c8:	f43f ae97 	beq.w	80042fa <_printf_float+0xc2>
 80045cc:	9a05      	ldr	r2, [sp, #20]
 80045ce:	f10b 0b01 	add.w	fp, fp, #1
 80045d2:	e7b9      	b.n	8004548 <_printf_float+0x310>
 80045d4:	ee18 3a10 	vmov	r3, s16
 80045d8:	4652      	mov	r2, sl
 80045da:	4631      	mov	r1, r6
 80045dc:	4628      	mov	r0, r5
 80045de:	47b8      	blx	r7
 80045e0:	3001      	adds	r0, #1
 80045e2:	d1be      	bne.n	8004562 <_printf_float+0x32a>
 80045e4:	e689      	b.n	80042fa <_printf_float+0xc2>
 80045e6:	9a05      	ldr	r2, [sp, #20]
 80045e8:	464b      	mov	r3, r9
 80045ea:	4442      	add	r2, r8
 80045ec:	4631      	mov	r1, r6
 80045ee:	4628      	mov	r0, r5
 80045f0:	47b8      	blx	r7
 80045f2:	3001      	adds	r0, #1
 80045f4:	d1c1      	bne.n	800457a <_printf_float+0x342>
 80045f6:	e680      	b.n	80042fa <_printf_float+0xc2>
 80045f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045fa:	2a01      	cmp	r2, #1
 80045fc:	dc01      	bgt.n	8004602 <_printf_float+0x3ca>
 80045fe:	07db      	lsls	r3, r3, #31
 8004600:	d538      	bpl.n	8004674 <_printf_float+0x43c>
 8004602:	2301      	movs	r3, #1
 8004604:	4642      	mov	r2, r8
 8004606:	4631      	mov	r1, r6
 8004608:	4628      	mov	r0, r5
 800460a:	47b8      	blx	r7
 800460c:	3001      	adds	r0, #1
 800460e:	f43f ae74 	beq.w	80042fa <_printf_float+0xc2>
 8004612:	ee18 3a10 	vmov	r3, s16
 8004616:	4652      	mov	r2, sl
 8004618:	4631      	mov	r1, r6
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	f43f ae6b 	beq.w	80042fa <_printf_float+0xc2>
 8004624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004628:	2200      	movs	r2, #0
 800462a:	2300      	movs	r3, #0
 800462c:	f7fc fa54 	bl	8000ad8 <__aeabi_dcmpeq>
 8004630:	b9d8      	cbnz	r0, 800466a <_printf_float+0x432>
 8004632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004634:	f108 0201 	add.w	r2, r8, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	4631      	mov	r1, r6
 800463c:	4628      	mov	r0, r5
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	d10e      	bne.n	8004662 <_printf_float+0x42a>
 8004644:	e659      	b.n	80042fa <_printf_float+0xc2>
 8004646:	2301      	movs	r3, #1
 8004648:	4652      	mov	r2, sl
 800464a:	4631      	mov	r1, r6
 800464c:	4628      	mov	r0, r5
 800464e:	47b8      	blx	r7
 8004650:	3001      	adds	r0, #1
 8004652:	f43f ae52 	beq.w	80042fa <_printf_float+0xc2>
 8004656:	f108 0801 	add.w	r8, r8, #1
 800465a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465c:	3b01      	subs	r3, #1
 800465e:	4543      	cmp	r3, r8
 8004660:	dcf1      	bgt.n	8004646 <_printf_float+0x40e>
 8004662:	464b      	mov	r3, r9
 8004664:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004668:	e6dc      	b.n	8004424 <_printf_float+0x1ec>
 800466a:	f04f 0800 	mov.w	r8, #0
 800466e:	f104 0a1a 	add.w	sl, r4, #26
 8004672:	e7f2      	b.n	800465a <_printf_float+0x422>
 8004674:	2301      	movs	r3, #1
 8004676:	4642      	mov	r2, r8
 8004678:	e7df      	b.n	800463a <_printf_float+0x402>
 800467a:	2301      	movs	r3, #1
 800467c:	464a      	mov	r2, r9
 800467e:	4631      	mov	r1, r6
 8004680:	4628      	mov	r0, r5
 8004682:	47b8      	blx	r7
 8004684:	3001      	adds	r0, #1
 8004686:	f43f ae38 	beq.w	80042fa <_printf_float+0xc2>
 800468a:	f108 0801 	add.w	r8, r8, #1
 800468e:	68e3      	ldr	r3, [r4, #12]
 8004690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004692:	1a5b      	subs	r3, r3, r1
 8004694:	4543      	cmp	r3, r8
 8004696:	dcf0      	bgt.n	800467a <_printf_float+0x442>
 8004698:	e6fa      	b.n	8004490 <_printf_float+0x258>
 800469a:	f04f 0800 	mov.w	r8, #0
 800469e:	f104 0919 	add.w	r9, r4, #25
 80046a2:	e7f4      	b.n	800468e <_printf_float+0x456>

080046a4 <_printf_common>:
 80046a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	4616      	mov	r6, r2
 80046aa:	4699      	mov	r9, r3
 80046ac:	688a      	ldr	r2, [r1, #8]
 80046ae:	690b      	ldr	r3, [r1, #16]
 80046b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046b4:	4293      	cmp	r3, r2
 80046b6:	bfb8      	it	lt
 80046b8:	4613      	movlt	r3, r2
 80046ba:	6033      	str	r3, [r6, #0]
 80046bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046c0:	4607      	mov	r7, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	b10a      	cbz	r2, 80046ca <_printf_common+0x26>
 80046c6:	3301      	adds	r3, #1
 80046c8:	6033      	str	r3, [r6, #0]
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	0699      	lsls	r1, r3, #26
 80046ce:	bf42      	ittt	mi
 80046d0:	6833      	ldrmi	r3, [r6, #0]
 80046d2:	3302      	addmi	r3, #2
 80046d4:	6033      	strmi	r3, [r6, #0]
 80046d6:	6825      	ldr	r5, [r4, #0]
 80046d8:	f015 0506 	ands.w	r5, r5, #6
 80046dc:	d106      	bne.n	80046ec <_printf_common+0x48>
 80046de:	f104 0a19 	add.w	sl, r4, #25
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	6832      	ldr	r2, [r6, #0]
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	42ab      	cmp	r3, r5
 80046ea:	dc26      	bgt.n	800473a <_printf_common+0x96>
 80046ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046f0:	1e13      	subs	r3, r2, #0
 80046f2:	6822      	ldr	r2, [r4, #0]
 80046f4:	bf18      	it	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	0692      	lsls	r2, r2, #26
 80046fa:	d42b      	bmi.n	8004754 <_printf_common+0xb0>
 80046fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004700:	4649      	mov	r1, r9
 8004702:	4638      	mov	r0, r7
 8004704:	47c0      	blx	r8
 8004706:	3001      	adds	r0, #1
 8004708:	d01e      	beq.n	8004748 <_printf_common+0xa4>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	68e5      	ldr	r5, [r4, #12]
 800470e:	6832      	ldr	r2, [r6, #0]
 8004710:	f003 0306 	and.w	r3, r3, #6
 8004714:	2b04      	cmp	r3, #4
 8004716:	bf08      	it	eq
 8004718:	1aad      	subeq	r5, r5, r2
 800471a:	68a3      	ldr	r3, [r4, #8]
 800471c:	6922      	ldr	r2, [r4, #16]
 800471e:	bf0c      	ite	eq
 8004720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004724:	2500      	movne	r5, #0
 8004726:	4293      	cmp	r3, r2
 8004728:	bfc4      	itt	gt
 800472a:	1a9b      	subgt	r3, r3, r2
 800472c:	18ed      	addgt	r5, r5, r3
 800472e:	2600      	movs	r6, #0
 8004730:	341a      	adds	r4, #26
 8004732:	42b5      	cmp	r5, r6
 8004734:	d11a      	bne.n	800476c <_printf_common+0xc8>
 8004736:	2000      	movs	r0, #0
 8004738:	e008      	b.n	800474c <_printf_common+0xa8>
 800473a:	2301      	movs	r3, #1
 800473c:	4652      	mov	r2, sl
 800473e:	4649      	mov	r1, r9
 8004740:	4638      	mov	r0, r7
 8004742:	47c0      	blx	r8
 8004744:	3001      	adds	r0, #1
 8004746:	d103      	bne.n	8004750 <_printf_common+0xac>
 8004748:	f04f 30ff 	mov.w	r0, #4294967295
 800474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004750:	3501      	adds	r5, #1
 8004752:	e7c6      	b.n	80046e2 <_printf_common+0x3e>
 8004754:	18e1      	adds	r1, r4, r3
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	2030      	movs	r0, #48	; 0x30
 800475a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800475e:	4422      	add	r2, r4
 8004760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004768:	3302      	adds	r3, #2
 800476a:	e7c7      	b.n	80046fc <_printf_common+0x58>
 800476c:	2301      	movs	r3, #1
 800476e:	4622      	mov	r2, r4
 8004770:	4649      	mov	r1, r9
 8004772:	4638      	mov	r0, r7
 8004774:	47c0      	blx	r8
 8004776:	3001      	adds	r0, #1
 8004778:	d0e6      	beq.n	8004748 <_printf_common+0xa4>
 800477a:	3601      	adds	r6, #1
 800477c:	e7d9      	b.n	8004732 <_printf_common+0x8e>
	...

08004780 <_printf_i>:
 8004780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004784:	460c      	mov	r4, r1
 8004786:	4691      	mov	r9, r2
 8004788:	7e27      	ldrb	r7, [r4, #24]
 800478a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800478c:	2f78      	cmp	r7, #120	; 0x78
 800478e:	4680      	mov	r8, r0
 8004790:	469a      	mov	sl, r3
 8004792:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004796:	d807      	bhi.n	80047a8 <_printf_i+0x28>
 8004798:	2f62      	cmp	r7, #98	; 0x62
 800479a:	d80a      	bhi.n	80047b2 <_printf_i+0x32>
 800479c:	2f00      	cmp	r7, #0
 800479e:	f000 80d8 	beq.w	8004952 <_printf_i+0x1d2>
 80047a2:	2f58      	cmp	r7, #88	; 0x58
 80047a4:	f000 80a3 	beq.w	80048ee <_printf_i+0x16e>
 80047a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047b0:	e03a      	b.n	8004828 <_printf_i+0xa8>
 80047b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047b6:	2b15      	cmp	r3, #21
 80047b8:	d8f6      	bhi.n	80047a8 <_printf_i+0x28>
 80047ba:	a001      	add	r0, pc, #4	; (adr r0, 80047c0 <_printf_i+0x40>)
 80047bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80047c0:	08004819 	.word	0x08004819
 80047c4:	0800482d 	.word	0x0800482d
 80047c8:	080047a9 	.word	0x080047a9
 80047cc:	080047a9 	.word	0x080047a9
 80047d0:	080047a9 	.word	0x080047a9
 80047d4:	080047a9 	.word	0x080047a9
 80047d8:	0800482d 	.word	0x0800482d
 80047dc:	080047a9 	.word	0x080047a9
 80047e0:	080047a9 	.word	0x080047a9
 80047e4:	080047a9 	.word	0x080047a9
 80047e8:	080047a9 	.word	0x080047a9
 80047ec:	08004939 	.word	0x08004939
 80047f0:	0800485d 	.word	0x0800485d
 80047f4:	0800491b 	.word	0x0800491b
 80047f8:	080047a9 	.word	0x080047a9
 80047fc:	080047a9 	.word	0x080047a9
 8004800:	0800495b 	.word	0x0800495b
 8004804:	080047a9 	.word	0x080047a9
 8004808:	0800485d 	.word	0x0800485d
 800480c:	080047a9 	.word	0x080047a9
 8004810:	080047a9 	.word	0x080047a9
 8004814:	08004923 	.word	0x08004923
 8004818:	680b      	ldr	r3, [r1, #0]
 800481a:	1d1a      	adds	r2, r3, #4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	600a      	str	r2, [r1, #0]
 8004820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004828:	2301      	movs	r3, #1
 800482a:	e0a3      	b.n	8004974 <_printf_i+0x1f4>
 800482c:	6825      	ldr	r5, [r4, #0]
 800482e:	6808      	ldr	r0, [r1, #0]
 8004830:	062e      	lsls	r6, r5, #24
 8004832:	f100 0304 	add.w	r3, r0, #4
 8004836:	d50a      	bpl.n	800484e <_printf_i+0xce>
 8004838:	6805      	ldr	r5, [r0, #0]
 800483a:	600b      	str	r3, [r1, #0]
 800483c:	2d00      	cmp	r5, #0
 800483e:	da03      	bge.n	8004848 <_printf_i+0xc8>
 8004840:	232d      	movs	r3, #45	; 0x2d
 8004842:	426d      	negs	r5, r5
 8004844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004848:	485e      	ldr	r0, [pc, #376]	; (80049c4 <_printf_i+0x244>)
 800484a:	230a      	movs	r3, #10
 800484c:	e019      	b.n	8004882 <_printf_i+0x102>
 800484e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004852:	6805      	ldr	r5, [r0, #0]
 8004854:	600b      	str	r3, [r1, #0]
 8004856:	bf18      	it	ne
 8004858:	b22d      	sxthne	r5, r5
 800485a:	e7ef      	b.n	800483c <_printf_i+0xbc>
 800485c:	680b      	ldr	r3, [r1, #0]
 800485e:	6825      	ldr	r5, [r4, #0]
 8004860:	1d18      	adds	r0, r3, #4
 8004862:	6008      	str	r0, [r1, #0]
 8004864:	0628      	lsls	r0, r5, #24
 8004866:	d501      	bpl.n	800486c <_printf_i+0xec>
 8004868:	681d      	ldr	r5, [r3, #0]
 800486a:	e002      	b.n	8004872 <_printf_i+0xf2>
 800486c:	0669      	lsls	r1, r5, #25
 800486e:	d5fb      	bpl.n	8004868 <_printf_i+0xe8>
 8004870:	881d      	ldrh	r5, [r3, #0]
 8004872:	4854      	ldr	r0, [pc, #336]	; (80049c4 <_printf_i+0x244>)
 8004874:	2f6f      	cmp	r7, #111	; 0x6f
 8004876:	bf0c      	ite	eq
 8004878:	2308      	moveq	r3, #8
 800487a:	230a      	movne	r3, #10
 800487c:	2100      	movs	r1, #0
 800487e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004882:	6866      	ldr	r6, [r4, #4]
 8004884:	60a6      	str	r6, [r4, #8]
 8004886:	2e00      	cmp	r6, #0
 8004888:	bfa2      	ittt	ge
 800488a:	6821      	ldrge	r1, [r4, #0]
 800488c:	f021 0104 	bicge.w	r1, r1, #4
 8004890:	6021      	strge	r1, [r4, #0]
 8004892:	b90d      	cbnz	r5, 8004898 <_printf_i+0x118>
 8004894:	2e00      	cmp	r6, #0
 8004896:	d04d      	beq.n	8004934 <_printf_i+0x1b4>
 8004898:	4616      	mov	r6, r2
 800489a:	fbb5 f1f3 	udiv	r1, r5, r3
 800489e:	fb03 5711 	mls	r7, r3, r1, r5
 80048a2:	5dc7      	ldrb	r7, [r0, r7]
 80048a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048a8:	462f      	mov	r7, r5
 80048aa:	42bb      	cmp	r3, r7
 80048ac:	460d      	mov	r5, r1
 80048ae:	d9f4      	bls.n	800489a <_printf_i+0x11a>
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d10b      	bne.n	80048cc <_printf_i+0x14c>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	07df      	lsls	r7, r3, #31
 80048b8:	d508      	bpl.n	80048cc <_printf_i+0x14c>
 80048ba:	6923      	ldr	r3, [r4, #16]
 80048bc:	6861      	ldr	r1, [r4, #4]
 80048be:	4299      	cmp	r1, r3
 80048c0:	bfde      	ittt	le
 80048c2:	2330      	movle	r3, #48	; 0x30
 80048c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048cc:	1b92      	subs	r2, r2, r6
 80048ce:	6122      	str	r2, [r4, #16]
 80048d0:	f8cd a000 	str.w	sl, [sp]
 80048d4:	464b      	mov	r3, r9
 80048d6:	aa03      	add	r2, sp, #12
 80048d8:	4621      	mov	r1, r4
 80048da:	4640      	mov	r0, r8
 80048dc:	f7ff fee2 	bl	80046a4 <_printf_common>
 80048e0:	3001      	adds	r0, #1
 80048e2:	d14c      	bne.n	800497e <_printf_i+0x1fe>
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	b004      	add	sp, #16
 80048ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ee:	4835      	ldr	r0, [pc, #212]	; (80049c4 <_printf_i+0x244>)
 80048f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	680e      	ldr	r6, [r1, #0]
 80048f8:	061f      	lsls	r7, r3, #24
 80048fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80048fe:	600e      	str	r6, [r1, #0]
 8004900:	d514      	bpl.n	800492c <_printf_i+0x1ac>
 8004902:	07d9      	lsls	r1, r3, #31
 8004904:	bf44      	itt	mi
 8004906:	f043 0320 	orrmi.w	r3, r3, #32
 800490a:	6023      	strmi	r3, [r4, #0]
 800490c:	b91d      	cbnz	r5, 8004916 <_printf_i+0x196>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	f023 0320 	bic.w	r3, r3, #32
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	2310      	movs	r3, #16
 8004918:	e7b0      	b.n	800487c <_printf_i+0xfc>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	f043 0320 	orr.w	r3, r3, #32
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	2378      	movs	r3, #120	; 0x78
 8004924:	4828      	ldr	r0, [pc, #160]	; (80049c8 <_printf_i+0x248>)
 8004926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800492a:	e7e3      	b.n	80048f4 <_printf_i+0x174>
 800492c:	065e      	lsls	r6, r3, #25
 800492e:	bf48      	it	mi
 8004930:	b2ad      	uxthmi	r5, r5
 8004932:	e7e6      	b.n	8004902 <_printf_i+0x182>
 8004934:	4616      	mov	r6, r2
 8004936:	e7bb      	b.n	80048b0 <_printf_i+0x130>
 8004938:	680b      	ldr	r3, [r1, #0]
 800493a:	6826      	ldr	r6, [r4, #0]
 800493c:	6960      	ldr	r0, [r4, #20]
 800493e:	1d1d      	adds	r5, r3, #4
 8004940:	600d      	str	r5, [r1, #0]
 8004942:	0635      	lsls	r5, r6, #24
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	d501      	bpl.n	800494c <_printf_i+0x1cc>
 8004948:	6018      	str	r0, [r3, #0]
 800494a:	e002      	b.n	8004952 <_printf_i+0x1d2>
 800494c:	0671      	lsls	r1, r6, #25
 800494e:	d5fb      	bpl.n	8004948 <_printf_i+0x1c8>
 8004950:	8018      	strh	r0, [r3, #0]
 8004952:	2300      	movs	r3, #0
 8004954:	6123      	str	r3, [r4, #16]
 8004956:	4616      	mov	r6, r2
 8004958:	e7ba      	b.n	80048d0 <_printf_i+0x150>
 800495a:	680b      	ldr	r3, [r1, #0]
 800495c:	1d1a      	adds	r2, r3, #4
 800495e:	600a      	str	r2, [r1, #0]
 8004960:	681e      	ldr	r6, [r3, #0]
 8004962:	6862      	ldr	r2, [r4, #4]
 8004964:	2100      	movs	r1, #0
 8004966:	4630      	mov	r0, r6
 8004968:	f7fb fc42 	bl	80001f0 <memchr>
 800496c:	b108      	cbz	r0, 8004972 <_printf_i+0x1f2>
 800496e:	1b80      	subs	r0, r0, r6
 8004970:	6060      	str	r0, [r4, #4]
 8004972:	6863      	ldr	r3, [r4, #4]
 8004974:	6123      	str	r3, [r4, #16]
 8004976:	2300      	movs	r3, #0
 8004978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800497c:	e7a8      	b.n	80048d0 <_printf_i+0x150>
 800497e:	6923      	ldr	r3, [r4, #16]
 8004980:	4632      	mov	r2, r6
 8004982:	4649      	mov	r1, r9
 8004984:	4640      	mov	r0, r8
 8004986:	47d0      	blx	sl
 8004988:	3001      	adds	r0, #1
 800498a:	d0ab      	beq.n	80048e4 <_printf_i+0x164>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	079b      	lsls	r3, r3, #30
 8004990:	d413      	bmi.n	80049ba <_printf_i+0x23a>
 8004992:	68e0      	ldr	r0, [r4, #12]
 8004994:	9b03      	ldr	r3, [sp, #12]
 8004996:	4298      	cmp	r0, r3
 8004998:	bfb8      	it	lt
 800499a:	4618      	movlt	r0, r3
 800499c:	e7a4      	b.n	80048e8 <_printf_i+0x168>
 800499e:	2301      	movs	r3, #1
 80049a0:	4632      	mov	r2, r6
 80049a2:	4649      	mov	r1, r9
 80049a4:	4640      	mov	r0, r8
 80049a6:	47d0      	blx	sl
 80049a8:	3001      	adds	r0, #1
 80049aa:	d09b      	beq.n	80048e4 <_printf_i+0x164>
 80049ac:	3501      	adds	r5, #1
 80049ae:	68e3      	ldr	r3, [r4, #12]
 80049b0:	9903      	ldr	r1, [sp, #12]
 80049b2:	1a5b      	subs	r3, r3, r1
 80049b4:	42ab      	cmp	r3, r5
 80049b6:	dcf2      	bgt.n	800499e <_printf_i+0x21e>
 80049b8:	e7eb      	b.n	8004992 <_printf_i+0x212>
 80049ba:	2500      	movs	r5, #0
 80049bc:	f104 0619 	add.w	r6, r4, #25
 80049c0:	e7f5      	b.n	80049ae <_printf_i+0x22e>
 80049c2:	bf00      	nop
 80049c4:	08006ca6 	.word	0x08006ca6
 80049c8:	08006cb7 	.word	0x08006cb7

080049cc <iprintf>:
 80049cc:	b40f      	push	{r0, r1, r2, r3}
 80049ce:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <iprintf+0x2c>)
 80049d0:	b513      	push	{r0, r1, r4, lr}
 80049d2:	681c      	ldr	r4, [r3, #0]
 80049d4:	b124      	cbz	r4, 80049e0 <iprintf+0x14>
 80049d6:	69a3      	ldr	r3, [r4, #24]
 80049d8:	b913      	cbnz	r3, 80049e0 <iprintf+0x14>
 80049da:	4620      	mov	r0, r4
 80049dc:	f001 f8d6 	bl	8005b8c <__sinit>
 80049e0:	ab05      	add	r3, sp, #20
 80049e2:	9a04      	ldr	r2, [sp, #16]
 80049e4:	68a1      	ldr	r1, [r4, #8]
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	4620      	mov	r0, r4
 80049ea:	f001 fe51 	bl	8006690 <_vfiprintf_r>
 80049ee:	b002      	add	sp, #8
 80049f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049f4:	b004      	add	sp, #16
 80049f6:	4770      	bx	lr
 80049f8:	2000000c 	.word	0x2000000c

080049fc <_puts_r>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	460e      	mov	r6, r1
 8004a00:	4605      	mov	r5, r0
 8004a02:	b118      	cbz	r0, 8004a0c <_puts_r+0x10>
 8004a04:	6983      	ldr	r3, [r0, #24]
 8004a06:	b90b      	cbnz	r3, 8004a0c <_puts_r+0x10>
 8004a08:	f001 f8c0 	bl	8005b8c <__sinit>
 8004a0c:	69ab      	ldr	r3, [r5, #24]
 8004a0e:	68ac      	ldr	r4, [r5, #8]
 8004a10:	b913      	cbnz	r3, 8004a18 <_puts_r+0x1c>
 8004a12:	4628      	mov	r0, r5
 8004a14:	f001 f8ba 	bl	8005b8c <__sinit>
 8004a18:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <_puts_r+0xd0>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d120      	bne.n	8004a60 <_puts_r+0x64>
 8004a1e:	686c      	ldr	r4, [r5, #4]
 8004a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a22:	07db      	lsls	r3, r3, #31
 8004a24:	d405      	bmi.n	8004a32 <_puts_r+0x36>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	0598      	lsls	r0, r3, #22
 8004a2a:	d402      	bmi.n	8004a32 <_puts_r+0x36>
 8004a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a2e:	f001 f950 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	0719      	lsls	r1, r3, #28
 8004a36:	d51d      	bpl.n	8004a74 <_puts_r+0x78>
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	b1db      	cbz	r3, 8004a74 <_puts_r+0x78>
 8004a3c:	3e01      	subs	r6, #1
 8004a3e:	68a3      	ldr	r3, [r4, #8]
 8004a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a44:	3b01      	subs	r3, #1
 8004a46:	60a3      	str	r3, [r4, #8]
 8004a48:	bb39      	cbnz	r1, 8004a9a <_puts_r+0x9e>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da38      	bge.n	8004ac0 <_puts_r+0xc4>
 8004a4e:	4622      	mov	r2, r4
 8004a50:	210a      	movs	r1, #10
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f848 	bl	8004ae8 <__swbuf_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d011      	beq.n	8004a80 <_puts_r+0x84>
 8004a5c:	250a      	movs	r5, #10
 8004a5e:	e011      	b.n	8004a84 <_puts_r+0x88>
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <_puts_r+0xd4>)
 8004a62:	429c      	cmp	r4, r3
 8004a64:	d101      	bne.n	8004a6a <_puts_r+0x6e>
 8004a66:	68ac      	ldr	r4, [r5, #8]
 8004a68:	e7da      	b.n	8004a20 <_puts_r+0x24>
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <_puts_r+0xd8>)
 8004a6c:	429c      	cmp	r4, r3
 8004a6e:	bf08      	it	eq
 8004a70:	68ec      	ldreq	r4, [r5, #12]
 8004a72:	e7d5      	b.n	8004a20 <_puts_r+0x24>
 8004a74:	4621      	mov	r1, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 f888 	bl	8004b8c <__swsetup_r>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d0dd      	beq.n	8004a3c <_puts_r+0x40>
 8004a80:	f04f 35ff 	mov.w	r5, #4294967295
 8004a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a86:	07da      	lsls	r2, r3, #31
 8004a88:	d405      	bmi.n	8004a96 <_puts_r+0x9a>
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	059b      	lsls	r3, r3, #22
 8004a8e:	d402      	bmi.n	8004a96 <_puts_r+0x9a>
 8004a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a92:	f001 f91f 	bl	8005cd4 <__retarget_lock_release_recursive>
 8004a96:	4628      	mov	r0, r5
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da04      	bge.n	8004aa8 <_puts_r+0xac>
 8004a9e:	69a2      	ldr	r2, [r4, #24]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	dc06      	bgt.n	8004ab2 <_puts_r+0xb6>
 8004aa4:	290a      	cmp	r1, #10
 8004aa6:	d004      	beq.n	8004ab2 <_puts_r+0xb6>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	6022      	str	r2, [r4, #0]
 8004aae:	7019      	strb	r1, [r3, #0]
 8004ab0:	e7c5      	b.n	8004a3e <_puts_r+0x42>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f817 	bl	8004ae8 <__swbuf_r>
 8004aba:	3001      	adds	r0, #1
 8004abc:	d1bf      	bne.n	8004a3e <_puts_r+0x42>
 8004abe:	e7df      	b.n	8004a80 <_puts_r+0x84>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	250a      	movs	r5, #10
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	6022      	str	r2, [r4, #0]
 8004ac8:	701d      	strb	r5, [r3, #0]
 8004aca:	e7db      	b.n	8004a84 <_puts_r+0x88>
 8004acc:	08006d7c 	.word	0x08006d7c
 8004ad0:	08006d9c 	.word	0x08006d9c
 8004ad4:	08006d5c 	.word	0x08006d5c

08004ad8 <puts>:
 8004ad8:	4b02      	ldr	r3, [pc, #8]	; (8004ae4 <puts+0xc>)
 8004ada:	4601      	mov	r1, r0
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	f7ff bf8d 	b.w	80049fc <_puts_r>
 8004ae2:	bf00      	nop
 8004ae4:	2000000c 	.word	0x2000000c

08004ae8 <__swbuf_r>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	460e      	mov	r6, r1
 8004aec:	4614      	mov	r4, r2
 8004aee:	4605      	mov	r5, r0
 8004af0:	b118      	cbz	r0, 8004afa <__swbuf_r+0x12>
 8004af2:	6983      	ldr	r3, [r0, #24]
 8004af4:	b90b      	cbnz	r3, 8004afa <__swbuf_r+0x12>
 8004af6:	f001 f849 	bl	8005b8c <__sinit>
 8004afa:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <__swbuf_r+0x98>)
 8004afc:	429c      	cmp	r4, r3
 8004afe:	d12b      	bne.n	8004b58 <__swbuf_r+0x70>
 8004b00:	686c      	ldr	r4, [r5, #4]
 8004b02:	69a3      	ldr	r3, [r4, #24]
 8004b04:	60a3      	str	r3, [r4, #8]
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	071a      	lsls	r2, r3, #28
 8004b0a:	d52f      	bpl.n	8004b6c <__swbuf_r+0x84>
 8004b0c:	6923      	ldr	r3, [r4, #16]
 8004b0e:	b36b      	cbz	r3, 8004b6c <__swbuf_r+0x84>
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	6820      	ldr	r0, [r4, #0]
 8004b14:	1ac0      	subs	r0, r0, r3
 8004b16:	6963      	ldr	r3, [r4, #20]
 8004b18:	b2f6      	uxtb	r6, r6
 8004b1a:	4283      	cmp	r3, r0
 8004b1c:	4637      	mov	r7, r6
 8004b1e:	dc04      	bgt.n	8004b2a <__swbuf_r+0x42>
 8004b20:	4621      	mov	r1, r4
 8004b22:	4628      	mov	r0, r5
 8004b24:	f000 ff9e 	bl	8005a64 <_fflush_r>
 8004b28:	bb30      	cbnz	r0, 8004b78 <__swbuf_r+0x90>
 8004b2a:	68a3      	ldr	r3, [r4, #8]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	60a3      	str	r3, [r4, #8]
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	6022      	str	r2, [r4, #0]
 8004b36:	701e      	strb	r6, [r3, #0]
 8004b38:	6963      	ldr	r3, [r4, #20]
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	4283      	cmp	r3, r0
 8004b3e:	d004      	beq.n	8004b4a <__swbuf_r+0x62>
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	07db      	lsls	r3, r3, #31
 8004b44:	d506      	bpl.n	8004b54 <__swbuf_r+0x6c>
 8004b46:	2e0a      	cmp	r6, #10
 8004b48:	d104      	bne.n	8004b54 <__swbuf_r+0x6c>
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 ff89 	bl	8005a64 <_fflush_r>
 8004b52:	b988      	cbnz	r0, 8004b78 <__swbuf_r+0x90>
 8004b54:	4638      	mov	r0, r7
 8004b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <__swbuf_r+0x9c>)
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	d101      	bne.n	8004b62 <__swbuf_r+0x7a>
 8004b5e:	68ac      	ldr	r4, [r5, #8]
 8004b60:	e7cf      	b.n	8004b02 <__swbuf_r+0x1a>
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <__swbuf_r+0xa0>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	bf08      	it	eq
 8004b68:	68ec      	ldreq	r4, [r5, #12]
 8004b6a:	e7ca      	b.n	8004b02 <__swbuf_r+0x1a>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 f80c 	bl	8004b8c <__swsetup_r>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d0cb      	beq.n	8004b10 <__swbuf_r+0x28>
 8004b78:	f04f 37ff 	mov.w	r7, #4294967295
 8004b7c:	e7ea      	b.n	8004b54 <__swbuf_r+0x6c>
 8004b7e:	bf00      	nop
 8004b80:	08006d7c 	.word	0x08006d7c
 8004b84:	08006d9c 	.word	0x08006d9c
 8004b88:	08006d5c 	.word	0x08006d5c

08004b8c <__swsetup_r>:
 8004b8c:	4b32      	ldr	r3, [pc, #200]	; (8004c58 <__swsetup_r+0xcc>)
 8004b8e:	b570      	push	{r4, r5, r6, lr}
 8004b90:	681d      	ldr	r5, [r3, #0]
 8004b92:	4606      	mov	r6, r0
 8004b94:	460c      	mov	r4, r1
 8004b96:	b125      	cbz	r5, 8004ba2 <__swsetup_r+0x16>
 8004b98:	69ab      	ldr	r3, [r5, #24]
 8004b9a:	b913      	cbnz	r3, 8004ba2 <__swsetup_r+0x16>
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	f000 fff5 	bl	8005b8c <__sinit>
 8004ba2:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <__swsetup_r+0xd0>)
 8004ba4:	429c      	cmp	r4, r3
 8004ba6:	d10f      	bne.n	8004bc8 <__swsetup_r+0x3c>
 8004ba8:	686c      	ldr	r4, [r5, #4]
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bb0:	0719      	lsls	r1, r3, #28
 8004bb2:	d42c      	bmi.n	8004c0e <__swsetup_r+0x82>
 8004bb4:	06dd      	lsls	r5, r3, #27
 8004bb6:	d411      	bmi.n	8004bdc <__swsetup_r+0x50>
 8004bb8:	2309      	movs	r3, #9
 8004bba:	6033      	str	r3, [r6, #0]
 8004bbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc6:	e03e      	b.n	8004c46 <__swsetup_r+0xba>
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <__swsetup_r+0xd4>)
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	d101      	bne.n	8004bd2 <__swsetup_r+0x46>
 8004bce:	68ac      	ldr	r4, [r5, #8]
 8004bd0:	e7eb      	b.n	8004baa <__swsetup_r+0x1e>
 8004bd2:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <__swsetup_r+0xd8>)
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	bf08      	it	eq
 8004bd8:	68ec      	ldreq	r4, [r5, #12]
 8004bda:	e7e6      	b.n	8004baa <__swsetup_r+0x1e>
 8004bdc:	0758      	lsls	r0, r3, #29
 8004bde:	d512      	bpl.n	8004c06 <__swsetup_r+0x7a>
 8004be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004be2:	b141      	cbz	r1, 8004bf6 <__swsetup_r+0x6a>
 8004be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004be8:	4299      	cmp	r1, r3
 8004bea:	d002      	beq.n	8004bf2 <__swsetup_r+0x66>
 8004bec:	4630      	mov	r0, r6
 8004bee:	f001 fc7b 	bl	80064e8 <_free_r>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6363      	str	r3, [r4, #52]	; 0x34
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bfc:	81a3      	strh	r3, [r4, #12]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6063      	str	r3, [r4, #4]
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	b94b      	cbnz	r3, 8004c26 <__swsetup_r+0x9a>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1c:	d003      	beq.n	8004c26 <__swsetup_r+0x9a>
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4630      	mov	r0, r6
 8004c22:	f001 f87d 	bl	8005d20 <__smakebuf_r>
 8004c26:	89a0      	ldrh	r0, [r4, #12]
 8004c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c2c:	f010 0301 	ands.w	r3, r0, #1
 8004c30:	d00a      	beq.n	8004c48 <__swsetup_r+0xbc>
 8004c32:	2300      	movs	r3, #0
 8004c34:	60a3      	str	r3, [r4, #8]
 8004c36:	6963      	ldr	r3, [r4, #20]
 8004c38:	425b      	negs	r3, r3
 8004c3a:	61a3      	str	r3, [r4, #24]
 8004c3c:	6923      	ldr	r3, [r4, #16]
 8004c3e:	b943      	cbnz	r3, 8004c52 <__swsetup_r+0xc6>
 8004c40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c44:	d1ba      	bne.n	8004bbc <__swsetup_r+0x30>
 8004c46:	bd70      	pop	{r4, r5, r6, pc}
 8004c48:	0781      	lsls	r1, r0, #30
 8004c4a:	bf58      	it	pl
 8004c4c:	6963      	ldrpl	r3, [r4, #20]
 8004c4e:	60a3      	str	r3, [r4, #8]
 8004c50:	e7f4      	b.n	8004c3c <__swsetup_r+0xb0>
 8004c52:	2000      	movs	r0, #0
 8004c54:	e7f7      	b.n	8004c46 <__swsetup_r+0xba>
 8004c56:	bf00      	nop
 8004c58:	2000000c 	.word	0x2000000c
 8004c5c:	08006d7c 	.word	0x08006d7c
 8004c60:	08006d9c 	.word	0x08006d9c
 8004c64:	08006d5c 	.word	0x08006d5c

08004c68 <quorem>:
 8004c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	6903      	ldr	r3, [r0, #16]
 8004c6e:	690c      	ldr	r4, [r1, #16]
 8004c70:	42a3      	cmp	r3, r4
 8004c72:	4607      	mov	r7, r0
 8004c74:	f2c0 8081 	blt.w	8004d7a <quorem+0x112>
 8004c78:	3c01      	subs	r4, #1
 8004c7a:	f101 0814 	add.w	r8, r1, #20
 8004c7e:	f100 0514 	add.w	r5, r0, #20
 8004c82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c90:	3301      	adds	r3, #1
 8004c92:	429a      	cmp	r2, r3
 8004c94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ca0:	d331      	bcc.n	8004d06 <quorem+0x9e>
 8004ca2:	f04f 0e00 	mov.w	lr, #0
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	46ac      	mov	ip, r5
 8004caa:	46f2      	mov	sl, lr
 8004cac:	f850 2b04 	ldr.w	r2, [r0], #4
 8004cb0:	b293      	uxth	r3, r2
 8004cb2:	fb06 e303 	mla	r3, r6, r3, lr
 8004cb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	ebaa 0303 	sub.w	r3, sl, r3
 8004cc0:	0c12      	lsrs	r2, r2, #16
 8004cc2:	f8dc a000 	ldr.w	sl, [ip]
 8004cc6:	fb06 e202 	mla	r2, r6, r2, lr
 8004cca:	fa13 f38a 	uxtah	r3, r3, sl
 8004cce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004cd2:	fa1f fa82 	uxth.w	sl, r2
 8004cd6:	f8dc 2000 	ldr.w	r2, [ip]
 8004cda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004cde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ce8:	4581      	cmp	r9, r0
 8004cea:	f84c 3b04 	str.w	r3, [ip], #4
 8004cee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004cf2:	d2db      	bcs.n	8004cac <quorem+0x44>
 8004cf4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004cf8:	b92b      	cbnz	r3, 8004d06 <quorem+0x9e>
 8004cfa:	9b01      	ldr	r3, [sp, #4]
 8004cfc:	3b04      	subs	r3, #4
 8004cfe:	429d      	cmp	r5, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	d32e      	bcc.n	8004d62 <quorem+0xfa>
 8004d04:	613c      	str	r4, [r7, #16]
 8004d06:	4638      	mov	r0, r7
 8004d08:	f001 fade 	bl	80062c8 <__mcmp>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	db24      	blt.n	8004d5a <quorem+0xf2>
 8004d10:	3601      	adds	r6, #1
 8004d12:	4628      	mov	r0, r5
 8004d14:	f04f 0c00 	mov.w	ip, #0
 8004d18:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d1c:	f8d0 e000 	ldr.w	lr, [r0]
 8004d20:	b293      	uxth	r3, r2
 8004d22:	ebac 0303 	sub.w	r3, ip, r3
 8004d26:	0c12      	lsrs	r2, r2, #16
 8004d28:	fa13 f38e 	uxtah	r3, r3, lr
 8004d2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d3a:	45c1      	cmp	r9, r8
 8004d3c:	f840 3b04 	str.w	r3, [r0], #4
 8004d40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d44:	d2e8      	bcs.n	8004d18 <quorem+0xb0>
 8004d46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d4e:	b922      	cbnz	r2, 8004d5a <quorem+0xf2>
 8004d50:	3b04      	subs	r3, #4
 8004d52:	429d      	cmp	r5, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	d30a      	bcc.n	8004d6e <quorem+0x106>
 8004d58:	613c      	str	r4, [r7, #16]
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	b003      	add	sp, #12
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	2a00      	cmp	r2, #0
 8004d68:	d1cc      	bne.n	8004d04 <quorem+0x9c>
 8004d6a:	3c01      	subs	r4, #1
 8004d6c:	e7c7      	b.n	8004cfe <quorem+0x96>
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	3b04      	subs	r3, #4
 8004d72:	2a00      	cmp	r2, #0
 8004d74:	d1f0      	bne.n	8004d58 <quorem+0xf0>
 8004d76:	3c01      	subs	r4, #1
 8004d78:	e7eb      	b.n	8004d52 <quorem+0xea>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e7ee      	b.n	8004d5c <quorem+0xf4>
	...

08004d80 <_dtoa_r>:
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	ed2d 8b02 	vpush	{d8}
 8004d88:	ec57 6b10 	vmov	r6, r7, d0
 8004d8c:	b095      	sub	sp, #84	; 0x54
 8004d8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004d94:	9105      	str	r1, [sp, #20]
 8004d96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004da0:	b975      	cbnz	r5, 8004dc0 <_dtoa_r+0x40>
 8004da2:	2010      	movs	r0, #16
 8004da4:	f000 fffc 	bl	8005da0 <malloc>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6260      	str	r0, [r4, #36]	; 0x24
 8004dac:	b920      	cbnz	r0, 8004db8 <_dtoa_r+0x38>
 8004dae:	4bb2      	ldr	r3, [pc, #712]	; (8005078 <_dtoa_r+0x2f8>)
 8004db0:	21ea      	movs	r1, #234	; 0xea
 8004db2:	48b2      	ldr	r0, [pc, #712]	; (800507c <_dtoa_r+0x2fc>)
 8004db4:	f001 fe02 	bl	80069bc <__assert_func>
 8004db8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004dbc:	6005      	str	r5, [r0, #0]
 8004dbe:	60c5      	str	r5, [r0, #12]
 8004dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	b151      	cbz	r1, 8004ddc <_dtoa_r+0x5c>
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	604a      	str	r2, [r1, #4]
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4093      	lsls	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f001 f83b 	bl	8005e4c <_Bfree>
 8004dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	1e3b      	subs	r3, r7, #0
 8004dde:	bfb9      	ittee	lt
 8004de0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004de4:	9303      	strlt	r3, [sp, #12]
 8004de6:	2300      	movge	r3, #0
 8004de8:	f8c8 3000 	strge.w	r3, [r8]
 8004dec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004df0:	4ba3      	ldr	r3, [pc, #652]	; (8005080 <_dtoa_r+0x300>)
 8004df2:	bfbc      	itt	lt
 8004df4:	2201      	movlt	r2, #1
 8004df6:	f8c8 2000 	strlt.w	r2, [r8]
 8004dfa:	ea33 0309 	bics.w	r3, r3, r9
 8004dfe:	d11b      	bne.n	8004e38 <_dtoa_r+0xb8>
 8004e00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e02:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e0c:	4333      	orrs	r3, r6
 8004e0e:	f000 857a 	beq.w	8005906 <_dtoa_r+0xb86>
 8004e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e14:	b963      	cbnz	r3, 8004e30 <_dtoa_r+0xb0>
 8004e16:	4b9b      	ldr	r3, [pc, #620]	; (8005084 <_dtoa_r+0x304>)
 8004e18:	e024      	b.n	8004e64 <_dtoa_r+0xe4>
 8004e1a:	4b9b      	ldr	r3, [pc, #620]	; (8005088 <_dtoa_r+0x308>)
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	3308      	adds	r3, #8
 8004e20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	9800      	ldr	r0, [sp, #0]
 8004e26:	b015      	add	sp, #84	; 0x54
 8004e28:	ecbd 8b02 	vpop	{d8}
 8004e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e30:	4b94      	ldr	r3, [pc, #592]	; (8005084 <_dtoa_r+0x304>)
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	3303      	adds	r3, #3
 8004e36:	e7f3      	b.n	8004e20 <_dtoa_r+0xa0>
 8004e38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	ec51 0b17 	vmov	r0, r1, d7
 8004e42:	2300      	movs	r3, #0
 8004e44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004e48:	f7fb fe46 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e4c:	4680      	mov	r8, r0
 8004e4e:	b158      	cbz	r0, 8004e68 <_dtoa_r+0xe8>
 8004e50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e52:	2301      	movs	r3, #1
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8551 	beq.w	8005900 <_dtoa_r+0xb80>
 8004e5e:	488b      	ldr	r0, [pc, #556]	; (800508c <_dtoa_r+0x30c>)
 8004e60:	6018      	str	r0, [r3, #0]
 8004e62:	1e43      	subs	r3, r0, #1
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	e7dd      	b.n	8004e24 <_dtoa_r+0xa4>
 8004e68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004e6c:	aa12      	add	r2, sp, #72	; 0x48
 8004e6e:	a913      	add	r1, sp, #76	; 0x4c
 8004e70:	4620      	mov	r0, r4
 8004e72:	f001 facd 	bl	8006410 <__d2b>
 8004e76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004e7a:	4683      	mov	fp, r0
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	d07c      	beq.n	8004f7a <_dtoa_r+0x1fa>
 8004e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004e8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004e92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004e96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e9a:	4b7d      	ldr	r3, [pc, #500]	; (8005090 <_dtoa_r+0x310>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	4639      	mov	r1, r7
 8004ea2:	f7fb f9f9 	bl	8000298 <__aeabi_dsub>
 8004ea6:	a36e      	add	r3, pc, #440	; (adr r3, 8005060 <_dtoa_r+0x2e0>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb fbac 	bl	8000608 <__aeabi_dmul>
 8004eb0:	a36d      	add	r3, pc, #436	; (adr r3, 8005068 <_dtoa_r+0x2e8>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb f9f1 	bl	800029c <__adddf3>
 8004eba:	4606      	mov	r6, r0
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	460f      	mov	r7, r1
 8004ec0:	f7fb fb38 	bl	8000534 <__aeabi_i2d>
 8004ec4:	a36a      	add	r3, pc, #424	; (adr r3, 8005070 <_dtoa_r+0x2f0>)
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	f7fb fb9d 	bl	8000608 <__aeabi_dmul>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	f7fb f9e1 	bl	800029c <__adddf3>
 8004eda:	4606      	mov	r6, r0
 8004edc:	460f      	mov	r7, r1
 8004ede:	f7fb fe43 	bl	8000b68 <__aeabi_d2iz>
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4682      	mov	sl, r0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	4630      	mov	r0, r6
 8004eea:	4639      	mov	r1, r7
 8004eec:	f7fb fdfe 	bl	8000aec <__aeabi_dcmplt>
 8004ef0:	b148      	cbz	r0, 8004f06 <_dtoa_r+0x186>
 8004ef2:	4650      	mov	r0, sl
 8004ef4:	f7fb fb1e 	bl	8000534 <__aeabi_i2d>
 8004ef8:	4632      	mov	r2, r6
 8004efa:	463b      	mov	r3, r7
 8004efc:	f7fb fdec 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f00:	b908      	cbnz	r0, 8004f06 <_dtoa_r+0x186>
 8004f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f06:	f1ba 0f16 	cmp.w	sl, #22
 8004f0a:	d854      	bhi.n	8004fb6 <_dtoa_r+0x236>
 8004f0c:	4b61      	ldr	r3, [pc, #388]	; (8005094 <_dtoa_r+0x314>)
 8004f0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f1a:	f7fb fde7 	bl	8000aec <__aeabi_dcmplt>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d04b      	beq.n	8004fba <_dtoa_r+0x23a>
 8004f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f26:	2300      	movs	r3, #0
 8004f28:	930e      	str	r3, [sp, #56]	; 0x38
 8004f2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f2c:	1b5d      	subs	r5, r3, r5
 8004f2e:	1e6b      	subs	r3, r5, #1
 8004f30:	9304      	str	r3, [sp, #16]
 8004f32:	bf43      	ittte	mi
 8004f34:	2300      	movmi	r3, #0
 8004f36:	f1c5 0801 	rsbmi	r8, r5, #1
 8004f3a:	9304      	strmi	r3, [sp, #16]
 8004f3c:	f04f 0800 	movpl.w	r8, #0
 8004f40:	f1ba 0f00 	cmp.w	sl, #0
 8004f44:	db3b      	blt.n	8004fbe <_dtoa_r+0x23e>
 8004f46:	9b04      	ldr	r3, [sp, #16]
 8004f48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004f4c:	4453      	add	r3, sl
 8004f4e:	9304      	str	r3, [sp, #16]
 8004f50:	2300      	movs	r3, #0
 8004f52:	9306      	str	r3, [sp, #24]
 8004f54:	9b05      	ldr	r3, [sp, #20]
 8004f56:	2b09      	cmp	r3, #9
 8004f58:	d869      	bhi.n	800502e <_dtoa_r+0x2ae>
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	bfc4      	itt	gt
 8004f5e:	3b04      	subgt	r3, #4
 8004f60:	9305      	strgt	r3, [sp, #20]
 8004f62:	9b05      	ldr	r3, [sp, #20]
 8004f64:	f1a3 0302 	sub.w	r3, r3, #2
 8004f68:	bfcc      	ite	gt
 8004f6a:	2500      	movgt	r5, #0
 8004f6c:	2501      	movle	r5, #1
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d869      	bhi.n	8005046 <_dtoa_r+0x2c6>
 8004f72:	e8df f003 	tbb	[pc, r3]
 8004f76:	4e2c      	.short	0x4e2c
 8004f78:	5a4c      	.short	0x5a4c
 8004f7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004f7e:	441d      	add	r5, r3
 8004f80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	bfc1      	itttt	gt
 8004f88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004f90:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f98:	bfda      	itte	le
 8004f9a:	f1c3 0320 	rsble	r3, r3, #32
 8004f9e:	fa06 f003 	lslle.w	r0, r6, r3
 8004fa2:	4318      	orrgt	r0, r3
 8004fa4:	f7fb fab6 	bl	8000514 <__aeabi_ui2d>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4606      	mov	r6, r0
 8004fac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004fb0:	3d01      	subs	r5, #1
 8004fb2:	9310      	str	r3, [sp, #64]	; 0x40
 8004fb4:	e771      	b.n	8004e9a <_dtoa_r+0x11a>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e7b6      	b.n	8004f28 <_dtoa_r+0x1a8>
 8004fba:	900e      	str	r0, [sp, #56]	; 0x38
 8004fbc:	e7b5      	b.n	8004f2a <_dtoa_r+0x1aa>
 8004fbe:	f1ca 0300 	rsb	r3, sl, #0
 8004fc2:	9306      	str	r3, [sp, #24]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	eba8 080a 	sub.w	r8, r8, sl
 8004fca:	930d      	str	r3, [sp, #52]	; 0x34
 8004fcc:	e7c2      	b.n	8004f54 <_dtoa_r+0x1d4>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9308      	str	r3, [sp, #32]
 8004fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	dc39      	bgt.n	800504c <_dtoa_r+0x2cc>
 8004fd8:	f04f 0901 	mov.w	r9, #1
 8004fdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004fe6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004fe8:	2200      	movs	r2, #0
 8004fea:	6042      	str	r2, [r0, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	f102 0614 	add.w	r6, r2, #20
 8004ff2:	429e      	cmp	r6, r3
 8004ff4:	6841      	ldr	r1, [r0, #4]
 8004ff6:	d92f      	bls.n	8005058 <_dtoa_r+0x2d8>
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fee7 	bl	8005dcc <_Balloc>
 8004ffe:	9000      	str	r0, [sp, #0]
 8005000:	2800      	cmp	r0, #0
 8005002:	d14b      	bne.n	800509c <_dtoa_r+0x31c>
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <_dtoa_r+0x318>)
 8005006:	4602      	mov	r2, r0
 8005008:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800500c:	e6d1      	b.n	8004db2 <_dtoa_r+0x32>
 800500e:	2301      	movs	r3, #1
 8005010:	e7de      	b.n	8004fd0 <_dtoa_r+0x250>
 8005012:	2300      	movs	r3, #0
 8005014:	9308      	str	r3, [sp, #32]
 8005016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005018:	eb0a 0903 	add.w	r9, sl, r3
 800501c:	f109 0301 	add.w	r3, r9, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	bfb8      	it	lt
 8005026:	2301      	movlt	r3, #1
 8005028:	e7dd      	b.n	8004fe6 <_dtoa_r+0x266>
 800502a:	2301      	movs	r3, #1
 800502c:	e7f2      	b.n	8005014 <_dtoa_r+0x294>
 800502e:	2501      	movs	r5, #1
 8005030:	2300      	movs	r3, #0
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	9508      	str	r5, [sp, #32]
 8005036:	f04f 39ff 	mov.w	r9, #4294967295
 800503a:	2200      	movs	r2, #0
 800503c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005040:	2312      	movs	r3, #18
 8005042:	9209      	str	r2, [sp, #36]	; 0x24
 8005044:	e7cf      	b.n	8004fe6 <_dtoa_r+0x266>
 8005046:	2301      	movs	r3, #1
 8005048:	9308      	str	r3, [sp, #32]
 800504a:	e7f4      	b.n	8005036 <_dtoa_r+0x2b6>
 800504c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005050:	f8cd 9004 	str.w	r9, [sp, #4]
 8005054:	464b      	mov	r3, r9
 8005056:	e7c6      	b.n	8004fe6 <_dtoa_r+0x266>
 8005058:	3101      	adds	r1, #1
 800505a:	6041      	str	r1, [r0, #4]
 800505c:	0052      	lsls	r2, r2, #1
 800505e:	e7c6      	b.n	8004fee <_dtoa_r+0x26e>
 8005060:	636f4361 	.word	0x636f4361
 8005064:	3fd287a7 	.word	0x3fd287a7
 8005068:	8b60c8b3 	.word	0x8b60c8b3
 800506c:	3fc68a28 	.word	0x3fc68a28
 8005070:	509f79fb 	.word	0x509f79fb
 8005074:	3fd34413 	.word	0x3fd34413
 8005078:	08006cd5 	.word	0x08006cd5
 800507c:	08006cec 	.word	0x08006cec
 8005080:	7ff00000 	.word	0x7ff00000
 8005084:	08006cd1 	.word	0x08006cd1
 8005088:	08006cc8 	.word	0x08006cc8
 800508c:	08006ca5 	.word	0x08006ca5
 8005090:	3ff80000 	.word	0x3ff80000
 8005094:	08006e48 	.word	0x08006e48
 8005098:	08006d4b 	.word	0x08006d4b
 800509c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800509e:	9a00      	ldr	r2, [sp, #0]
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	9b01      	ldr	r3, [sp, #4]
 80050a4:	2b0e      	cmp	r3, #14
 80050a6:	f200 80ad 	bhi.w	8005204 <_dtoa_r+0x484>
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	f000 80aa 	beq.w	8005204 <_dtoa_r+0x484>
 80050b0:	f1ba 0f00 	cmp.w	sl, #0
 80050b4:	dd36      	ble.n	8005124 <_dtoa_r+0x3a4>
 80050b6:	4ac3      	ldr	r2, [pc, #780]	; (80053c4 <_dtoa_r+0x644>)
 80050b8:	f00a 030f 	and.w	r3, sl, #15
 80050bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050c0:	ed93 7b00 	vldr	d7, [r3]
 80050c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80050c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80050cc:	eeb0 8a47 	vmov.f32	s16, s14
 80050d0:	eef0 8a67 	vmov.f32	s17, s15
 80050d4:	d016      	beq.n	8005104 <_dtoa_r+0x384>
 80050d6:	4bbc      	ldr	r3, [pc, #752]	; (80053c8 <_dtoa_r+0x648>)
 80050d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050e0:	f7fb fbbc 	bl	800085c <__aeabi_ddiv>
 80050e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050e8:	f007 070f 	and.w	r7, r7, #15
 80050ec:	2503      	movs	r5, #3
 80050ee:	4eb6      	ldr	r6, [pc, #728]	; (80053c8 <_dtoa_r+0x648>)
 80050f0:	b957      	cbnz	r7, 8005108 <_dtoa_r+0x388>
 80050f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050f6:	ec53 2b18 	vmov	r2, r3, d8
 80050fa:	f7fb fbaf 	bl	800085c <__aeabi_ddiv>
 80050fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005102:	e029      	b.n	8005158 <_dtoa_r+0x3d8>
 8005104:	2502      	movs	r5, #2
 8005106:	e7f2      	b.n	80050ee <_dtoa_r+0x36e>
 8005108:	07f9      	lsls	r1, r7, #31
 800510a:	d508      	bpl.n	800511e <_dtoa_r+0x39e>
 800510c:	ec51 0b18 	vmov	r0, r1, d8
 8005110:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005114:	f7fb fa78 	bl	8000608 <__aeabi_dmul>
 8005118:	ec41 0b18 	vmov	d8, r0, r1
 800511c:	3501      	adds	r5, #1
 800511e:	107f      	asrs	r7, r7, #1
 8005120:	3608      	adds	r6, #8
 8005122:	e7e5      	b.n	80050f0 <_dtoa_r+0x370>
 8005124:	f000 80a6 	beq.w	8005274 <_dtoa_r+0x4f4>
 8005128:	f1ca 0600 	rsb	r6, sl, #0
 800512c:	4ba5      	ldr	r3, [pc, #660]	; (80053c4 <_dtoa_r+0x644>)
 800512e:	4fa6      	ldr	r7, [pc, #664]	; (80053c8 <_dtoa_r+0x648>)
 8005130:	f006 020f 	and.w	r2, r6, #15
 8005134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005140:	f7fb fa62 	bl	8000608 <__aeabi_dmul>
 8005144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005148:	1136      	asrs	r6, r6, #4
 800514a:	2300      	movs	r3, #0
 800514c:	2502      	movs	r5, #2
 800514e:	2e00      	cmp	r6, #0
 8005150:	f040 8085 	bne.w	800525e <_dtoa_r+0x4de>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1d2      	bne.n	80050fe <_dtoa_r+0x37e>
 8005158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 808c 	beq.w	8005278 <_dtoa_r+0x4f8>
 8005160:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005164:	4b99      	ldr	r3, [pc, #612]	; (80053cc <_dtoa_r+0x64c>)
 8005166:	2200      	movs	r2, #0
 8005168:	4630      	mov	r0, r6
 800516a:	4639      	mov	r1, r7
 800516c:	f7fb fcbe 	bl	8000aec <__aeabi_dcmplt>
 8005170:	2800      	cmp	r0, #0
 8005172:	f000 8081 	beq.w	8005278 <_dtoa_r+0x4f8>
 8005176:	9b01      	ldr	r3, [sp, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d07d      	beq.n	8005278 <_dtoa_r+0x4f8>
 800517c:	f1b9 0f00 	cmp.w	r9, #0
 8005180:	dd3c      	ble.n	80051fc <_dtoa_r+0x47c>
 8005182:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005186:	9307      	str	r3, [sp, #28]
 8005188:	2200      	movs	r2, #0
 800518a:	4b91      	ldr	r3, [pc, #580]	; (80053d0 <_dtoa_r+0x650>)
 800518c:	4630      	mov	r0, r6
 800518e:	4639      	mov	r1, r7
 8005190:	f7fb fa3a 	bl	8000608 <__aeabi_dmul>
 8005194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005198:	3501      	adds	r5, #1
 800519a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800519e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051a2:	4628      	mov	r0, r5
 80051a4:	f7fb f9c6 	bl	8000534 <__aeabi_i2d>
 80051a8:	4632      	mov	r2, r6
 80051aa:	463b      	mov	r3, r7
 80051ac:	f7fb fa2c 	bl	8000608 <__aeabi_dmul>
 80051b0:	4b88      	ldr	r3, [pc, #544]	; (80053d4 <_dtoa_r+0x654>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	f7fb f872 	bl	800029c <__adddf3>
 80051b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80051bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c0:	9303      	str	r3, [sp, #12]
 80051c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d15c      	bne.n	8005282 <_dtoa_r+0x502>
 80051c8:	4b83      	ldr	r3, [pc, #524]	; (80053d8 <_dtoa_r+0x658>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	4630      	mov	r0, r6
 80051ce:	4639      	mov	r1, r7
 80051d0:	f7fb f862 	bl	8000298 <__aeabi_dsub>
 80051d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051d8:	4606      	mov	r6, r0
 80051da:	460f      	mov	r7, r1
 80051dc:	f7fb fca4 	bl	8000b28 <__aeabi_dcmpgt>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	f040 8296 	bne.w	8005712 <_dtoa_r+0x992>
 80051e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80051ea:	4630      	mov	r0, r6
 80051ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051f0:	4639      	mov	r1, r7
 80051f2:	f7fb fc7b 	bl	8000aec <__aeabi_dcmplt>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	f040 8288 	bne.w	800570c <_dtoa_r+0x98c>
 80051fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005206:	2b00      	cmp	r3, #0
 8005208:	f2c0 8158 	blt.w	80054bc <_dtoa_r+0x73c>
 800520c:	f1ba 0f0e 	cmp.w	sl, #14
 8005210:	f300 8154 	bgt.w	80054bc <_dtoa_r+0x73c>
 8005214:	4b6b      	ldr	r3, [pc, #428]	; (80053c4 <_dtoa_r+0x644>)
 8005216:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800521a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800521e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	f280 80e3 	bge.w	80053ec <_dtoa_r+0x66c>
 8005226:	9b01      	ldr	r3, [sp, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f300 80df 	bgt.w	80053ec <_dtoa_r+0x66c>
 800522e:	f040 826d 	bne.w	800570c <_dtoa_r+0x98c>
 8005232:	4b69      	ldr	r3, [pc, #420]	; (80053d8 <_dtoa_r+0x658>)
 8005234:	2200      	movs	r2, #0
 8005236:	4640      	mov	r0, r8
 8005238:	4649      	mov	r1, r9
 800523a:	f7fb f9e5 	bl	8000608 <__aeabi_dmul>
 800523e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005242:	f7fb fc67 	bl	8000b14 <__aeabi_dcmpge>
 8005246:	9e01      	ldr	r6, [sp, #4]
 8005248:	4637      	mov	r7, r6
 800524a:	2800      	cmp	r0, #0
 800524c:	f040 8243 	bne.w	80056d6 <_dtoa_r+0x956>
 8005250:	9d00      	ldr	r5, [sp, #0]
 8005252:	2331      	movs	r3, #49	; 0x31
 8005254:	f805 3b01 	strb.w	r3, [r5], #1
 8005258:	f10a 0a01 	add.w	sl, sl, #1
 800525c:	e23f      	b.n	80056de <_dtoa_r+0x95e>
 800525e:	07f2      	lsls	r2, r6, #31
 8005260:	d505      	bpl.n	800526e <_dtoa_r+0x4ee>
 8005262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005266:	f7fb f9cf 	bl	8000608 <__aeabi_dmul>
 800526a:	3501      	adds	r5, #1
 800526c:	2301      	movs	r3, #1
 800526e:	1076      	asrs	r6, r6, #1
 8005270:	3708      	adds	r7, #8
 8005272:	e76c      	b.n	800514e <_dtoa_r+0x3ce>
 8005274:	2502      	movs	r5, #2
 8005276:	e76f      	b.n	8005158 <_dtoa_r+0x3d8>
 8005278:	9b01      	ldr	r3, [sp, #4]
 800527a:	f8cd a01c 	str.w	sl, [sp, #28]
 800527e:	930c      	str	r3, [sp, #48]	; 0x30
 8005280:	e78d      	b.n	800519e <_dtoa_r+0x41e>
 8005282:	9900      	ldr	r1, [sp, #0]
 8005284:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005288:	4b4e      	ldr	r3, [pc, #312]	; (80053c4 <_dtoa_r+0x644>)
 800528a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800528e:	4401      	add	r1, r0
 8005290:	9102      	str	r1, [sp, #8]
 8005292:	9908      	ldr	r1, [sp, #32]
 8005294:	eeb0 8a47 	vmov.f32	s16, s14
 8005298:	eef0 8a67 	vmov.f32	s17, s15
 800529c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052a4:	2900      	cmp	r1, #0
 80052a6:	d045      	beq.n	8005334 <_dtoa_r+0x5b4>
 80052a8:	494c      	ldr	r1, [pc, #304]	; (80053dc <_dtoa_r+0x65c>)
 80052aa:	2000      	movs	r0, #0
 80052ac:	f7fb fad6 	bl	800085c <__aeabi_ddiv>
 80052b0:	ec53 2b18 	vmov	r2, r3, d8
 80052b4:	f7fa fff0 	bl	8000298 <__aeabi_dsub>
 80052b8:	9d00      	ldr	r5, [sp, #0]
 80052ba:	ec41 0b18 	vmov	d8, r0, r1
 80052be:	4639      	mov	r1, r7
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7fb fc51 	bl	8000b68 <__aeabi_d2iz>
 80052c6:	900c      	str	r0, [sp, #48]	; 0x30
 80052c8:	f7fb f934 	bl	8000534 <__aeabi_i2d>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fa ffe0 	bl	8000298 <__aeabi_dsub>
 80052d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052da:	3330      	adds	r3, #48	; 0x30
 80052dc:	f805 3b01 	strb.w	r3, [r5], #1
 80052e0:	ec53 2b18 	vmov	r2, r3, d8
 80052e4:	4606      	mov	r6, r0
 80052e6:	460f      	mov	r7, r1
 80052e8:	f7fb fc00 	bl	8000aec <__aeabi_dcmplt>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d165      	bne.n	80053bc <_dtoa_r+0x63c>
 80052f0:	4632      	mov	r2, r6
 80052f2:	463b      	mov	r3, r7
 80052f4:	4935      	ldr	r1, [pc, #212]	; (80053cc <_dtoa_r+0x64c>)
 80052f6:	2000      	movs	r0, #0
 80052f8:	f7fa ffce 	bl	8000298 <__aeabi_dsub>
 80052fc:	ec53 2b18 	vmov	r2, r3, d8
 8005300:	f7fb fbf4 	bl	8000aec <__aeabi_dcmplt>
 8005304:	2800      	cmp	r0, #0
 8005306:	f040 80b9 	bne.w	800547c <_dtoa_r+0x6fc>
 800530a:	9b02      	ldr	r3, [sp, #8]
 800530c:	429d      	cmp	r5, r3
 800530e:	f43f af75 	beq.w	80051fc <_dtoa_r+0x47c>
 8005312:	4b2f      	ldr	r3, [pc, #188]	; (80053d0 <_dtoa_r+0x650>)
 8005314:	ec51 0b18 	vmov	r0, r1, d8
 8005318:	2200      	movs	r2, #0
 800531a:	f7fb f975 	bl	8000608 <__aeabi_dmul>
 800531e:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <_dtoa_r+0x650>)
 8005320:	ec41 0b18 	vmov	d8, r0, r1
 8005324:	2200      	movs	r2, #0
 8005326:	4630      	mov	r0, r6
 8005328:	4639      	mov	r1, r7
 800532a:	f7fb f96d 	bl	8000608 <__aeabi_dmul>
 800532e:	4606      	mov	r6, r0
 8005330:	460f      	mov	r7, r1
 8005332:	e7c4      	b.n	80052be <_dtoa_r+0x53e>
 8005334:	ec51 0b17 	vmov	r0, r1, d7
 8005338:	f7fb f966 	bl	8000608 <__aeabi_dmul>
 800533c:	9b02      	ldr	r3, [sp, #8]
 800533e:	9d00      	ldr	r5, [sp, #0]
 8005340:	930c      	str	r3, [sp, #48]	; 0x30
 8005342:	ec41 0b18 	vmov	d8, r0, r1
 8005346:	4639      	mov	r1, r7
 8005348:	4630      	mov	r0, r6
 800534a:	f7fb fc0d 	bl	8000b68 <__aeabi_d2iz>
 800534e:	9011      	str	r0, [sp, #68]	; 0x44
 8005350:	f7fb f8f0 	bl	8000534 <__aeabi_i2d>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4630      	mov	r0, r6
 800535a:	4639      	mov	r1, r7
 800535c:	f7fa ff9c 	bl	8000298 <__aeabi_dsub>
 8005360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005362:	3330      	adds	r3, #48	; 0x30
 8005364:	f805 3b01 	strb.w	r3, [r5], #1
 8005368:	9b02      	ldr	r3, [sp, #8]
 800536a:	429d      	cmp	r5, r3
 800536c:	4606      	mov	r6, r0
 800536e:	460f      	mov	r7, r1
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	d134      	bne.n	80053e0 <_dtoa_r+0x660>
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <_dtoa_r+0x65c>)
 8005378:	ec51 0b18 	vmov	r0, r1, d8
 800537c:	f7fa ff8e 	bl	800029c <__adddf3>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4630      	mov	r0, r6
 8005386:	4639      	mov	r1, r7
 8005388:	f7fb fbce 	bl	8000b28 <__aeabi_dcmpgt>
 800538c:	2800      	cmp	r0, #0
 800538e:	d175      	bne.n	800547c <_dtoa_r+0x6fc>
 8005390:	ec53 2b18 	vmov	r2, r3, d8
 8005394:	4911      	ldr	r1, [pc, #68]	; (80053dc <_dtoa_r+0x65c>)
 8005396:	2000      	movs	r0, #0
 8005398:	f7fa ff7e 	bl	8000298 <__aeabi_dsub>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4630      	mov	r0, r6
 80053a2:	4639      	mov	r1, r7
 80053a4:	f7fb fba2 	bl	8000aec <__aeabi_dcmplt>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	f43f af27 	beq.w	80051fc <_dtoa_r+0x47c>
 80053ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053b0:	1e6b      	subs	r3, r5, #1
 80053b2:	930c      	str	r3, [sp, #48]	; 0x30
 80053b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053b8:	2b30      	cmp	r3, #48	; 0x30
 80053ba:	d0f8      	beq.n	80053ae <_dtoa_r+0x62e>
 80053bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80053c0:	e04a      	b.n	8005458 <_dtoa_r+0x6d8>
 80053c2:	bf00      	nop
 80053c4:	08006e48 	.word	0x08006e48
 80053c8:	08006e20 	.word	0x08006e20
 80053cc:	3ff00000 	.word	0x3ff00000
 80053d0:	40240000 	.word	0x40240000
 80053d4:	401c0000 	.word	0x401c0000
 80053d8:	40140000 	.word	0x40140000
 80053dc:	3fe00000 	.word	0x3fe00000
 80053e0:	4baf      	ldr	r3, [pc, #700]	; (80056a0 <_dtoa_r+0x920>)
 80053e2:	f7fb f911 	bl	8000608 <__aeabi_dmul>
 80053e6:	4606      	mov	r6, r0
 80053e8:	460f      	mov	r7, r1
 80053ea:	e7ac      	b.n	8005346 <_dtoa_r+0x5c6>
 80053ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80053f0:	9d00      	ldr	r5, [sp, #0]
 80053f2:	4642      	mov	r2, r8
 80053f4:	464b      	mov	r3, r9
 80053f6:	4630      	mov	r0, r6
 80053f8:	4639      	mov	r1, r7
 80053fa:	f7fb fa2f 	bl	800085c <__aeabi_ddiv>
 80053fe:	f7fb fbb3 	bl	8000b68 <__aeabi_d2iz>
 8005402:	9002      	str	r0, [sp, #8]
 8005404:	f7fb f896 	bl	8000534 <__aeabi_i2d>
 8005408:	4642      	mov	r2, r8
 800540a:	464b      	mov	r3, r9
 800540c:	f7fb f8fc 	bl	8000608 <__aeabi_dmul>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4630      	mov	r0, r6
 8005416:	4639      	mov	r1, r7
 8005418:	f7fa ff3e 	bl	8000298 <__aeabi_dsub>
 800541c:	9e02      	ldr	r6, [sp, #8]
 800541e:	9f01      	ldr	r7, [sp, #4]
 8005420:	3630      	adds	r6, #48	; 0x30
 8005422:	f805 6b01 	strb.w	r6, [r5], #1
 8005426:	9e00      	ldr	r6, [sp, #0]
 8005428:	1bae      	subs	r6, r5, r6
 800542a:	42b7      	cmp	r7, r6
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	d137      	bne.n	80054a2 <_dtoa_r+0x722>
 8005432:	f7fa ff33 	bl	800029c <__adddf3>
 8005436:	4642      	mov	r2, r8
 8005438:	464b      	mov	r3, r9
 800543a:	4606      	mov	r6, r0
 800543c:	460f      	mov	r7, r1
 800543e:	f7fb fb73 	bl	8000b28 <__aeabi_dcmpgt>
 8005442:	b9c8      	cbnz	r0, 8005478 <_dtoa_r+0x6f8>
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	4630      	mov	r0, r6
 800544a:	4639      	mov	r1, r7
 800544c:	f7fb fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 8005450:	b110      	cbz	r0, 8005458 <_dtoa_r+0x6d8>
 8005452:	9b02      	ldr	r3, [sp, #8]
 8005454:	07d9      	lsls	r1, r3, #31
 8005456:	d40f      	bmi.n	8005478 <_dtoa_r+0x6f8>
 8005458:	4620      	mov	r0, r4
 800545a:	4659      	mov	r1, fp
 800545c:	f000 fcf6 	bl	8005e4c <_Bfree>
 8005460:	2300      	movs	r3, #0
 8005462:	702b      	strb	r3, [r5, #0]
 8005464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005466:	f10a 0001 	add.w	r0, sl, #1
 800546a:	6018      	str	r0, [r3, #0]
 800546c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800546e:	2b00      	cmp	r3, #0
 8005470:	f43f acd8 	beq.w	8004e24 <_dtoa_r+0xa4>
 8005474:	601d      	str	r5, [r3, #0]
 8005476:	e4d5      	b.n	8004e24 <_dtoa_r+0xa4>
 8005478:	f8cd a01c 	str.w	sl, [sp, #28]
 800547c:	462b      	mov	r3, r5
 800547e:	461d      	mov	r5, r3
 8005480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005484:	2a39      	cmp	r2, #57	; 0x39
 8005486:	d108      	bne.n	800549a <_dtoa_r+0x71a>
 8005488:	9a00      	ldr	r2, [sp, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d1f7      	bne.n	800547e <_dtoa_r+0x6fe>
 800548e:	9a07      	ldr	r2, [sp, #28]
 8005490:	9900      	ldr	r1, [sp, #0]
 8005492:	3201      	adds	r2, #1
 8005494:	9207      	str	r2, [sp, #28]
 8005496:	2230      	movs	r2, #48	; 0x30
 8005498:	700a      	strb	r2, [r1, #0]
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	3201      	adds	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	e78c      	b.n	80053bc <_dtoa_r+0x63c>
 80054a2:	4b7f      	ldr	r3, [pc, #508]	; (80056a0 <_dtoa_r+0x920>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	f7fb f8af 	bl	8000608 <__aeabi_dmul>
 80054aa:	2200      	movs	r2, #0
 80054ac:	2300      	movs	r3, #0
 80054ae:	4606      	mov	r6, r0
 80054b0:	460f      	mov	r7, r1
 80054b2:	f7fb fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d09b      	beq.n	80053f2 <_dtoa_r+0x672>
 80054ba:	e7cd      	b.n	8005458 <_dtoa_r+0x6d8>
 80054bc:	9a08      	ldr	r2, [sp, #32]
 80054be:	2a00      	cmp	r2, #0
 80054c0:	f000 80c4 	beq.w	800564c <_dtoa_r+0x8cc>
 80054c4:	9a05      	ldr	r2, [sp, #20]
 80054c6:	2a01      	cmp	r2, #1
 80054c8:	f300 80a8 	bgt.w	800561c <_dtoa_r+0x89c>
 80054cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	f000 80a0 	beq.w	8005614 <_dtoa_r+0x894>
 80054d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80054d8:	9e06      	ldr	r6, [sp, #24]
 80054da:	4645      	mov	r5, r8
 80054dc:	9a04      	ldr	r2, [sp, #16]
 80054de:	2101      	movs	r1, #1
 80054e0:	441a      	add	r2, r3
 80054e2:	4620      	mov	r0, r4
 80054e4:	4498      	add	r8, r3
 80054e6:	9204      	str	r2, [sp, #16]
 80054e8:	f000 fd6c 	bl	8005fc4 <__i2b>
 80054ec:	4607      	mov	r7, r0
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	dd0b      	ble.n	800550a <_dtoa_r+0x78a>
 80054f2:	9b04      	ldr	r3, [sp, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dd08      	ble.n	800550a <_dtoa_r+0x78a>
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	9a04      	ldr	r2, [sp, #16]
 80054fc:	bfa8      	it	ge
 80054fe:	462b      	movge	r3, r5
 8005500:	eba8 0803 	sub.w	r8, r8, r3
 8005504:	1aed      	subs	r5, r5, r3
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	9304      	str	r3, [sp, #16]
 800550a:	9b06      	ldr	r3, [sp, #24]
 800550c:	b1fb      	cbz	r3, 800554e <_dtoa_r+0x7ce>
 800550e:	9b08      	ldr	r3, [sp, #32]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 809f 	beq.w	8005654 <_dtoa_r+0x8d4>
 8005516:	2e00      	cmp	r6, #0
 8005518:	dd11      	ble.n	800553e <_dtoa_r+0x7be>
 800551a:	4639      	mov	r1, r7
 800551c:	4632      	mov	r2, r6
 800551e:	4620      	mov	r0, r4
 8005520:	f000 fe0c 	bl	800613c <__pow5mult>
 8005524:	465a      	mov	r2, fp
 8005526:	4601      	mov	r1, r0
 8005528:	4607      	mov	r7, r0
 800552a:	4620      	mov	r0, r4
 800552c:	f000 fd60 	bl	8005ff0 <__multiply>
 8005530:	4659      	mov	r1, fp
 8005532:	9007      	str	r0, [sp, #28]
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fc89 	bl	8005e4c <_Bfree>
 800553a:	9b07      	ldr	r3, [sp, #28]
 800553c:	469b      	mov	fp, r3
 800553e:	9b06      	ldr	r3, [sp, #24]
 8005540:	1b9a      	subs	r2, r3, r6
 8005542:	d004      	beq.n	800554e <_dtoa_r+0x7ce>
 8005544:	4659      	mov	r1, fp
 8005546:	4620      	mov	r0, r4
 8005548:	f000 fdf8 	bl	800613c <__pow5mult>
 800554c:	4683      	mov	fp, r0
 800554e:	2101      	movs	r1, #1
 8005550:	4620      	mov	r0, r4
 8005552:	f000 fd37 	bl	8005fc4 <__i2b>
 8005556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005558:	2b00      	cmp	r3, #0
 800555a:	4606      	mov	r6, r0
 800555c:	dd7c      	ble.n	8005658 <_dtoa_r+0x8d8>
 800555e:	461a      	mov	r2, r3
 8005560:	4601      	mov	r1, r0
 8005562:	4620      	mov	r0, r4
 8005564:	f000 fdea 	bl	800613c <__pow5mult>
 8005568:	9b05      	ldr	r3, [sp, #20]
 800556a:	2b01      	cmp	r3, #1
 800556c:	4606      	mov	r6, r0
 800556e:	dd76      	ble.n	800565e <_dtoa_r+0x8de>
 8005570:	2300      	movs	r3, #0
 8005572:	9306      	str	r3, [sp, #24]
 8005574:	6933      	ldr	r3, [r6, #16]
 8005576:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800557a:	6918      	ldr	r0, [r3, #16]
 800557c:	f000 fcd2 	bl	8005f24 <__hi0bits>
 8005580:	f1c0 0020 	rsb	r0, r0, #32
 8005584:	9b04      	ldr	r3, [sp, #16]
 8005586:	4418      	add	r0, r3
 8005588:	f010 001f 	ands.w	r0, r0, #31
 800558c:	f000 8086 	beq.w	800569c <_dtoa_r+0x91c>
 8005590:	f1c0 0320 	rsb	r3, r0, #32
 8005594:	2b04      	cmp	r3, #4
 8005596:	dd7f      	ble.n	8005698 <_dtoa_r+0x918>
 8005598:	f1c0 001c 	rsb	r0, r0, #28
 800559c:	9b04      	ldr	r3, [sp, #16]
 800559e:	4403      	add	r3, r0
 80055a0:	4480      	add	r8, r0
 80055a2:	4405      	add	r5, r0
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	f1b8 0f00 	cmp.w	r8, #0
 80055aa:	dd05      	ble.n	80055b8 <_dtoa_r+0x838>
 80055ac:	4659      	mov	r1, fp
 80055ae:	4642      	mov	r2, r8
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fe1d 	bl	80061f0 <__lshift>
 80055b6:	4683      	mov	fp, r0
 80055b8:	9b04      	ldr	r3, [sp, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	dd05      	ble.n	80055ca <_dtoa_r+0x84a>
 80055be:	4631      	mov	r1, r6
 80055c0:	461a      	mov	r2, r3
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 fe14 	bl	80061f0 <__lshift>
 80055c8:	4606      	mov	r6, r0
 80055ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d069      	beq.n	80056a4 <_dtoa_r+0x924>
 80055d0:	4631      	mov	r1, r6
 80055d2:	4658      	mov	r0, fp
 80055d4:	f000 fe78 	bl	80062c8 <__mcmp>
 80055d8:	2800      	cmp	r0, #0
 80055da:	da63      	bge.n	80056a4 <_dtoa_r+0x924>
 80055dc:	2300      	movs	r3, #0
 80055de:	4659      	mov	r1, fp
 80055e0:	220a      	movs	r2, #10
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 fc54 	bl	8005e90 <__multadd>
 80055e8:	9b08      	ldr	r3, [sp, #32]
 80055ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055ee:	4683      	mov	fp, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 818f 	beq.w	8005914 <_dtoa_r+0xb94>
 80055f6:	4639      	mov	r1, r7
 80055f8:	2300      	movs	r3, #0
 80055fa:	220a      	movs	r2, #10
 80055fc:	4620      	mov	r0, r4
 80055fe:	f000 fc47 	bl	8005e90 <__multadd>
 8005602:	f1b9 0f00 	cmp.w	r9, #0
 8005606:	4607      	mov	r7, r0
 8005608:	f300 808e 	bgt.w	8005728 <_dtoa_r+0x9a8>
 800560c:	9b05      	ldr	r3, [sp, #20]
 800560e:	2b02      	cmp	r3, #2
 8005610:	dc50      	bgt.n	80056b4 <_dtoa_r+0x934>
 8005612:	e089      	b.n	8005728 <_dtoa_r+0x9a8>
 8005614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005616:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800561a:	e75d      	b.n	80054d8 <_dtoa_r+0x758>
 800561c:	9b01      	ldr	r3, [sp, #4]
 800561e:	1e5e      	subs	r6, r3, #1
 8005620:	9b06      	ldr	r3, [sp, #24]
 8005622:	42b3      	cmp	r3, r6
 8005624:	bfbf      	itttt	lt
 8005626:	9b06      	ldrlt	r3, [sp, #24]
 8005628:	9606      	strlt	r6, [sp, #24]
 800562a:	1af2      	sublt	r2, r6, r3
 800562c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800562e:	bfb6      	itet	lt
 8005630:	189b      	addlt	r3, r3, r2
 8005632:	1b9e      	subge	r6, r3, r6
 8005634:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005636:	9b01      	ldr	r3, [sp, #4]
 8005638:	bfb8      	it	lt
 800563a:	2600      	movlt	r6, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	bfb5      	itete	lt
 8005640:	eba8 0503 	sublt.w	r5, r8, r3
 8005644:	9b01      	ldrge	r3, [sp, #4]
 8005646:	2300      	movlt	r3, #0
 8005648:	4645      	movge	r5, r8
 800564a:	e747      	b.n	80054dc <_dtoa_r+0x75c>
 800564c:	9e06      	ldr	r6, [sp, #24]
 800564e:	9f08      	ldr	r7, [sp, #32]
 8005650:	4645      	mov	r5, r8
 8005652:	e74c      	b.n	80054ee <_dtoa_r+0x76e>
 8005654:	9a06      	ldr	r2, [sp, #24]
 8005656:	e775      	b.n	8005544 <_dtoa_r+0x7c4>
 8005658:	9b05      	ldr	r3, [sp, #20]
 800565a:	2b01      	cmp	r3, #1
 800565c:	dc18      	bgt.n	8005690 <_dtoa_r+0x910>
 800565e:	9b02      	ldr	r3, [sp, #8]
 8005660:	b9b3      	cbnz	r3, 8005690 <_dtoa_r+0x910>
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005668:	b9a3      	cbnz	r3, 8005694 <_dtoa_r+0x914>
 800566a:	9b03      	ldr	r3, [sp, #12]
 800566c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005670:	0d1b      	lsrs	r3, r3, #20
 8005672:	051b      	lsls	r3, r3, #20
 8005674:	b12b      	cbz	r3, 8005682 <_dtoa_r+0x902>
 8005676:	9b04      	ldr	r3, [sp, #16]
 8005678:	3301      	adds	r3, #1
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	f108 0801 	add.w	r8, r8, #1
 8005680:	2301      	movs	r3, #1
 8005682:	9306      	str	r3, [sp, #24]
 8005684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005686:	2b00      	cmp	r3, #0
 8005688:	f47f af74 	bne.w	8005574 <_dtoa_r+0x7f4>
 800568c:	2001      	movs	r0, #1
 800568e:	e779      	b.n	8005584 <_dtoa_r+0x804>
 8005690:	2300      	movs	r3, #0
 8005692:	e7f6      	b.n	8005682 <_dtoa_r+0x902>
 8005694:	9b02      	ldr	r3, [sp, #8]
 8005696:	e7f4      	b.n	8005682 <_dtoa_r+0x902>
 8005698:	d085      	beq.n	80055a6 <_dtoa_r+0x826>
 800569a:	4618      	mov	r0, r3
 800569c:	301c      	adds	r0, #28
 800569e:	e77d      	b.n	800559c <_dtoa_r+0x81c>
 80056a0:	40240000 	.word	0x40240000
 80056a4:	9b01      	ldr	r3, [sp, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	dc38      	bgt.n	800571c <_dtoa_r+0x99c>
 80056aa:	9b05      	ldr	r3, [sp, #20]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	dd35      	ble.n	800571c <_dtoa_r+0x99c>
 80056b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80056b4:	f1b9 0f00 	cmp.w	r9, #0
 80056b8:	d10d      	bne.n	80056d6 <_dtoa_r+0x956>
 80056ba:	4631      	mov	r1, r6
 80056bc:	464b      	mov	r3, r9
 80056be:	2205      	movs	r2, #5
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 fbe5 	bl	8005e90 <__multadd>
 80056c6:	4601      	mov	r1, r0
 80056c8:	4606      	mov	r6, r0
 80056ca:	4658      	mov	r0, fp
 80056cc:	f000 fdfc 	bl	80062c8 <__mcmp>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	f73f adbd 	bgt.w	8005250 <_dtoa_r+0x4d0>
 80056d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d8:	9d00      	ldr	r5, [sp, #0]
 80056da:	ea6f 0a03 	mvn.w	sl, r3
 80056de:	f04f 0800 	mov.w	r8, #0
 80056e2:	4631      	mov	r1, r6
 80056e4:	4620      	mov	r0, r4
 80056e6:	f000 fbb1 	bl	8005e4c <_Bfree>
 80056ea:	2f00      	cmp	r7, #0
 80056ec:	f43f aeb4 	beq.w	8005458 <_dtoa_r+0x6d8>
 80056f0:	f1b8 0f00 	cmp.w	r8, #0
 80056f4:	d005      	beq.n	8005702 <_dtoa_r+0x982>
 80056f6:	45b8      	cmp	r8, r7
 80056f8:	d003      	beq.n	8005702 <_dtoa_r+0x982>
 80056fa:	4641      	mov	r1, r8
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 fba5 	bl	8005e4c <_Bfree>
 8005702:	4639      	mov	r1, r7
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fba1 	bl	8005e4c <_Bfree>
 800570a:	e6a5      	b.n	8005458 <_dtoa_r+0x6d8>
 800570c:	2600      	movs	r6, #0
 800570e:	4637      	mov	r7, r6
 8005710:	e7e1      	b.n	80056d6 <_dtoa_r+0x956>
 8005712:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005714:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005718:	4637      	mov	r7, r6
 800571a:	e599      	b.n	8005250 <_dtoa_r+0x4d0>
 800571c:	9b08      	ldr	r3, [sp, #32]
 800571e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80fd 	beq.w	8005922 <_dtoa_r+0xba2>
 8005728:	2d00      	cmp	r5, #0
 800572a:	dd05      	ble.n	8005738 <_dtoa_r+0x9b8>
 800572c:	4639      	mov	r1, r7
 800572e:	462a      	mov	r2, r5
 8005730:	4620      	mov	r0, r4
 8005732:	f000 fd5d 	bl	80061f0 <__lshift>
 8005736:	4607      	mov	r7, r0
 8005738:	9b06      	ldr	r3, [sp, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d05c      	beq.n	80057f8 <_dtoa_r+0xa78>
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4620      	mov	r0, r4
 8005742:	f000 fb43 	bl	8005dcc <_Balloc>
 8005746:	4605      	mov	r5, r0
 8005748:	b928      	cbnz	r0, 8005756 <_dtoa_r+0x9d6>
 800574a:	4b80      	ldr	r3, [pc, #512]	; (800594c <_dtoa_r+0xbcc>)
 800574c:	4602      	mov	r2, r0
 800574e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005752:	f7ff bb2e 	b.w	8004db2 <_dtoa_r+0x32>
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	3202      	adds	r2, #2
 800575a:	0092      	lsls	r2, r2, #2
 800575c:	f107 010c 	add.w	r1, r7, #12
 8005760:	300c      	adds	r0, #12
 8005762:	f000 fb25 	bl	8005db0 <memcpy>
 8005766:	2201      	movs	r2, #1
 8005768:	4629      	mov	r1, r5
 800576a:	4620      	mov	r0, r4
 800576c:	f000 fd40 	bl	80061f0 <__lshift>
 8005770:	9b00      	ldr	r3, [sp, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	9b00      	ldr	r3, [sp, #0]
 8005778:	444b      	add	r3, r9
 800577a:	9307      	str	r3, [sp, #28]
 800577c:	9b02      	ldr	r3, [sp, #8]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	46b8      	mov	r8, r7
 8005784:	9306      	str	r3, [sp, #24]
 8005786:	4607      	mov	r7, r0
 8005788:	9b01      	ldr	r3, [sp, #4]
 800578a:	4631      	mov	r1, r6
 800578c:	3b01      	subs	r3, #1
 800578e:	4658      	mov	r0, fp
 8005790:	9302      	str	r3, [sp, #8]
 8005792:	f7ff fa69 	bl	8004c68 <quorem>
 8005796:	4603      	mov	r3, r0
 8005798:	3330      	adds	r3, #48	; 0x30
 800579a:	9004      	str	r0, [sp, #16]
 800579c:	4641      	mov	r1, r8
 800579e:	4658      	mov	r0, fp
 80057a0:	9308      	str	r3, [sp, #32]
 80057a2:	f000 fd91 	bl	80062c8 <__mcmp>
 80057a6:	463a      	mov	r2, r7
 80057a8:	4681      	mov	r9, r0
 80057aa:	4631      	mov	r1, r6
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 fda7 	bl	8006300 <__mdiff>
 80057b2:	68c2      	ldr	r2, [r0, #12]
 80057b4:	9b08      	ldr	r3, [sp, #32]
 80057b6:	4605      	mov	r5, r0
 80057b8:	bb02      	cbnz	r2, 80057fc <_dtoa_r+0xa7c>
 80057ba:	4601      	mov	r1, r0
 80057bc:	4658      	mov	r0, fp
 80057be:	f000 fd83 	bl	80062c8 <__mcmp>
 80057c2:	9b08      	ldr	r3, [sp, #32]
 80057c4:	4602      	mov	r2, r0
 80057c6:	4629      	mov	r1, r5
 80057c8:	4620      	mov	r0, r4
 80057ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80057ce:	f000 fb3d 	bl	8005e4c <_Bfree>
 80057d2:	9b05      	ldr	r3, [sp, #20]
 80057d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057d6:	9d01      	ldr	r5, [sp, #4]
 80057d8:	ea43 0102 	orr.w	r1, r3, r2
 80057dc:	9b06      	ldr	r3, [sp, #24]
 80057de:	430b      	orrs	r3, r1
 80057e0:	9b08      	ldr	r3, [sp, #32]
 80057e2:	d10d      	bne.n	8005800 <_dtoa_r+0xa80>
 80057e4:	2b39      	cmp	r3, #57	; 0x39
 80057e6:	d029      	beq.n	800583c <_dtoa_r+0xabc>
 80057e8:	f1b9 0f00 	cmp.w	r9, #0
 80057ec:	dd01      	ble.n	80057f2 <_dtoa_r+0xa72>
 80057ee:	9b04      	ldr	r3, [sp, #16]
 80057f0:	3331      	adds	r3, #49	; 0x31
 80057f2:	9a02      	ldr	r2, [sp, #8]
 80057f4:	7013      	strb	r3, [r2, #0]
 80057f6:	e774      	b.n	80056e2 <_dtoa_r+0x962>
 80057f8:	4638      	mov	r0, r7
 80057fa:	e7b9      	b.n	8005770 <_dtoa_r+0x9f0>
 80057fc:	2201      	movs	r2, #1
 80057fe:	e7e2      	b.n	80057c6 <_dtoa_r+0xa46>
 8005800:	f1b9 0f00 	cmp.w	r9, #0
 8005804:	db06      	blt.n	8005814 <_dtoa_r+0xa94>
 8005806:	9905      	ldr	r1, [sp, #20]
 8005808:	ea41 0909 	orr.w	r9, r1, r9
 800580c:	9906      	ldr	r1, [sp, #24]
 800580e:	ea59 0101 	orrs.w	r1, r9, r1
 8005812:	d120      	bne.n	8005856 <_dtoa_r+0xad6>
 8005814:	2a00      	cmp	r2, #0
 8005816:	ddec      	ble.n	80057f2 <_dtoa_r+0xa72>
 8005818:	4659      	mov	r1, fp
 800581a:	2201      	movs	r2, #1
 800581c:	4620      	mov	r0, r4
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	f000 fce6 	bl	80061f0 <__lshift>
 8005824:	4631      	mov	r1, r6
 8005826:	4683      	mov	fp, r0
 8005828:	f000 fd4e 	bl	80062c8 <__mcmp>
 800582c:	2800      	cmp	r0, #0
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	dc02      	bgt.n	8005838 <_dtoa_r+0xab8>
 8005832:	d1de      	bne.n	80057f2 <_dtoa_r+0xa72>
 8005834:	07da      	lsls	r2, r3, #31
 8005836:	d5dc      	bpl.n	80057f2 <_dtoa_r+0xa72>
 8005838:	2b39      	cmp	r3, #57	; 0x39
 800583a:	d1d8      	bne.n	80057ee <_dtoa_r+0xa6e>
 800583c:	9a02      	ldr	r2, [sp, #8]
 800583e:	2339      	movs	r3, #57	; 0x39
 8005840:	7013      	strb	r3, [r2, #0]
 8005842:	462b      	mov	r3, r5
 8005844:	461d      	mov	r5, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800584c:	2a39      	cmp	r2, #57	; 0x39
 800584e:	d050      	beq.n	80058f2 <_dtoa_r+0xb72>
 8005850:	3201      	adds	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e745      	b.n	80056e2 <_dtoa_r+0x962>
 8005856:	2a00      	cmp	r2, #0
 8005858:	dd03      	ble.n	8005862 <_dtoa_r+0xae2>
 800585a:	2b39      	cmp	r3, #57	; 0x39
 800585c:	d0ee      	beq.n	800583c <_dtoa_r+0xabc>
 800585e:	3301      	adds	r3, #1
 8005860:	e7c7      	b.n	80057f2 <_dtoa_r+0xa72>
 8005862:	9a01      	ldr	r2, [sp, #4]
 8005864:	9907      	ldr	r1, [sp, #28]
 8005866:	f802 3c01 	strb.w	r3, [r2, #-1]
 800586a:	428a      	cmp	r2, r1
 800586c:	d02a      	beq.n	80058c4 <_dtoa_r+0xb44>
 800586e:	4659      	mov	r1, fp
 8005870:	2300      	movs	r3, #0
 8005872:	220a      	movs	r2, #10
 8005874:	4620      	mov	r0, r4
 8005876:	f000 fb0b 	bl	8005e90 <__multadd>
 800587a:	45b8      	cmp	r8, r7
 800587c:	4683      	mov	fp, r0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	f04f 020a 	mov.w	r2, #10
 8005886:	4641      	mov	r1, r8
 8005888:	4620      	mov	r0, r4
 800588a:	d107      	bne.n	800589c <_dtoa_r+0xb1c>
 800588c:	f000 fb00 	bl	8005e90 <__multadd>
 8005890:	4680      	mov	r8, r0
 8005892:	4607      	mov	r7, r0
 8005894:	9b01      	ldr	r3, [sp, #4]
 8005896:	3301      	adds	r3, #1
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	e775      	b.n	8005788 <_dtoa_r+0xa08>
 800589c:	f000 faf8 	bl	8005e90 <__multadd>
 80058a0:	4639      	mov	r1, r7
 80058a2:	4680      	mov	r8, r0
 80058a4:	2300      	movs	r3, #0
 80058a6:	220a      	movs	r2, #10
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 faf1 	bl	8005e90 <__multadd>
 80058ae:	4607      	mov	r7, r0
 80058b0:	e7f0      	b.n	8005894 <_dtoa_r+0xb14>
 80058b2:	f1b9 0f00 	cmp.w	r9, #0
 80058b6:	9a00      	ldr	r2, [sp, #0]
 80058b8:	bfcc      	ite	gt
 80058ba:	464d      	movgt	r5, r9
 80058bc:	2501      	movle	r5, #1
 80058be:	4415      	add	r5, r2
 80058c0:	f04f 0800 	mov.w	r8, #0
 80058c4:	4659      	mov	r1, fp
 80058c6:	2201      	movs	r2, #1
 80058c8:	4620      	mov	r0, r4
 80058ca:	9301      	str	r3, [sp, #4]
 80058cc:	f000 fc90 	bl	80061f0 <__lshift>
 80058d0:	4631      	mov	r1, r6
 80058d2:	4683      	mov	fp, r0
 80058d4:	f000 fcf8 	bl	80062c8 <__mcmp>
 80058d8:	2800      	cmp	r0, #0
 80058da:	dcb2      	bgt.n	8005842 <_dtoa_r+0xac2>
 80058dc:	d102      	bne.n	80058e4 <_dtoa_r+0xb64>
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	07db      	lsls	r3, r3, #31
 80058e2:	d4ae      	bmi.n	8005842 <_dtoa_r+0xac2>
 80058e4:	462b      	mov	r3, r5
 80058e6:	461d      	mov	r5, r3
 80058e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058ec:	2a30      	cmp	r2, #48	; 0x30
 80058ee:	d0fa      	beq.n	80058e6 <_dtoa_r+0xb66>
 80058f0:	e6f7      	b.n	80056e2 <_dtoa_r+0x962>
 80058f2:	9a00      	ldr	r2, [sp, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d1a5      	bne.n	8005844 <_dtoa_r+0xac4>
 80058f8:	f10a 0a01 	add.w	sl, sl, #1
 80058fc:	2331      	movs	r3, #49	; 0x31
 80058fe:	e779      	b.n	80057f4 <_dtoa_r+0xa74>
 8005900:	4b13      	ldr	r3, [pc, #76]	; (8005950 <_dtoa_r+0xbd0>)
 8005902:	f7ff baaf 	b.w	8004e64 <_dtoa_r+0xe4>
 8005906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005908:	2b00      	cmp	r3, #0
 800590a:	f47f aa86 	bne.w	8004e1a <_dtoa_r+0x9a>
 800590e:	4b11      	ldr	r3, [pc, #68]	; (8005954 <_dtoa_r+0xbd4>)
 8005910:	f7ff baa8 	b.w	8004e64 <_dtoa_r+0xe4>
 8005914:	f1b9 0f00 	cmp.w	r9, #0
 8005918:	dc03      	bgt.n	8005922 <_dtoa_r+0xba2>
 800591a:	9b05      	ldr	r3, [sp, #20]
 800591c:	2b02      	cmp	r3, #2
 800591e:	f73f aec9 	bgt.w	80056b4 <_dtoa_r+0x934>
 8005922:	9d00      	ldr	r5, [sp, #0]
 8005924:	4631      	mov	r1, r6
 8005926:	4658      	mov	r0, fp
 8005928:	f7ff f99e 	bl	8004c68 <quorem>
 800592c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005930:	f805 3b01 	strb.w	r3, [r5], #1
 8005934:	9a00      	ldr	r2, [sp, #0]
 8005936:	1aaa      	subs	r2, r5, r2
 8005938:	4591      	cmp	r9, r2
 800593a:	ddba      	ble.n	80058b2 <_dtoa_r+0xb32>
 800593c:	4659      	mov	r1, fp
 800593e:	2300      	movs	r3, #0
 8005940:	220a      	movs	r2, #10
 8005942:	4620      	mov	r0, r4
 8005944:	f000 faa4 	bl	8005e90 <__multadd>
 8005948:	4683      	mov	fp, r0
 800594a:	e7eb      	b.n	8005924 <_dtoa_r+0xba4>
 800594c:	08006d4b 	.word	0x08006d4b
 8005950:	08006ca4 	.word	0x08006ca4
 8005954:	08006cc8 	.word	0x08006cc8

08005958 <__sflush_r>:
 8005958:	898a      	ldrh	r2, [r1, #12]
 800595a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595e:	4605      	mov	r5, r0
 8005960:	0710      	lsls	r0, r2, #28
 8005962:	460c      	mov	r4, r1
 8005964:	d458      	bmi.n	8005a18 <__sflush_r+0xc0>
 8005966:	684b      	ldr	r3, [r1, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	dc05      	bgt.n	8005978 <__sflush_r+0x20>
 800596c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	dc02      	bgt.n	8005978 <__sflush_r+0x20>
 8005972:	2000      	movs	r0, #0
 8005974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800597a:	2e00      	cmp	r6, #0
 800597c:	d0f9      	beq.n	8005972 <__sflush_r+0x1a>
 800597e:	2300      	movs	r3, #0
 8005980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005984:	682f      	ldr	r7, [r5, #0]
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	d032      	beq.n	80059f0 <__sflush_r+0x98>
 800598a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	075a      	lsls	r2, r3, #29
 8005990:	d505      	bpl.n	800599e <__sflush_r+0x46>
 8005992:	6863      	ldr	r3, [r4, #4]
 8005994:	1ac0      	subs	r0, r0, r3
 8005996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005998:	b10b      	cbz	r3, 800599e <__sflush_r+0x46>
 800599a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800599c:	1ac0      	subs	r0, r0, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	4602      	mov	r2, r0
 80059a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059a4:	6a21      	ldr	r1, [r4, #32]
 80059a6:	4628      	mov	r0, r5
 80059a8:	47b0      	blx	r6
 80059aa:	1c43      	adds	r3, r0, #1
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	d106      	bne.n	80059be <__sflush_r+0x66>
 80059b0:	6829      	ldr	r1, [r5, #0]
 80059b2:	291d      	cmp	r1, #29
 80059b4:	d82c      	bhi.n	8005a10 <__sflush_r+0xb8>
 80059b6:	4a2a      	ldr	r2, [pc, #168]	; (8005a60 <__sflush_r+0x108>)
 80059b8:	40ca      	lsrs	r2, r1
 80059ba:	07d6      	lsls	r6, r2, #31
 80059bc:	d528      	bpl.n	8005a10 <__sflush_r+0xb8>
 80059be:	2200      	movs	r2, #0
 80059c0:	6062      	str	r2, [r4, #4]
 80059c2:	04d9      	lsls	r1, r3, #19
 80059c4:	6922      	ldr	r2, [r4, #16]
 80059c6:	6022      	str	r2, [r4, #0]
 80059c8:	d504      	bpl.n	80059d4 <__sflush_r+0x7c>
 80059ca:	1c42      	adds	r2, r0, #1
 80059cc:	d101      	bne.n	80059d2 <__sflush_r+0x7a>
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	b903      	cbnz	r3, 80059d4 <__sflush_r+0x7c>
 80059d2:	6560      	str	r0, [r4, #84]	; 0x54
 80059d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d6:	602f      	str	r7, [r5, #0]
 80059d8:	2900      	cmp	r1, #0
 80059da:	d0ca      	beq.n	8005972 <__sflush_r+0x1a>
 80059dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059e0:	4299      	cmp	r1, r3
 80059e2:	d002      	beq.n	80059ea <__sflush_r+0x92>
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 fd7f 	bl	80064e8 <_free_r>
 80059ea:	2000      	movs	r0, #0
 80059ec:	6360      	str	r0, [r4, #52]	; 0x34
 80059ee:	e7c1      	b.n	8005974 <__sflush_r+0x1c>
 80059f0:	6a21      	ldr	r1, [r4, #32]
 80059f2:	2301      	movs	r3, #1
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b0      	blx	r6
 80059f8:	1c41      	adds	r1, r0, #1
 80059fa:	d1c7      	bne.n	800598c <__sflush_r+0x34>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0c4      	beq.n	800598c <__sflush_r+0x34>
 8005a02:	2b1d      	cmp	r3, #29
 8005a04:	d001      	beq.n	8005a0a <__sflush_r+0xb2>
 8005a06:	2b16      	cmp	r3, #22
 8005a08:	d101      	bne.n	8005a0e <__sflush_r+0xb6>
 8005a0a:	602f      	str	r7, [r5, #0]
 8005a0c:	e7b1      	b.n	8005972 <__sflush_r+0x1a>
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	e7ad      	b.n	8005974 <__sflush_r+0x1c>
 8005a18:	690f      	ldr	r7, [r1, #16]
 8005a1a:	2f00      	cmp	r7, #0
 8005a1c:	d0a9      	beq.n	8005972 <__sflush_r+0x1a>
 8005a1e:	0793      	lsls	r3, r2, #30
 8005a20:	680e      	ldr	r6, [r1, #0]
 8005a22:	bf08      	it	eq
 8005a24:	694b      	ldreq	r3, [r1, #20]
 8005a26:	600f      	str	r7, [r1, #0]
 8005a28:	bf18      	it	ne
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	eba6 0807 	sub.w	r8, r6, r7
 8005a30:	608b      	str	r3, [r1, #8]
 8005a32:	f1b8 0f00 	cmp.w	r8, #0
 8005a36:	dd9c      	ble.n	8005972 <__sflush_r+0x1a>
 8005a38:	6a21      	ldr	r1, [r4, #32]
 8005a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a3c:	4643      	mov	r3, r8
 8005a3e:	463a      	mov	r2, r7
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b0      	blx	r6
 8005a44:	2800      	cmp	r0, #0
 8005a46:	dc06      	bgt.n	8005a56 <__sflush_r+0xfe>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4e:	81a3      	strh	r3, [r4, #12]
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	e78e      	b.n	8005974 <__sflush_r+0x1c>
 8005a56:	4407      	add	r7, r0
 8005a58:	eba8 0800 	sub.w	r8, r8, r0
 8005a5c:	e7e9      	b.n	8005a32 <__sflush_r+0xda>
 8005a5e:	bf00      	nop
 8005a60:	20400001 	.word	0x20400001

08005a64 <_fflush_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	690b      	ldr	r3, [r1, #16]
 8005a68:	4605      	mov	r5, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	b913      	cbnz	r3, 8005a74 <_fflush_r+0x10>
 8005a6e:	2500      	movs	r5, #0
 8005a70:	4628      	mov	r0, r5
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	b118      	cbz	r0, 8005a7e <_fflush_r+0x1a>
 8005a76:	6983      	ldr	r3, [r0, #24]
 8005a78:	b90b      	cbnz	r3, 8005a7e <_fflush_r+0x1a>
 8005a7a:	f000 f887 	bl	8005b8c <__sinit>
 8005a7e:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <_fflush_r+0x6c>)
 8005a80:	429c      	cmp	r4, r3
 8005a82:	d11b      	bne.n	8005abc <_fflush_r+0x58>
 8005a84:	686c      	ldr	r4, [r5, #4]
 8005a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0ef      	beq.n	8005a6e <_fflush_r+0xa>
 8005a8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a90:	07d0      	lsls	r0, r2, #31
 8005a92:	d404      	bmi.n	8005a9e <_fflush_r+0x3a>
 8005a94:	0599      	lsls	r1, r3, #22
 8005a96:	d402      	bmi.n	8005a9e <_fflush_r+0x3a>
 8005a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a9a:	f000 f91a 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	f7ff ff59 	bl	8005958 <__sflush_r>
 8005aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aa8:	07da      	lsls	r2, r3, #31
 8005aaa:	4605      	mov	r5, r0
 8005aac:	d4e0      	bmi.n	8005a70 <_fflush_r+0xc>
 8005aae:	89a3      	ldrh	r3, [r4, #12]
 8005ab0:	059b      	lsls	r3, r3, #22
 8005ab2:	d4dd      	bmi.n	8005a70 <_fflush_r+0xc>
 8005ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ab6:	f000 f90d 	bl	8005cd4 <__retarget_lock_release_recursive>
 8005aba:	e7d9      	b.n	8005a70 <_fflush_r+0xc>
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <_fflush_r+0x70>)
 8005abe:	429c      	cmp	r4, r3
 8005ac0:	d101      	bne.n	8005ac6 <_fflush_r+0x62>
 8005ac2:	68ac      	ldr	r4, [r5, #8]
 8005ac4:	e7df      	b.n	8005a86 <_fflush_r+0x22>
 8005ac6:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <_fflush_r+0x74>)
 8005ac8:	429c      	cmp	r4, r3
 8005aca:	bf08      	it	eq
 8005acc:	68ec      	ldreq	r4, [r5, #12]
 8005ace:	e7da      	b.n	8005a86 <_fflush_r+0x22>
 8005ad0:	08006d7c 	.word	0x08006d7c
 8005ad4:	08006d9c 	.word	0x08006d9c
 8005ad8:	08006d5c 	.word	0x08006d5c

08005adc <std>:
 8005adc:	2300      	movs	r3, #0
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aea:	6083      	str	r3, [r0, #8]
 8005aec:	8181      	strh	r1, [r0, #12]
 8005aee:	6643      	str	r3, [r0, #100]	; 0x64
 8005af0:	81c2      	strh	r2, [r0, #14]
 8005af2:	6183      	str	r3, [r0, #24]
 8005af4:	4619      	mov	r1, r3
 8005af6:	2208      	movs	r2, #8
 8005af8:	305c      	adds	r0, #92	; 0x5c
 8005afa:	f7fe faf5 	bl	80040e8 <memset>
 8005afe:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <std+0x38>)
 8005b00:	6263      	str	r3, [r4, #36]	; 0x24
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <std+0x3c>)
 8005b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <std+0x40>)
 8005b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <std+0x44>)
 8005b0c:	6224      	str	r4, [r4, #32]
 8005b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b10:	bd10      	pop	{r4, pc}
 8005b12:	bf00      	nop
 8005b14:	08006911 	.word	0x08006911
 8005b18:	08006933 	.word	0x08006933
 8005b1c:	0800696b 	.word	0x0800696b
 8005b20:	0800698f 	.word	0x0800698f

08005b24 <_cleanup_r>:
 8005b24:	4901      	ldr	r1, [pc, #4]	; (8005b2c <_cleanup_r+0x8>)
 8005b26:	f000 b8af 	b.w	8005c88 <_fwalk_reent>
 8005b2a:	bf00      	nop
 8005b2c:	08005a65 	.word	0x08005a65

08005b30 <__sfmoreglue>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	1e4a      	subs	r2, r1, #1
 8005b34:	2568      	movs	r5, #104	; 0x68
 8005b36:	4355      	muls	r5, r2
 8005b38:	460e      	mov	r6, r1
 8005b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b3e:	f000 fd23 	bl	8006588 <_malloc_r>
 8005b42:	4604      	mov	r4, r0
 8005b44:	b140      	cbz	r0, 8005b58 <__sfmoreglue+0x28>
 8005b46:	2100      	movs	r1, #0
 8005b48:	e9c0 1600 	strd	r1, r6, [r0]
 8005b4c:	300c      	adds	r0, #12
 8005b4e:	60a0      	str	r0, [r4, #8]
 8005b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b54:	f7fe fac8 	bl	80040e8 <memset>
 8005b58:	4620      	mov	r0, r4
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}

08005b5c <__sfp_lock_acquire>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <__sfp_lock_acquire+0x8>)
 8005b5e:	f000 b8b8 	b.w	8005cd2 <__retarget_lock_acquire_recursive>
 8005b62:	bf00      	nop
 8005b64:	200002e0 	.word	0x200002e0

08005b68 <__sfp_lock_release>:
 8005b68:	4801      	ldr	r0, [pc, #4]	; (8005b70 <__sfp_lock_release+0x8>)
 8005b6a:	f000 b8b3 	b.w	8005cd4 <__retarget_lock_release_recursive>
 8005b6e:	bf00      	nop
 8005b70:	200002e0 	.word	0x200002e0

08005b74 <__sinit_lock_acquire>:
 8005b74:	4801      	ldr	r0, [pc, #4]	; (8005b7c <__sinit_lock_acquire+0x8>)
 8005b76:	f000 b8ac 	b.w	8005cd2 <__retarget_lock_acquire_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	200002db 	.word	0x200002db

08005b80 <__sinit_lock_release>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__sinit_lock_release+0x8>)
 8005b82:	f000 b8a7 	b.w	8005cd4 <__retarget_lock_release_recursive>
 8005b86:	bf00      	nop
 8005b88:	200002db 	.word	0x200002db

08005b8c <__sinit>:
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	4604      	mov	r4, r0
 8005b90:	f7ff fff0 	bl	8005b74 <__sinit_lock_acquire>
 8005b94:	69a3      	ldr	r3, [r4, #24]
 8005b96:	b11b      	cbz	r3, 8005ba0 <__sinit+0x14>
 8005b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b9c:	f7ff bff0 	b.w	8005b80 <__sinit_lock_release>
 8005ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <__sinit+0x68>)
 8005ba8:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <__sinit+0x6c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bae:	42a3      	cmp	r3, r4
 8005bb0:	bf04      	itt	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	61a3      	streq	r3, [r4, #24]
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f000 f820 	bl	8005bfc <__sfp>
 8005bbc:	6060      	str	r0, [r4, #4]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 f81c 	bl	8005bfc <__sfp>
 8005bc4:	60a0      	str	r0, [r4, #8]
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f000 f818 	bl	8005bfc <__sfp>
 8005bcc:	2200      	movs	r2, #0
 8005bce:	60e0      	str	r0, [r4, #12]
 8005bd0:	2104      	movs	r1, #4
 8005bd2:	6860      	ldr	r0, [r4, #4]
 8005bd4:	f7ff ff82 	bl	8005adc <std>
 8005bd8:	68a0      	ldr	r0, [r4, #8]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	2109      	movs	r1, #9
 8005bde:	f7ff ff7d 	bl	8005adc <std>
 8005be2:	68e0      	ldr	r0, [r4, #12]
 8005be4:	2202      	movs	r2, #2
 8005be6:	2112      	movs	r1, #18
 8005be8:	f7ff ff78 	bl	8005adc <std>
 8005bec:	2301      	movs	r3, #1
 8005bee:	61a3      	str	r3, [r4, #24]
 8005bf0:	e7d2      	b.n	8005b98 <__sinit+0xc>
 8005bf2:	bf00      	nop
 8005bf4:	08006c90 	.word	0x08006c90
 8005bf8:	08005b25 	.word	0x08005b25

08005bfc <__sfp>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	4607      	mov	r7, r0
 8005c00:	f7ff ffac 	bl	8005b5c <__sfp_lock_acquire>
 8005c04:	4b1e      	ldr	r3, [pc, #120]	; (8005c80 <__sfp+0x84>)
 8005c06:	681e      	ldr	r6, [r3, #0]
 8005c08:	69b3      	ldr	r3, [r6, #24]
 8005c0a:	b913      	cbnz	r3, 8005c12 <__sfp+0x16>
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff ffbd 	bl	8005b8c <__sinit>
 8005c12:	3648      	adds	r6, #72	; 0x48
 8005c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	d503      	bpl.n	8005c24 <__sfp+0x28>
 8005c1c:	6833      	ldr	r3, [r6, #0]
 8005c1e:	b30b      	cbz	r3, 8005c64 <__sfp+0x68>
 8005c20:	6836      	ldr	r6, [r6, #0]
 8005c22:	e7f7      	b.n	8005c14 <__sfp+0x18>
 8005c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c28:	b9d5      	cbnz	r5, 8005c60 <__sfp+0x64>
 8005c2a:	4b16      	ldr	r3, [pc, #88]	; (8005c84 <__sfp+0x88>)
 8005c2c:	60e3      	str	r3, [r4, #12]
 8005c2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c32:	6665      	str	r5, [r4, #100]	; 0x64
 8005c34:	f000 f84c 	bl	8005cd0 <__retarget_lock_init_recursive>
 8005c38:	f7ff ff96 	bl	8005b68 <__sfp_lock_release>
 8005c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c44:	6025      	str	r5, [r4, #0]
 8005c46:	61a5      	str	r5, [r4, #24]
 8005c48:	2208      	movs	r2, #8
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c50:	f7fe fa4a 	bl	80040e8 <memset>
 8005c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c60:	3468      	adds	r4, #104	; 0x68
 8005c62:	e7d9      	b.n	8005c18 <__sfp+0x1c>
 8005c64:	2104      	movs	r1, #4
 8005c66:	4638      	mov	r0, r7
 8005c68:	f7ff ff62 	bl	8005b30 <__sfmoreglue>
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	6030      	str	r0, [r6, #0]
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d1d5      	bne.n	8005c20 <__sfp+0x24>
 8005c74:	f7ff ff78 	bl	8005b68 <__sfp_lock_release>
 8005c78:	230c      	movs	r3, #12
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	e7ee      	b.n	8005c5c <__sfp+0x60>
 8005c7e:	bf00      	nop
 8005c80:	08006c90 	.word	0x08006c90
 8005c84:	ffff0001 	.word	0xffff0001

08005c88 <_fwalk_reent>:
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	4688      	mov	r8, r1
 8005c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c94:	2700      	movs	r7, #0
 8005c96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8005c9e:	d505      	bpl.n	8005cac <_fwalk_reent+0x24>
 8005ca0:	6824      	ldr	r4, [r4, #0]
 8005ca2:	2c00      	cmp	r4, #0
 8005ca4:	d1f7      	bne.n	8005c96 <_fwalk_reent+0xe>
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cac:	89ab      	ldrh	r3, [r5, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d907      	bls.n	8005cc2 <_fwalk_reent+0x3a>
 8005cb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	d003      	beq.n	8005cc2 <_fwalk_reent+0x3a>
 8005cba:	4629      	mov	r1, r5
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	47c0      	blx	r8
 8005cc0:	4307      	orrs	r7, r0
 8005cc2:	3568      	adds	r5, #104	; 0x68
 8005cc4:	e7e9      	b.n	8005c9a <_fwalk_reent+0x12>
	...

08005cc8 <_localeconv_r>:
 8005cc8:	4800      	ldr	r0, [pc, #0]	; (8005ccc <_localeconv_r+0x4>)
 8005cca:	4770      	bx	lr
 8005ccc:	20000160 	.word	0x20000160

08005cd0 <__retarget_lock_init_recursive>:
 8005cd0:	4770      	bx	lr

08005cd2 <__retarget_lock_acquire_recursive>:
 8005cd2:	4770      	bx	lr

08005cd4 <__retarget_lock_release_recursive>:
 8005cd4:	4770      	bx	lr

08005cd6 <__swhatbuf_r>:
 8005cd6:	b570      	push	{r4, r5, r6, lr}
 8005cd8:	460e      	mov	r6, r1
 8005cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cde:	2900      	cmp	r1, #0
 8005ce0:	b096      	sub	sp, #88	; 0x58
 8005ce2:	4614      	mov	r4, r2
 8005ce4:	461d      	mov	r5, r3
 8005ce6:	da07      	bge.n	8005cf8 <__swhatbuf_r+0x22>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	89b3      	ldrh	r3, [r6, #12]
 8005cee:	061a      	lsls	r2, r3, #24
 8005cf0:	d410      	bmi.n	8005d14 <__swhatbuf_r+0x3e>
 8005cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf6:	e00e      	b.n	8005d16 <__swhatbuf_r+0x40>
 8005cf8:	466a      	mov	r2, sp
 8005cfa:	f000 fe9f 	bl	8006a3c <_fstat_r>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	dbf2      	blt.n	8005ce8 <__swhatbuf_r+0x12>
 8005d02:	9a01      	ldr	r2, [sp, #4]
 8005d04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d0c:	425a      	negs	r2, r3
 8005d0e:	415a      	adcs	r2, r3
 8005d10:	602a      	str	r2, [r5, #0]
 8005d12:	e7ee      	b.n	8005cf2 <__swhatbuf_r+0x1c>
 8005d14:	2340      	movs	r3, #64	; 0x40
 8005d16:	2000      	movs	r0, #0
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	b016      	add	sp, #88	; 0x58
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d20 <__smakebuf_r>:
 8005d20:	898b      	ldrh	r3, [r1, #12]
 8005d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d24:	079d      	lsls	r5, r3, #30
 8005d26:	4606      	mov	r6, r0
 8005d28:	460c      	mov	r4, r1
 8005d2a:	d507      	bpl.n	8005d3c <__smakebuf_r+0x1c>
 8005d2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	6123      	str	r3, [r4, #16]
 8005d34:	2301      	movs	r3, #1
 8005d36:	6163      	str	r3, [r4, #20]
 8005d38:	b002      	add	sp, #8
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	ab01      	add	r3, sp, #4
 8005d3e:	466a      	mov	r2, sp
 8005d40:	f7ff ffc9 	bl	8005cd6 <__swhatbuf_r>
 8005d44:	9900      	ldr	r1, [sp, #0]
 8005d46:	4605      	mov	r5, r0
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f000 fc1d 	bl	8006588 <_malloc_r>
 8005d4e:	b948      	cbnz	r0, 8005d64 <__smakebuf_r+0x44>
 8005d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d54:	059a      	lsls	r2, r3, #22
 8005d56:	d4ef      	bmi.n	8005d38 <__smakebuf_r+0x18>
 8005d58:	f023 0303 	bic.w	r3, r3, #3
 8005d5c:	f043 0302 	orr.w	r3, r3, #2
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	e7e3      	b.n	8005d2c <__smakebuf_r+0xc>
 8005d64:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <__smakebuf_r+0x7c>)
 8005d66:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	6020      	str	r0, [r4, #0]
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d70:	81a3      	strh	r3, [r4, #12]
 8005d72:	9b00      	ldr	r3, [sp, #0]
 8005d74:	6163      	str	r3, [r4, #20]
 8005d76:	9b01      	ldr	r3, [sp, #4]
 8005d78:	6120      	str	r0, [r4, #16]
 8005d7a:	b15b      	cbz	r3, 8005d94 <__smakebuf_r+0x74>
 8005d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d80:	4630      	mov	r0, r6
 8005d82:	f000 fe6d 	bl	8006a60 <_isatty_r>
 8005d86:	b128      	cbz	r0, 8005d94 <__smakebuf_r+0x74>
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	89a0      	ldrh	r0, [r4, #12]
 8005d96:	4305      	orrs	r5, r0
 8005d98:	81a5      	strh	r5, [r4, #12]
 8005d9a:	e7cd      	b.n	8005d38 <__smakebuf_r+0x18>
 8005d9c:	08005b25 	.word	0x08005b25

08005da0 <malloc>:
 8005da0:	4b02      	ldr	r3, [pc, #8]	; (8005dac <malloc+0xc>)
 8005da2:	4601      	mov	r1, r0
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	f000 bbef 	b.w	8006588 <_malloc_r>
 8005daa:	bf00      	nop
 8005dac:	2000000c 	.word	0x2000000c

08005db0 <memcpy>:
 8005db0:	440a      	add	r2, r1
 8005db2:	4291      	cmp	r1, r2
 8005db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005db8:	d100      	bne.n	8005dbc <memcpy+0xc>
 8005dba:	4770      	bx	lr
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dc6:	4291      	cmp	r1, r2
 8005dc8:	d1f9      	bne.n	8005dbe <memcpy+0xe>
 8005dca:	bd10      	pop	{r4, pc}

08005dcc <_Balloc>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	b976      	cbnz	r6, 8005df4 <_Balloc+0x28>
 8005dd6:	2010      	movs	r0, #16
 8005dd8:	f7ff ffe2 	bl	8005da0 <malloc>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6260      	str	r0, [r4, #36]	; 0x24
 8005de0:	b920      	cbnz	r0, 8005dec <_Balloc+0x20>
 8005de2:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <_Balloc+0x78>)
 8005de4:	4818      	ldr	r0, [pc, #96]	; (8005e48 <_Balloc+0x7c>)
 8005de6:	2166      	movs	r1, #102	; 0x66
 8005de8:	f000 fde8 	bl	80069bc <__assert_func>
 8005dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005df0:	6006      	str	r6, [r0, #0]
 8005df2:	60c6      	str	r6, [r0, #12]
 8005df4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005df6:	68f3      	ldr	r3, [r6, #12]
 8005df8:	b183      	cbz	r3, 8005e1c <_Balloc+0x50>
 8005dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e02:	b9b8      	cbnz	r0, 8005e34 <_Balloc+0x68>
 8005e04:	2101      	movs	r1, #1
 8005e06:	fa01 f605 	lsl.w	r6, r1, r5
 8005e0a:	1d72      	adds	r2, r6, #5
 8005e0c:	0092      	lsls	r2, r2, #2
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 fb5a 	bl	80064c8 <_calloc_r>
 8005e14:	b160      	cbz	r0, 8005e30 <_Balloc+0x64>
 8005e16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e1a:	e00e      	b.n	8005e3a <_Balloc+0x6e>
 8005e1c:	2221      	movs	r2, #33	; 0x21
 8005e1e:	2104      	movs	r1, #4
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 fb51 	bl	80064c8 <_calloc_r>
 8005e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e28:	60f0      	str	r0, [r6, #12]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e4      	bne.n	8005dfa <_Balloc+0x2e>
 8005e30:	2000      	movs	r0, #0
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	6802      	ldr	r2, [r0, #0]
 8005e36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e40:	e7f7      	b.n	8005e32 <_Balloc+0x66>
 8005e42:	bf00      	nop
 8005e44:	08006cd5 	.word	0x08006cd5
 8005e48:	08006dbc 	.word	0x08006dbc

08005e4c <_Bfree>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e50:	4605      	mov	r5, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	b976      	cbnz	r6, 8005e74 <_Bfree+0x28>
 8005e56:	2010      	movs	r0, #16
 8005e58:	f7ff ffa2 	bl	8005da0 <malloc>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	6268      	str	r0, [r5, #36]	; 0x24
 8005e60:	b920      	cbnz	r0, 8005e6c <_Bfree+0x20>
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <_Bfree+0x3c>)
 8005e64:	4809      	ldr	r0, [pc, #36]	; (8005e8c <_Bfree+0x40>)
 8005e66:	218a      	movs	r1, #138	; 0x8a
 8005e68:	f000 fda8 	bl	80069bc <__assert_func>
 8005e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e70:	6006      	str	r6, [r0, #0]
 8005e72:	60c6      	str	r6, [r0, #12]
 8005e74:	b13c      	cbz	r4, 8005e86 <_Bfree+0x3a>
 8005e76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e78:	6862      	ldr	r2, [r4, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e80:	6021      	str	r1, [r4, #0]
 8005e82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	08006cd5 	.word	0x08006cd5
 8005e8c:	08006dbc 	.word	0x08006dbc

08005e90 <__multadd>:
 8005e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e94:	690e      	ldr	r6, [r1, #16]
 8005e96:	4607      	mov	r7, r0
 8005e98:	4698      	mov	r8, r3
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	f101 0014 	add.w	r0, r1, #20
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6805      	ldr	r5, [r0, #0]
 8005ea4:	b2a9      	uxth	r1, r5
 8005ea6:	fb02 8101 	mla	r1, r2, r1, r8
 8005eaa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005eae:	0c2d      	lsrs	r5, r5, #16
 8005eb0:	fb02 c505 	mla	r5, r2, r5, ip
 8005eb4:	b289      	uxth	r1, r1
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005ebc:	429e      	cmp	r6, r3
 8005ebe:	f840 1b04 	str.w	r1, [r0], #4
 8005ec2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005ec6:	dcec      	bgt.n	8005ea2 <__multadd+0x12>
 8005ec8:	f1b8 0f00 	cmp.w	r8, #0
 8005ecc:	d022      	beq.n	8005f14 <__multadd+0x84>
 8005ece:	68a3      	ldr	r3, [r4, #8]
 8005ed0:	42b3      	cmp	r3, r6
 8005ed2:	dc19      	bgt.n	8005f08 <__multadd+0x78>
 8005ed4:	6861      	ldr	r1, [r4, #4]
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	3101      	adds	r1, #1
 8005eda:	f7ff ff77 	bl	8005dcc <_Balloc>
 8005ede:	4605      	mov	r5, r0
 8005ee0:	b928      	cbnz	r0, 8005eee <__multadd+0x5e>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <__multadd+0x8c>)
 8005ee6:	480e      	ldr	r0, [pc, #56]	; (8005f20 <__multadd+0x90>)
 8005ee8:	21b5      	movs	r1, #181	; 0xb5
 8005eea:	f000 fd67 	bl	80069bc <__assert_func>
 8005eee:	6922      	ldr	r2, [r4, #16]
 8005ef0:	3202      	adds	r2, #2
 8005ef2:	f104 010c 	add.w	r1, r4, #12
 8005ef6:	0092      	lsls	r2, r2, #2
 8005ef8:	300c      	adds	r0, #12
 8005efa:	f7ff ff59 	bl	8005db0 <memcpy>
 8005efe:	4621      	mov	r1, r4
 8005f00:	4638      	mov	r0, r7
 8005f02:	f7ff ffa3 	bl	8005e4c <_Bfree>
 8005f06:	462c      	mov	r4, r5
 8005f08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005f12:	6126      	str	r6, [r4, #16]
 8005f14:	4620      	mov	r0, r4
 8005f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f1a:	bf00      	nop
 8005f1c:	08006d4b 	.word	0x08006d4b
 8005f20:	08006dbc 	.word	0x08006dbc

08005f24 <__hi0bits>:
 8005f24:	0c03      	lsrs	r3, r0, #16
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	b9d3      	cbnz	r3, 8005f60 <__hi0bits+0x3c>
 8005f2a:	0400      	lsls	r0, r0, #16
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005f32:	bf04      	itt	eq
 8005f34:	0200      	lsleq	r0, r0, #8
 8005f36:	3308      	addeq	r3, #8
 8005f38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005f3c:	bf04      	itt	eq
 8005f3e:	0100      	lsleq	r0, r0, #4
 8005f40:	3304      	addeq	r3, #4
 8005f42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005f46:	bf04      	itt	eq
 8005f48:	0080      	lsleq	r0, r0, #2
 8005f4a:	3302      	addeq	r3, #2
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	db05      	blt.n	8005f5c <__hi0bits+0x38>
 8005f50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005f54:	f103 0301 	add.w	r3, r3, #1
 8005f58:	bf08      	it	eq
 8005f5a:	2320      	moveq	r3, #32
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	4770      	bx	lr
 8005f60:	2300      	movs	r3, #0
 8005f62:	e7e4      	b.n	8005f2e <__hi0bits+0xa>

08005f64 <__lo0bits>:
 8005f64:	6803      	ldr	r3, [r0, #0]
 8005f66:	f013 0207 	ands.w	r2, r3, #7
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	d00b      	beq.n	8005f86 <__lo0bits+0x22>
 8005f6e:	07da      	lsls	r2, r3, #31
 8005f70:	d424      	bmi.n	8005fbc <__lo0bits+0x58>
 8005f72:	0798      	lsls	r0, r3, #30
 8005f74:	bf49      	itett	mi
 8005f76:	085b      	lsrmi	r3, r3, #1
 8005f78:	089b      	lsrpl	r3, r3, #2
 8005f7a:	2001      	movmi	r0, #1
 8005f7c:	600b      	strmi	r3, [r1, #0]
 8005f7e:	bf5c      	itt	pl
 8005f80:	600b      	strpl	r3, [r1, #0]
 8005f82:	2002      	movpl	r0, #2
 8005f84:	4770      	bx	lr
 8005f86:	b298      	uxth	r0, r3
 8005f88:	b9b0      	cbnz	r0, 8005fb8 <__lo0bits+0x54>
 8005f8a:	0c1b      	lsrs	r3, r3, #16
 8005f8c:	2010      	movs	r0, #16
 8005f8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f92:	bf04      	itt	eq
 8005f94:	0a1b      	lsreq	r3, r3, #8
 8005f96:	3008      	addeq	r0, #8
 8005f98:	071a      	lsls	r2, r3, #28
 8005f9a:	bf04      	itt	eq
 8005f9c:	091b      	lsreq	r3, r3, #4
 8005f9e:	3004      	addeq	r0, #4
 8005fa0:	079a      	lsls	r2, r3, #30
 8005fa2:	bf04      	itt	eq
 8005fa4:	089b      	lsreq	r3, r3, #2
 8005fa6:	3002      	addeq	r0, #2
 8005fa8:	07da      	lsls	r2, r3, #31
 8005faa:	d403      	bmi.n	8005fb4 <__lo0bits+0x50>
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	f100 0001 	add.w	r0, r0, #1
 8005fb2:	d005      	beq.n	8005fc0 <__lo0bits+0x5c>
 8005fb4:	600b      	str	r3, [r1, #0]
 8005fb6:	4770      	bx	lr
 8005fb8:	4610      	mov	r0, r2
 8005fba:	e7e8      	b.n	8005f8e <__lo0bits+0x2a>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	4770      	bx	lr
 8005fc0:	2020      	movs	r0, #32
 8005fc2:	4770      	bx	lr

08005fc4 <__i2b>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	2101      	movs	r1, #1
 8005fca:	f7ff feff 	bl	8005dcc <_Balloc>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	b928      	cbnz	r0, 8005fde <__i2b+0x1a>
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <__i2b+0x24>)
 8005fd4:	4805      	ldr	r0, [pc, #20]	; (8005fec <__i2b+0x28>)
 8005fd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005fda:	f000 fcef 	bl	80069bc <__assert_func>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	6144      	str	r4, [r0, #20]
 8005fe2:	6103      	str	r3, [r0, #16]
 8005fe4:	bd10      	pop	{r4, pc}
 8005fe6:	bf00      	nop
 8005fe8:	08006d4b 	.word	0x08006d4b
 8005fec:	08006dbc 	.word	0x08006dbc

08005ff0 <__multiply>:
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	4614      	mov	r4, r2
 8005ff6:	690a      	ldr	r2, [r1, #16]
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	bfb8      	it	lt
 8005ffe:	460b      	movlt	r3, r1
 8006000:	460d      	mov	r5, r1
 8006002:	bfbc      	itt	lt
 8006004:	4625      	movlt	r5, r4
 8006006:	461c      	movlt	r4, r3
 8006008:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800600c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006010:	68ab      	ldr	r3, [r5, #8]
 8006012:	6869      	ldr	r1, [r5, #4]
 8006014:	eb0a 0709 	add.w	r7, sl, r9
 8006018:	42bb      	cmp	r3, r7
 800601a:	b085      	sub	sp, #20
 800601c:	bfb8      	it	lt
 800601e:	3101      	addlt	r1, #1
 8006020:	f7ff fed4 	bl	8005dcc <_Balloc>
 8006024:	b930      	cbnz	r0, 8006034 <__multiply+0x44>
 8006026:	4602      	mov	r2, r0
 8006028:	4b42      	ldr	r3, [pc, #264]	; (8006134 <__multiply+0x144>)
 800602a:	4843      	ldr	r0, [pc, #268]	; (8006138 <__multiply+0x148>)
 800602c:	f240 115d 	movw	r1, #349	; 0x15d
 8006030:	f000 fcc4 	bl	80069bc <__assert_func>
 8006034:	f100 0614 	add.w	r6, r0, #20
 8006038:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800603c:	4633      	mov	r3, r6
 800603e:	2200      	movs	r2, #0
 8006040:	4543      	cmp	r3, r8
 8006042:	d31e      	bcc.n	8006082 <__multiply+0x92>
 8006044:	f105 0c14 	add.w	ip, r5, #20
 8006048:	f104 0314 	add.w	r3, r4, #20
 800604c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006050:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006054:	9202      	str	r2, [sp, #8]
 8006056:	ebac 0205 	sub.w	r2, ip, r5
 800605a:	3a15      	subs	r2, #21
 800605c:	f022 0203 	bic.w	r2, r2, #3
 8006060:	3204      	adds	r2, #4
 8006062:	f105 0115 	add.w	r1, r5, #21
 8006066:	458c      	cmp	ip, r1
 8006068:	bf38      	it	cc
 800606a:	2204      	movcc	r2, #4
 800606c:	9201      	str	r2, [sp, #4]
 800606e:	9a02      	ldr	r2, [sp, #8]
 8006070:	9303      	str	r3, [sp, #12]
 8006072:	429a      	cmp	r2, r3
 8006074:	d808      	bhi.n	8006088 <__multiply+0x98>
 8006076:	2f00      	cmp	r7, #0
 8006078:	dc55      	bgt.n	8006126 <__multiply+0x136>
 800607a:	6107      	str	r7, [r0, #16]
 800607c:	b005      	add	sp, #20
 800607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006082:	f843 2b04 	str.w	r2, [r3], #4
 8006086:	e7db      	b.n	8006040 <__multiply+0x50>
 8006088:	f8b3 a000 	ldrh.w	sl, [r3]
 800608c:	f1ba 0f00 	cmp.w	sl, #0
 8006090:	d020      	beq.n	80060d4 <__multiply+0xe4>
 8006092:	f105 0e14 	add.w	lr, r5, #20
 8006096:	46b1      	mov	r9, r6
 8006098:	2200      	movs	r2, #0
 800609a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800609e:	f8d9 b000 	ldr.w	fp, [r9]
 80060a2:	b2a1      	uxth	r1, r4
 80060a4:	fa1f fb8b 	uxth.w	fp, fp
 80060a8:	fb0a b101 	mla	r1, sl, r1, fp
 80060ac:	4411      	add	r1, r2
 80060ae:	f8d9 2000 	ldr.w	r2, [r9]
 80060b2:	0c24      	lsrs	r4, r4, #16
 80060b4:	0c12      	lsrs	r2, r2, #16
 80060b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80060ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80060be:	b289      	uxth	r1, r1
 80060c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80060c4:	45f4      	cmp	ip, lr
 80060c6:	f849 1b04 	str.w	r1, [r9], #4
 80060ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80060ce:	d8e4      	bhi.n	800609a <__multiply+0xaa>
 80060d0:	9901      	ldr	r1, [sp, #4]
 80060d2:	5072      	str	r2, [r6, r1]
 80060d4:	9a03      	ldr	r2, [sp, #12]
 80060d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80060da:	3304      	adds	r3, #4
 80060dc:	f1b9 0f00 	cmp.w	r9, #0
 80060e0:	d01f      	beq.n	8006122 <__multiply+0x132>
 80060e2:	6834      	ldr	r4, [r6, #0]
 80060e4:	f105 0114 	add.w	r1, r5, #20
 80060e8:	46b6      	mov	lr, r6
 80060ea:	f04f 0a00 	mov.w	sl, #0
 80060ee:	880a      	ldrh	r2, [r1, #0]
 80060f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80060f4:	fb09 b202 	mla	r2, r9, r2, fp
 80060f8:	4492      	add	sl, r2
 80060fa:	b2a4      	uxth	r4, r4
 80060fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006100:	f84e 4b04 	str.w	r4, [lr], #4
 8006104:	f851 4b04 	ldr.w	r4, [r1], #4
 8006108:	f8be 2000 	ldrh.w	r2, [lr]
 800610c:	0c24      	lsrs	r4, r4, #16
 800610e:	fb09 2404 	mla	r4, r9, r4, r2
 8006112:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006116:	458c      	cmp	ip, r1
 8006118:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800611c:	d8e7      	bhi.n	80060ee <__multiply+0xfe>
 800611e:	9a01      	ldr	r2, [sp, #4]
 8006120:	50b4      	str	r4, [r6, r2]
 8006122:	3604      	adds	r6, #4
 8006124:	e7a3      	b.n	800606e <__multiply+0x7e>
 8006126:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1a5      	bne.n	800607a <__multiply+0x8a>
 800612e:	3f01      	subs	r7, #1
 8006130:	e7a1      	b.n	8006076 <__multiply+0x86>
 8006132:	bf00      	nop
 8006134:	08006d4b 	.word	0x08006d4b
 8006138:	08006dbc 	.word	0x08006dbc

0800613c <__pow5mult>:
 800613c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006140:	4615      	mov	r5, r2
 8006142:	f012 0203 	ands.w	r2, r2, #3
 8006146:	4606      	mov	r6, r0
 8006148:	460f      	mov	r7, r1
 800614a:	d007      	beq.n	800615c <__pow5mult+0x20>
 800614c:	4c25      	ldr	r4, [pc, #148]	; (80061e4 <__pow5mult+0xa8>)
 800614e:	3a01      	subs	r2, #1
 8006150:	2300      	movs	r3, #0
 8006152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006156:	f7ff fe9b 	bl	8005e90 <__multadd>
 800615a:	4607      	mov	r7, r0
 800615c:	10ad      	asrs	r5, r5, #2
 800615e:	d03d      	beq.n	80061dc <__pow5mult+0xa0>
 8006160:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006162:	b97c      	cbnz	r4, 8006184 <__pow5mult+0x48>
 8006164:	2010      	movs	r0, #16
 8006166:	f7ff fe1b 	bl	8005da0 <malloc>
 800616a:	4602      	mov	r2, r0
 800616c:	6270      	str	r0, [r6, #36]	; 0x24
 800616e:	b928      	cbnz	r0, 800617c <__pow5mult+0x40>
 8006170:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <__pow5mult+0xac>)
 8006172:	481e      	ldr	r0, [pc, #120]	; (80061ec <__pow5mult+0xb0>)
 8006174:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006178:	f000 fc20 	bl	80069bc <__assert_func>
 800617c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006180:	6004      	str	r4, [r0, #0]
 8006182:	60c4      	str	r4, [r0, #12]
 8006184:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006188:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800618c:	b94c      	cbnz	r4, 80061a2 <__pow5mult+0x66>
 800618e:	f240 2171 	movw	r1, #625	; 0x271
 8006192:	4630      	mov	r0, r6
 8006194:	f7ff ff16 	bl	8005fc4 <__i2b>
 8006198:	2300      	movs	r3, #0
 800619a:	f8c8 0008 	str.w	r0, [r8, #8]
 800619e:	4604      	mov	r4, r0
 80061a0:	6003      	str	r3, [r0, #0]
 80061a2:	f04f 0900 	mov.w	r9, #0
 80061a6:	07eb      	lsls	r3, r5, #31
 80061a8:	d50a      	bpl.n	80061c0 <__pow5mult+0x84>
 80061aa:	4639      	mov	r1, r7
 80061ac:	4622      	mov	r2, r4
 80061ae:	4630      	mov	r0, r6
 80061b0:	f7ff ff1e 	bl	8005ff0 <__multiply>
 80061b4:	4639      	mov	r1, r7
 80061b6:	4680      	mov	r8, r0
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7ff fe47 	bl	8005e4c <_Bfree>
 80061be:	4647      	mov	r7, r8
 80061c0:	106d      	asrs	r5, r5, #1
 80061c2:	d00b      	beq.n	80061dc <__pow5mult+0xa0>
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	b938      	cbnz	r0, 80061d8 <__pow5mult+0x9c>
 80061c8:	4622      	mov	r2, r4
 80061ca:	4621      	mov	r1, r4
 80061cc:	4630      	mov	r0, r6
 80061ce:	f7ff ff0f 	bl	8005ff0 <__multiply>
 80061d2:	6020      	str	r0, [r4, #0]
 80061d4:	f8c0 9000 	str.w	r9, [r0]
 80061d8:	4604      	mov	r4, r0
 80061da:	e7e4      	b.n	80061a6 <__pow5mult+0x6a>
 80061dc:	4638      	mov	r0, r7
 80061de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061e2:	bf00      	nop
 80061e4:	08006f10 	.word	0x08006f10
 80061e8:	08006cd5 	.word	0x08006cd5
 80061ec:	08006dbc 	.word	0x08006dbc

080061f0 <__lshift>:
 80061f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	460c      	mov	r4, r1
 80061f6:	6849      	ldr	r1, [r1, #4]
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061fe:	68a3      	ldr	r3, [r4, #8]
 8006200:	4607      	mov	r7, r0
 8006202:	4691      	mov	r9, r2
 8006204:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006208:	f108 0601 	add.w	r6, r8, #1
 800620c:	42b3      	cmp	r3, r6
 800620e:	db0b      	blt.n	8006228 <__lshift+0x38>
 8006210:	4638      	mov	r0, r7
 8006212:	f7ff fddb 	bl	8005dcc <_Balloc>
 8006216:	4605      	mov	r5, r0
 8006218:	b948      	cbnz	r0, 800622e <__lshift+0x3e>
 800621a:	4602      	mov	r2, r0
 800621c:	4b28      	ldr	r3, [pc, #160]	; (80062c0 <__lshift+0xd0>)
 800621e:	4829      	ldr	r0, [pc, #164]	; (80062c4 <__lshift+0xd4>)
 8006220:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006224:	f000 fbca 	bl	80069bc <__assert_func>
 8006228:	3101      	adds	r1, #1
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	e7ee      	b.n	800620c <__lshift+0x1c>
 800622e:	2300      	movs	r3, #0
 8006230:	f100 0114 	add.w	r1, r0, #20
 8006234:	f100 0210 	add.w	r2, r0, #16
 8006238:	4618      	mov	r0, r3
 800623a:	4553      	cmp	r3, sl
 800623c:	db33      	blt.n	80062a6 <__lshift+0xb6>
 800623e:	6920      	ldr	r0, [r4, #16]
 8006240:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006244:	f104 0314 	add.w	r3, r4, #20
 8006248:	f019 091f 	ands.w	r9, r9, #31
 800624c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006250:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006254:	d02b      	beq.n	80062ae <__lshift+0xbe>
 8006256:	f1c9 0e20 	rsb	lr, r9, #32
 800625a:	468a      	mov	sl, r1
 800625c:	2200      	movs	r2, #0
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	fa00 f009 	lsl.w	r0, r0, r9
 8006264:	4302      	orrs	r2, r0
 8006266:	f84a 2b04 	str.w	r2, [sl], #4
 800626a:	f853 2b04 	ldr.w	r2, [r3], #4
 800626e:	459c      	cmp	ip, r3
 8006270:	fa22 f20e 	lsr.w	r2, r2, lr
 8006274:	d8f3      	bhi.n	800625e <__lshift+0x6e>
 8006276:	ebac 0304 	sub.w	r3, ip, r4
 800627a:	3b15      	subs	r3, #21
 800627c:	f023 0303 	bic.w	r3, r3, #3
 8006280:	3304      	adds	r3, #4
 8006282:	f104 0015 	add.w	r0, r4, #21
 8006286:	4584      	cmp	ip, r0
 8006288:	bf38      	it	cc
 800628a:	2304      	movcc	r3, #4
 800628c:	50ca      	str	r2, [r1, r3]
 800628e:	b10a      	cbz	r2, 8006294 <__lshift+0xa4>
 8006290:	f108 0602 	add.w	r6, r8, #2
 8006294:	3e01      	subs	r6, #1
 8006296:	4638      	mov	r0, r7
 8006298:	612e      	str	r6, [r5, #16]
 800629a:	4621      	mov	r1, r4
 800629c:	f7ff fdd6 	bl	8005e4c <_Bfree>
 80062a0:	4628      	mov	r0, r5
 80062a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80062aa:	3301      	adds	r3, #1
 80062ac:	e7c5      	b.n	800623a <__lshift+0x4a>
 80062ae:	3904      	subs	r1, #4
 80062b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80062b8:	459c      	cmp	ip, r3
 80062ba:	d8f9      	bhi.n	80062b0 <__lshift+0xc0>
 80062bc:	e7ea      	b.n	8006294 <__lshift+0xa4>
 80062be:	bf00      	nop
 80062c0:	08006d4b 	.word	0x08006d4b
 80062c4:	08006dbc 	.word	0x08006dbc

080062c8 <__mcmp>:
 80062c8:	b530      	push	{r4, r5, lr}
 80062ca:	6902      	ldr	r2, [r0, #16]
 80062cc:	690c      	ldr	r4, [r1, #16]
 80062ce:	1b12      	subs	r2, r2, r4
 80062d0:	d10e      	bne.n	80062f0 <__mcmp+0x28>
 80062d2:	f100 0314 	add.w	r3, r0, #20
 80062d6:	3114      	adds	r1, #20
 80062d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80062dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80062e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80062e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80062e8:	42a5      	cmp	r5, r4
 80062ea:	d003      	beq.n	80062f4 <__mcmp+0x2c>
 80062ec:	d305      	bcc.n	80062fa <__mcmp+0x32>
 80062ee:	2201      	movs	r2, #1
 80062f0:	4610      	mov	r0, r2
 80062f2:	bd30      	pop	{r4, r5, pc}
 80062f4:	4283      	cmp	r3, r0
 80062f6:	d3f3      	bcc.n	80062e0 <__mcmp+0x18>
 80062f8:	e7fa      	b.n	80062f0 <__mcmp+0x28>
 80062fa:	f04f 32ff 	mov.w	r2, #4294967295
 80062fe:	e7f7      	b.n	80062f0 <__mcmp+0x28>

08006300 <__mdiff>:
 8006300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	460c      	mov	r4, r1
 8006306:	4606      	mov	r6, r0
 8006308:	4611      	mov	r1, r2
 800630a:	4620      	mov	r0, r4
 800630c:	4617      	mov	r7, r2
 800630e:	f7ff ffdb 	bl	80062c8 <__mcmp>
 8006312:	1e05      	subs	r5, r0, #0
 8006314:	d110      	bne.n	8006338 <__mdiff+0x38>
 8006316:	4629      	mov	r1, r5
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff fd57 	bl	8005dcc <_Balloc>
 800631e:	b930      	cbnz	r0, 800632e <__mdiff+0x2e>
 8006320:	4b39      	ldr	r3, [pc, #228]	; (8006408 <__mdiff+0x108>)
 8006322:	4602      	mov	r2, r0
 8006324:	f240 2132 	movw	r1, #562	; 0x232
 8006328:	4838      	ldr	r0, [pc, #224]	; (800640c <__mdiff+0x10c>)
 800632a:	f000 fb47 	bl	80069bc <__assert_func>
 800632e:	2301      	movs	r3, #1
 8006330:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006338:	bfa4      	itt	ge
 800633a:	463b      	movge	r3, r7
 800633c:	4627      	movge	r7, r4
 800633e:	4630      	mov	r0, r6
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	bfa6      	itte	ge
 8006344:	461c      	movge	r4, r3
 8006346:	2500      	movge	r5, #0
 8006348:	2501      	movlt	r5, #1
 800634a:	f7ff fd3f 	bl	8005dcc <_Balloc>
 800634e:	b920      	cbnz	r0, 800635a <__mdiff+0x5a>
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <__mdiff+0x108>)
 8006352:	4602      	mov	r2, r0
 8006354:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006358:	e7e6      	b.n	8006328 <__mdiff+0x28>
 800635a:	693e      	ldr	r6, [r7, #16]
 800635c:	60c5      	str	r5, [r0, #12]
 800635e:	6925      	ldr	r5, [r4, #16]
 8006360:	f107 0114 	add.w	r1, r7, #20
 8006364:	f104 0914 	add.w	r9, r4, #20
 8006368:	f100 0e14 	add.w	lr, r0, #20
 800636c:	f107 0210 	add.w	r2, r7, #16
 8006370:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006374:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006378:	46f2      	mov	sl, lr
 800637a:	2700      	movs	r7, #0
 800637c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006380:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006384:	fa1f f883 	uxth.w	r8, r3
 8006388:	fa17 f78b 	uxtah	r7, r7, fp
 800638c:	0c1b      	lsrs	r3, r3, #16
 800638e:	eba7 0808 	sub.w	r8, r7, r8
 8006392:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006396:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800639a:	fa1f f888 	uxth.w	r8, r8
 800639e:	141f      	asrs	r7, r3, #16
 80063a0:	454d      	cmp	r5, r9
 80063a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80063a6:	f84a 3b04 	str.w	r3, [sl], #4
 80063aa:	d8e7      	bhi.n	800637c <__mdiff+0x7c>
 80063ac:	1b2b      	subs	r3, r5, r4
 80063ae:	3b15      	subs	r3, #21
 80063b0:	f023 0303 	bic.w	r3, r3, #3
 80063b4:	3304      	adds	r3, #4
 80063b6:	3415      	adds	r4, #21
 80063b8:	42a5      	cmp	r5, r4
 80063ba:	bf38      	it	cc
 80063bc:	2304      	movcc	r3, #4
 80063be:	4419      	add	r1, r3
 80063c0:	4473      	add	r3, lr
 80063c2:	469e      	mov	lr, r3
 80063c4:	460d      	mov	r5, r1
 80063c6:	4565      	cmp	r5, ip
 80063c8:	d30e      	bcc.n	80063e8 <__mdiff+0xe8>
 80063ca:	f10c 0203 	add.w	r2, ip, #3
 80063ce:	1a52      	subs	r2, r2, r1
 80063d0:	f022 0203 	bic.w	r2, r2, #3
 80063d4:	3903      	subs	r1, #3
 80063d6:	458c      	cmp	ip, r1
 80063d8:	bf38      	it	cc
 80063da:	2200      	movcc	r2, #0
 80063dc:	441a      	add	r2, r3
 80063de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80063e2:	b17b      	cbz	r3, 8006404 <__mdiff+0x104>
 80063e4:	6106      	str	r6, [r0, #16]
 80063e6:	e7a5      	b.n	8006334 <__mdiff+0x34>
 80063e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80063ec:	fa17 f488 	uxtah	r4, r7, r8
 80063f0:	1422      	asrs	r2, r4, #16
 80063f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80063f6:	b2a4      	uxth	r4, r4
 80063f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80063fc:	f84e 4b04 	str.w	r4, [lr], #4
 8006400:	1417      	asrs	r7, r2, #16
 8006402:	e7e0      	b.n	80063c6 <__mdiff+0xc6>
 8006404:	3e01      	subs	r6, #1
 8006406:	e7ea      	b.n	80063de <__mdiff+0xde>
 8006408:	08006d4b 	.word	0x08006d4b
 800640c:	08006dbc 	.word	0x08006dbc

08006410 <__d2b>:
 8006410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006414:	4689      	mov	r9, r1
 8006416:	2101      	movs	r1, #1
 8006418:	ec57 6b10 	vmov	r6, r7, d0
 800641c:	4690      	mov	r8, r2
 800641e:	f7ff fcd5 	bl	8005dcc <_Balloc>
 8006422:	4604      	mov	r4, r0
 8006424:	b930      	cbnz	r0, 8006434 <__d2b+0x24>
 8006426:	4602      	mov	r2, r0
 8006428:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <__d2b+0xb0>)
 800642a:	4826      	ldr	r0, [pc, #152]	; (80064c4 <__d2b+0xb4>)
 800642c:	f240 310a 	movw	r1, #778	; 0x30a
 8006430:	f000 fac4 	bl	80069bc <__assert_func>
 8006434:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800643c:	bb35      	cbnz	r5, 800648c <__d2b+0x7c>
 800643e:	2e00      	cmp	r6, #0
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	d028      	beq.n	8006496 <__d2b+0x86>
 8006444:	4668      	mov	r0, sp
 8006446:	9600      	str	r6, [sp, #0]
 8006448:	f7ff fd8c 	bl	8005f64 <__lo0bits>
 800644c:	9900      	ldr	r1, [sp, #0]
 800644e:	b300      	cbz	r0, 8006492 <__d2b+0x82>
 8006450:	9a01      	ldr	r2, [sp, #4]
 8006452:	f1c0 0320 	rsb	r3, r0, #32
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	430b      	orrs	r3, r1
 800645c:	40c2      	lsrs	r2, r0
 800645e:	6163      	str	r3, [r4, #20]
 8006460:	9201      	str	r2, [sp, #4]
 8006462:	9b01      	ldr	r3, [sp, #4]
 8006464:	61a3      	str	r3, [r4, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	bf14      	ite	ne
 800646a:	2202      	movne	r2, #2
 800646c:	2201      	moveq	r2, #1
 800646e:	6122      	str	r2, [r4, #16]
 8006470:	b1d5      	cbz	r5, 80064a8 <__d2b+0x98>
 8006472:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006476:	4405      	add	r5, r0
 8006478:	f8c9 5000 	str.w	r5, [r9]
 800647c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006480:	f8c8 0000 	str.w	r0, [r8]
 8006484:	4620      	mov	r0, r4
 8006486:	b003      	add	sp, #12
 8006488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800648c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006490:	e7d5      	b.n	800643e <__d2b+0x2e>
 8006492:	6161      	str	r1, [r4, #20]
 8006494:	e7e5      	b.n	8006462 <__d2b+0x52>
 8006496:	a801      	add	r0, sp, #4
 8006498:	f7ff fd64 	bl	8005f64 <__lo0bits>
 800649c:	9b01      	ldr	r3, [sp, #4]
 800649e:	6163      	str	r3, [r4, #20]
 80064a0:	2201      	movs	r2, #1
 80064a2:	6122      	str	r2, [r4, #16]
 80064a4:	3020      	adds	r0, #32
 80064a6:	e7e3      	b.n	8006470 <__d2b+0x60>
 80064a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80064ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064b0:	f8c9 0000 	str.w	r0, [r9]
 80064b4:	6918      	ldr	r0, [r3, #16]
 80064b6:	f7ff fd35 	bl	8005f24 <__hi0bits>
 80064ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80064be:	e7df      	b.n	8006480 <__d2b+0x70>
 80064c0:	08006d4b 	.word	0x08006d4b
 80064c4:	08006dbc 	.word	0x08006dbc

080064c8 <_calloc_r>:
 80064c8:	b513      	push	{r0, r1, r4, lr}
 80064ca:	434a      	muls	r2, r1
 80064cc:	4611      	mov	r1, r2
 80064ce:	9201      	str	r2, [sp, #4]
 80064d0:	f000 f85a 	bl	8006588 <_malloc_r>
 80064d4:	4604      	mov	r4, r0
 80064d6:	b118      	cbz	r0, 80064e0 <_calloc_r+0x18>
 80064d8:	9a01      	ldr	r2, [sp, #4]
 80064da:	2100      	movs	r1, #0
 80064dc:	f7fd fe04 	bl	80040e8 <memset>
 80064e0:	4620      	mov	r0, r4
 80064e2:	b002      	add	sp, #8
 80064e4:	bd10      	pop	{r4, pc}
	...

080064e8 <_free_r>:
 80064e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064ea:	2900      	cmp	r1, #0
 80064ec:	d048      	beq.n	8006580 <_free_r+0x98>
 80064ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f2:	9001      	str	r0, [sp, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f1a1 0404 	sub.w	r4, r1, #4
 80064fa:	bfb8      	it	lt
 80064fc:	18e4      	addlt	r4, r4, r3
 80064fe:	f000 fae3 	bl	8006ac8 <__malloc_lock>
 8006502:	4a20      	ldr	r2, [pc, #128]	; (8006584 <_free_r+0x9c>)
 8006504:	9801      	ldr	r0, [sp, #4]
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	4615      	mov	r5, r2
 800650a:	b933      	cbnz	r3, 800651a <_free_r+0x32>
 800650c:	6063      	str	r3, [r4, #4]
 800650e:	6014      	str	r4, [r2, #0]
 8006510:	b003      	add	sp, #12
 8006512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006516:	f000 badd 	b.w	8006ad4 <__malloc_unlock>
 800651a:	42a3      	cmp	r3, r4
 800651c:	d90b      	bls.n	8006536 <_free_r+0x4e>
 800651e:	6821      	ldr	r1, [r4, #0]
 8006520:	1862      	adds	r2, r4, r1
 8006522:	4293      	cmp	r3, r2
 8006524:	bf04      	itt	eq
 8006526:	681a      	ldreq	r2, [r3, #0]
 8006528:	685b      	ldreq	r3, [r3, #4]
 800652a:	6063      	str	r3, [r4, #4]
 800652c:	bf04      	itt	eq
 800652e:	1852      	addeq	r2, r2, r1
 8006530:	6022      	streq	r2, [r4, #0]
 8006532:	602c      	str	r4, [r5, #0]
 8006534:	e7ec      	b.n	8006510 <_free_r+0x28>
 8006536:	461a      	mov	r2, r3
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	b10b      	cbz	r3, 8006540 <_free_r+0x58>
 800653c:	42a3      	cmp	r3, r4
 800653e:	d9fa      	bls.n	8006536 <_free_r+0x4e>
 8006540:	6811      	ldr	r1, [r2, #0]
 8006542:	1855      	adds	r5, r2, r1
 8006544:	42a5      	cmp	r5, r4
 8006546:	d10b      	bne.n	8006560 <_free_r+0x78>
 8006548:	6824      	ldr	r4, [r4, #0]
 800654a:	4421      	add	r1, r4
 800654c:	1854      	adds	r4, r2, r1
 800654e:	42a3      	cmp	r3, r4
 8006550:	6011      	str	r1, [r2, #0]
 8006552:	d1dd      	bne.n	8006510 <_free_r+0x28>
 8006554:	681c      	ldr	r4, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	6053      	str	r3, [r2, #4]
 800655a:	4421      	add	r1, r4
 800655c:	6011      	str	r1, [r2, #0]
 800655e:	e7d7      	b.n	8006510 <_free_r+0x28>
 8006560:	d902      	bls.n	8006568 <_free_r+0x80>
 8006562:	230c      	movs	r3, #12
 8006564:	6003      	str	r3, [r0, #0]
 8006566:	e7d3      	b.n	8006510 <_free_r+0x28>
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	1961      	adds	r1, r4, r5
 800656c:	428b      	cmp	r3, r1
 800656e:	bf04      	itt	eq
 8006570:	6819      	ldreq	r1, [r3, #0]
 8006572:	685b      	ldreq	r3, [r3, #4]
 8006574:	6063      	str	r3, [r4, #4]
 8006576:	bf04      	itt	eq
 8006578:	1949      	addeq	r1, r1, r5
 800657a:	6021      	streq	r1, [r4, #0]
 800657c:	6054      	str	r4, [r2, #4]
 800657e:	e7c7      	b.n	8006510 <_free_r+0x28>
 8006580:	b003      	add	sp, #12
 8006582:	bd30      	pop	{r4, r5, pc}
 8006584:	200001fc 	.word	0x200001fc

08006588 <_malloc_r>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	1ccd      	adds	r5, r1, #3
 800658c:	f025 0503 	bic.w	r5, r5, #3
 8006590:	3508      	adds	r5, #8
 8006592:	2d0c      	cmp	r5, #12
 8006594:	bf38      	it	cc
 8006596:	250c      	movcc	r5, #12
 8006598:	2d00      	cmp	r5, #0
 800659a:	4606      	mov	r6, r0
 800659c:	db01      	blt.n	80065a2 <_malloc_r+0x1a>
 800659e:	42a9      	cmp	r1, r5
 80065a0:	d903      	bls.n	80065aa <_malloc_r+0x22>
 80065a2:	230c      	movs	r3, #12
 80065a4:	6033      	str	r3, [r6, #0]
 80065a6:	2000      	movs	r0, #0
 80065a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065aa:	f000 fa8d 	bl	8006ac8 <__malloc_lock>
 80065ae:	4921      	ldr	r1, [pc, #132]	; (8006634 <_malloc_r+0xac>)
 80065b0:	680a      	ldr	r2, [r1, #0]
 80065b2:	4614      	mov	r4, r2
 80065b4:	b99c      	cbnz	r4, 80065de <_malloc_r+0x56>
 80065b6:	4f20      	ldr	r7, [pc, #128]	; (8006638 <_malloc_r+0xb0>)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	b923      	cbnz	r3, 80065c6 <_malloc_r+0x3e>
 80065bc:	4621      	mov	r1, r4
 80065be:	4630      	mov	r0, r6
 80065c0:	f000 f996 	bl	80068f0 <_sbrk_r>
 80065c4:	6038      	str	r0, [r7, #0]
 80065c6:	4629      	mov	r1, r5
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 f991 	bl	80068f0 <_sbrk_r>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	d123      	bne.n	800661a <_malloc_r+0x92>
 80065d2:	230c      	movs	r3, #12
 80065d4:	6033      	str	r3, [r6, #0]
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 fa7c 	bl	8006ad4 <__malloc_unlock>
 80065dc:	e7e3      	b.n	80065a6 <_malloc_r+0x1e>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	1b5b      	subs	r3, r3, r5
 80065e2:	d417      	bmi.n	8006614 <_malloc_r+0x8c>
 80065e4:	2b0b      	cmp	r3, #11
 80065e6:	d903      	bls.n	80065f0 <_malloc_r+0x68>
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	441c      	add	r4, r3
 80065ec:	6025      	str	r5, [r4, #0]
 80065ee:	e004      	b.n	80065fa <_malloc_r+0x72>
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	42a2      	cmp	r2, r4
 80065f4:	bf0c      	ite	eq
 80065f6:	600b      	streq	r3, [r1, #0]
 80065f8:	6053      	strne	r3, [r2, #4]
 80065fa:	4630      	mov	r0, r6
 80065fc:	f000 fa6a 	bl	8006ad4 <__malloc_unlock>
 8006600:	f104 000b 	add.w	r0, r4, #11
 8006604:	1d23      	adds	r3, r4, #4
 8006606:	f020 0007 	bic.w	r0, r0, #7
 800660a:	1ac2      	subs	r2, r0, r3
 800660c:	d0cc      	beq.n	80065a8 <_malloc_r+0x20>
 800660e:	1a1b      	subs	r3, r3, r0
 8006610:	50a3      	str	r3, [r4, r2]
 8006612:	e7c9      	b.n	80065a8 <_malloc_r+0x20>
 8006614:	4622      	mov	r2, r4
 8006616:	6864      	ldr	r4, [r4, #4]
 8006618:	e7cc      	b.n	80065b4 <_malloc_r+0x2c>
 800661a:	1cc4      	adds	r4, r0, #3
 800661c:	f024 0403 	bic.w	r4, r4, #3
 8006620:	42a0      	cmp	r0, r4
 8006622:	d0e3      	beq.n	80065ec <_malloc_r+0x64>
 8006624:	1a21      	subs	r1, r4, r0
 8006626:	4630      	mov	r0, r6
 8006628:	f000 f962 	bl	80068f0 <_sbrk_r>
 800662c:	3001      	adds	r0, #1
 800662e:	d1dd      	bne.n	80065ec <_malloc_r+0x64>
 8006630:	e7cf      	b.n	80065d2 <_malloc_r+0x4a>
 8006632:	bf00      	nop
 8006634:	200001fc 	.word	0x200001fc
 8006638:	20000200 	.word	0x20000200

0800663c <__sfputc_r>:
 800663c:	6893      	ldr	r3, [r2, #8]
 800663e:	3b01      	subs	r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	b410      	push	{r4}
 8006644:	6093      	str	r3, [r2, #8]
 8006646:	da08      	bge.n	800665a <__sfputc_r+0x1e>
 8006648:	6994      	ldr	r4, [r2, #24]
 800664a:	42a3      	cmp	r3, r4
 800664c:	db01      	blt.n	8006652 <__sfputc_r+0x16>
 800664e:	290a      	cmp	r1, #10
 8006650:	d103      	bne.n	800665a <__sfputc_r+0x1e>
 8006652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006656:	f7fe ba47 	b.w	8004ae8 <__swbuf_r>
 800665a:	6813      	ldr	r3, [r2, #0]
 800665c:	1c58      	adds	r0, r3, #1
 800665e:	6010      	str	r0, [r2, #0]
 8006660:	7019      	strb	r1, [r3, #0]
 8006662:	4608      	mov	r0, r1
 8006664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006668:	4770      	bx	lr

0800666a <__sfputs_r>:
 800666a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666c:	4606      	mov	r6, r0
 800666e:	460f      	mov	r7, r1
 8006670:	4614      	mov	r4, r2
 8006672:	18d5      	adds	r5, r2, r3
 8006674:	42ac      	cmp	r4, r5
 8006676:	d101      	bne.n	800667c <__sfputs_r+0x12>
 8006678:	2000      	movs	r0, #0
 800667a:	e007      	b.n	800668c <__sfputs_r+0x22>
 800667c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006680:	463a      	mov	r2, r7
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff ffda 	bl	800663c <__sfputc_r>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d1f3      	bne.n	8006674 <__sfputs_r+0xa>
 800668c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006690 <_vfiprintf_r>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	460d      	mov	r5, r1
 8006696:	b09d      	sub	sp, #116	; 0x74
 8006698:	4614      	mov	r4, r2
 800669a:	4698      	mov	r8, r3
 800669c:	4606      	mov	r6, r0
 800669e:	b118      	cbz	r0, 80066a8 <_vfiprintf_r+0x18>
 80066a0:	6983      	ldr	r3, [r0, #24]
 80066a2:	b90b      	cbnz	r3, 80066a8 <_vfiprintf_r+0x18>
 80066a4:	f7ff fa72 	bl	8005b8c <__sinit>
 80066a8:	4b89      	ldr	r3, [pc, #548]	; (80068d0 <_vfiprintf_r+0x240>)
 80066aa:	429d      	cmp	r5, r3
 80066ac:	d11b      	bne.n	80066e6 <_vfiprintf_r+0x56>
 80066ae:	6875      	ldr	r5, [r6, #4]
 80066b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066b2:	07d9      	lsls	r1, r3, #31
 80066b4:	d405      	bmi.n	80066c2 <_vfiprintf_r+0x32>
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	059a      	lsls	r2, r3, #22
 80066ba:	d402      	bmi.n	80066c2 <_vfiprintf_r+0x32>
 80066bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066be:	f7ff fb08 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 80066c2:	89ab      	ldrh	r3, [r5, #12]
 80066c4:	071b      	lsls	r3, r3, #28
 80066c6:	d501      	bpl.n	80066cc <_vfiprintf_r+0x3c>
 80066c8:	692b      	ldr	r3, [r5, #16]
 80066ca:	b9eb      	cbnz	r3, 8006708 <_vfiprintf_r+0x78>
 80066cc:	4629      	mov	r1, r5
 80066ce:	4630      	mov	r0, r6
 80066d0:	f7fe fa5c 	bl	8004b8c <__swsetup_r>
 80066d4:	b1c0      	cbz	r0, 8006708 <_vfiprintf_r+0x78>
 80066d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066d8:	07dc      	lsls	r4, r3, #31
 80066da:	d50e      	bpl.n	80066fa <_vfiprintf_r+0x6a>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	b01d      	add	sp, #116	; 0x74
 80066e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e6:	4b7b      	ldr	r3, [pc, #492]	; (80068d4 <_vfiprintf_r+0x244>)
 80066e8:	429d      	cmp	r5, r3
 80066ea:	d101      	bne.n	80066f0 <_vfiprintf_r+0x60>
 80066ec:	68b5      	ldr	r5, [r6, #8]
 80066ee:	e7df      	b.n	80066b0 <_vfiprintf_r+0x20>
 80066f0:	4b79      	ldr	r3, [pc, #484]	; (80068d8 <_vfiprintf_r+0x248>)
 80066f2:	429d      	cmp	r5, r3
 80066f4:	bf08      	it	eq
 80066f6:	68f5      	ldreq	r5, [r6, #12]
 80066f8:	e7da      	b.n	80066b0 <_vfiprintf_r+0x20>
 80066fa:	89ab      	ldrh	r3, [r5, #12]
 80066fc:	0598      	lsls	r0, r3, #22
 80066fe:	d4ed      	bmi.n	80066dc <_vfiprintf_r+0x4c>
 8006700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006702:	f7ff fae7 	bl	8005cd4 <__retarget_lock_release_recursive>
 8006706:	e7e9      	b.n	80066dc <_vfiprintf_r+0x4c>
 8006708:	2300      	movs	r3, #0
 800670a:	9309      	str	r3, [sp, #36]	; 0x24
 800670c:	2320      	movs	r3, #32
 800670e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006712:	f8cd 800c 	str.w	r8, [sp, #12]
 8006716:	2330      	movs	r3, #48	; 0x30
 8006718:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80068dc <_vfiprintf_r+0x24c>
 800671c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006720:	f04f 0901 	mov.w	r9, #1
 8006724:	4623      	mov	r3, r4
 8006726:	469a      	mov	sl, r3
 8006728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800672c:	b10a      	cbz	r2, 8006732 <_vfiprintf_r+0xa2>
 800672e:	2a25      	cmp	r2, #37	; 0x25
 8006730:	d1f9      	bne.n	8006726 <_vfiprintf_r+0x96>
 8006732:	ebba 0b04 	subs.w	fp, sl, r4
 8006736:	d00b      	beq.n	8006750 <_vfiprintf_r+0xc0>
 8006738:	465b      	mov	r3, fp
 800673a:	4622      	mov	r2, r4
 800673c:	4629      	mov	r1, r5
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff ff93 	bl	800666a <__sfputs_r>
 8006744:	3001      	adds	r0, #1
 8006746:	f000 80aa 	beq.w	800689e <_vfiprintf_r+0x20e>
 800674a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800674c:	445a      	add	r2, fp
 800674e:	9209      	str	r2, [sp, #36]	; 0x24
 8006750:	f89a 3000 	ldrb.w	r3, [sl]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80a2 	beq.w	800689e <_vfiprintf_r+0x20e>
 800675a:	2300      	movs	r3, #0
 800675c:	f04f 32ff 	mov.w	r2, #4294967295
 8006760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006764:	f10a 0a01 	add.w	sl, sl, #1
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	9307      	str	r3, [sp, #28]
 800676c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006770:	931a      	str	r3, [sp, #104]	; 0x68
 8006772:	4654      	mov	r4, sl
 8006774:	2205      	movs	r2, #5
 8006776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800677a:	4858      	ldr	r0, [pc, #352]	; (80068dc <_vfiprintf_r+0x24c>)
 800677c:	f7f9 fd38 	bl	80001f0 <memchr>
 8006780:	9a04      	ldr	r2, [sp, #16]
 8006782:	b9d8      	cbnz	r0, 80067bc <_vfiprintf_r+0x12c>
 8006784:	06d1      	lsls	r1, r2, #27
 8006786:	bf44      	itt	mi
 8006788:	2320      	movmi	r3, #32
 800678a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800678e:	0713      	lsls	r3, r2, #28
 8006790:	bf44      	itt	mi
 8006792:	232b      	movmi	r3, #43	; 0x2b
 8006794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006798:	f89a 3000 	ldrb.w	r3, [sl]
 800679c:	2b2a      	cmp	r3, #42	; 0x2a
 800679e:	d015      	beq.n	80067cc <_vfiprintf_r+0x13c>
 80067a0:	9a07      	ldr	r2, [sp, #28]
 80067a2:	4654      	mov	r4, sl
 80067a4:	2000      	movs	r0, #0
 80067a6:	f04f 0c0a 	mov.w	ip, #10
 80067aa:	4621      	mov	r1, r4
 80067ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067b0:	3b30      	subs	r3, #48	; 0x30
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	d94e      	bls.n	8006854 <_vfiprintf_r+0x1c4>
 80067b6:	b1b0      	cbz	r0, 80067e6 <_vfiprintf_r+0x156>
 80067b8:	9207      	str	r2, [sp, #28]
 80067ba:	e014      	b.n	80067e6 <_vfiprintf_r+0x156>
 80067bc:	eba0 0308 	sub.w	r3, r0, r8
 80067c0:	fa09 f303 	lsl.w	r3, r9, r3
 80067c4:	4313      	orrs	r3, r2
 80067c6:	9304      	str	r3, [sp, #16]
 80067c8:	46a2      	mov	sl, r4
 80067ca:	e7d2      	b.n	8006772 <_vfiprintf_r+0xe2>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	1d19      	adds	r1, r3, #4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	9103      	str	r1, [sp, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bfbb      	ittet	lt
 80067d8:	425b      	neglt	r3, r3
 80067da:	f042 0202 	orrlt.w	r2, r2, #2
 80067de:	9307      	strge	r3, [sp, #28]
 80067e0:	9307      	strlt	r3, [sp, #28]
 80067e2:	bfb8      	it	lt
 80067e4:	9204      	strlt	r2, [sp, #16]
 80067e6:	7823      	ldrb	r3, [r4, #0]
 80067e8:	2b2e      	cmp	r3, #46	; 0x2e
 80067ea:	d10c      	bne.n	8006806 <_vfiprintf_r+0x176>
 80067ec:	7863      	ldrb	r3, [r4, #1]
 80067ee:	2b2a      	cmp	r3, #42	; 0x2a
 80067f0:	d135      	bne.n	800685e <_vfiprintf_r+0x1ce>
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	1d1a      	adds	r2, r3, #4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	9203      	str	r2, [sp, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bfb8      	it	lt
 80067fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006802:	3402      	adds	r4, #2
 8006804:	9305      	str	r3, [sp, #20]
 8006806:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068ec <_vfiprintf_r+0x25c>
 800680a:	7821      	ldrb	r1, [r4, #0]
 800680c:	2203      	movs	r2, #3
 800680e:	4650      	mov	r0, sl
 8006810:	f7f9 fcee 	bl	80001f0 <memchr>
 8006814:	b140      	cbz	r0, 8006828 <_vfiprintf_r+0x198>
 8006816:	2340      	movs	r3, #64	; 0x40
 8006818:	eba0 000a 	sub.w	r0, r0, sl
 800681c:	fa03 f000 	lsl.w	r0, r3, r0
 8006820:	9b04      	ldr	r3, [sp, #16]
 8006822:	4303      	orrs	r3, r0
 8006824:	3401      	adds	r4, #1
 8006826:	9304      	str	r3, [sp, #16]
 8006828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800682c:	482c      	ldr	r0, [pc, #176]	; (80068e0 <_vfiprintf_r+0x250>)
 800682e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006832:	2206      	movs	r2, #6
 8006834:	f7f9 fcdc 	bl	80001f0 <memchr>
 8006838:	2800      	cmp	r0, #0
 800683a:	d03f      	beq.n	80068bc <_vfiprintf_r+0x22c>
 800683c:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <_vfiprintf_r+0x254>)
 800683e:	bb1b      	cbnz	r3, 8006888 <_vfiprintf_r+0x1f8>
 8006840:	9b03      	ldr	r3, [sp, #12]
 8006842:	3307      	adds	r3, #7
 8006844:	f023 0307 	bic.w	r3, r3, #7
 8006848:	3308      	adds	r3, #8
 800684a:	9303      	str	r3, [sp, #12]
 800684c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684e:	443b      	add	r3, r7
 8006850:	9309      	str	r3, [sp, #36]	; 0x24
 8006852:	e767      	b.n	8006724 <_vfiprintf_r+0x94>
 8006854:	fb0c 3202 	mla	r2, ip, r2, r3
 8006858:	460c      	mov	r4, r1
 800685a:	2001      	movs	r0, #1
 800685c:	e7a5      	b.n	80067aa <_vfiprintf_r+0x11a>
 800685e:	2300      	movs	r3, #0
 8006860:	3401      	adds	r4, #1
 8006862:	9305      	str	r3, [sp, #20]
 8006864:	4619      	mov	r1, r3
 8006866:	f04f 0c0a 	mov.w	ip, #10
 800686a:	4620      	mov	r0, r4
 800686c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006870:	3a30      	subs	r2, #48	; 0x30
 8006872:	2a09      	cmp	r2, #9
 8006874:	d903      	bls.n	800687e <_vfiprintf_r+0x1ee>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0c5      	beq.n	8006806 <_vfiprintf_r+0x176>
 800687a:	9105      	str	r1, [sp, #20]
 800687c:	e7c3      	b.n	8006806 <_vfiprintf_r+0x176>
 800687e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006882:	4604      	mov	r4, r0
 8006884:	2301      	movs	r3, #1
 8006886:	e7f0      	b.n	800686a <_vfiprintf_r+0x1da>
 8006888:	ab03      	add	r3, sp, #12
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	462a      	mov	r2, r5
 800688e:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <_vfiprintf_r+0x258>)
 8006890:	a904      	add	r1, sp, #16
 8006892:	4630      	mov	r0, r6
 8006894:	f7fd fcd0 	bl	8004238 <_printf_float>
 8006898:	4607      	mov	r7, r0
 800689a:	1c78      	adds	r0, r7, #1
 800689c:	d1d6      	bne.n	800684c <_vfiprintf_r+0x1bc>
 800689e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a0:	07d9      	lsls	r1, r3, #31
 80068a2:	d405      	bmi.n	80068b0 <_vfiprintf_r+0x220>
 80068a4:	89ab      	ldrh	r3, [r5, #12]
 80068a6:	059a      	lsls	r2, r3, #22
 80068a8:	d402      	bmi.n	80068b0 <_vfiprintf_r+0x220>
 80068aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ac:	f7ff fa12 	bl	8005cd4 <__retarget_lock_release_recursive>
 80068b0:	89ab      	ldrh	r3, [r5, #12]
 80068b2:	065b      	lsls	r3, r3, #25
 80068b4:	f53f af12 	bmi.w	80066dc <_vfiprintf_r+0x4c>
 80068b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ba:	e711      	b.n	80066e0 <_vfiprintf_r+0x50>
 80068bc:	ab03      	add	r3, sp, #12
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	462a      	mov	r2, r5
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <_vfiprintf_r+0x258>)
 80068c4:	a904      	add	r1, sp, #16
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7fd ff5a 	bl	8004780 <_printf_i>
 80068cc:	e7e4      	b.n	8006898 <_vfiprintf_r+0x208>
 80068ce:	bf00      	nop
 80068d0:	08006d7c 	.word	0x08006d7c
 80068d4:	08006d9c 	.word	0x08006d9c
 80068d8:	08006d5c 	.word	0x08006d5c
 80068dc:	08006f1c 	.word	0x08006f1c
 80068e0:	08006f26 	.word	0x08006f26
 80068e4:	08004239 	.word	0x08004239
 80068e8:	0800666b 	.word	0x0800666b
 80068ec:	08006f22 	.word	0x08006f22

080068f0 <_sbrk_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4d06      	ldr	r5, [pc, #24]	; (800690c <_sbrk_r+0x1c>)
 80068f4:	2300      	movs	r3, #0
 80068f6:	4604      	mov	r4, r0
 80068f8:	4608      	mov	r0, r1
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	f7fa fc84 	bl	8001208 <_sbrk>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_sbrk_r+0x1a>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_sbrk_r+0x1a>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	200002e4 	.word	0x200002e4

08006910 <__sread>:
 8006910:	b510      	push	{r4, lr}
 8006912:	460c      	mov	r4, r1
 8006914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006918:	f000 f8e2 	bl	8006ae0 <_read_r>
 800691c:	2800      	cmp	r0, #0
 800691e:	bfab      	itete	ge
 8006920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006922:	89a3      	ldrhlt	r3, [r4, #12]
 8006924:	181b      	addge	r3, r3, r0
 8006926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800692a:	bfac      	ite	ge
 800692c:	6563      	strge	r3, [r4, #84]	; 0x54
 800692e:	81a3      	strhlt	r3, [r4, #12]
 8006930:	bd10      	pop	{r4, pc}

08006932 <__swrite>:
 8006932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006936:	461f      	mov	r7, r3
 8006938:	898b      	ldrh	r3, [r1, #12]
 800693a:	05db      	lsls	r3, r3, #23
 800693c:	4605      	mov	r5, r0
 800693e:	460c      	mov	r4, r1
 8006940:	4616      	mov	r6, r2
 8006942:	d505      	bpl.n	8006950 <__swrite+0x1e>
 8006944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006948:	2302      	movs	r3, #2
 800694a:	2200      	movs	r2, #0
 800694c:	f000 f898 	bl	8006a80 <_lseek_r>
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800695a:	81a3      	strh	r3, [r4, #12]
 800695c:	4632      	mov	r2, r6
 800695e:	463b      	mov	r3, r7
 8006960:	4628      	mov	r0, r5
 8006962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006966:	f000 b817 	b.w	8006998 <_write_r>

0800696a <__sseek>:
 800696a:	b510      	push	{r4, lr}
 800696c:	460c      	mov	r4, r1
 800696e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006972:	f000 f885 	bl	8006a80 <_lseek_r>
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	89a3      	ldrh	r3, [r4, #12]
 800697a:	bf15      	itete	ne
 800697c:	6560      	strne	r0, [r4, #84]	; 0x54
 800697e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006986:	81a3      	strheq	r3, [r4, #12]
 8006988:	bf18      	it	ne
 800698a:	81a3      	strhne	r3, [r4, #12]
 800698c:	bd10      	pop	{r4, pc}

0800698e <__sclose>:
 800698e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006992:	f000 b831 	b.w	80069f8 <_close_r>
	...

08006998 <_write_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4d07      	ldr	r5, [pc, #28]	; (80069b8 <_write_r+0x20>)
 800699c:	4604      	mov	r4, r0
 800699e:	4608      	mov	r0, r1
 80069a0:	4611      	mov	r1, r2
 80069a2:	2200      	movs	r2, #0
 80069a4:	602a      	str	r2, [r5, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f7fa fbdd 	bl	8001166 <_write>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_write_r+0x1e>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_write_r+0x1e>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	200002e4 	.word	0x200002e4

080069bc <__assert_func>:
 80069bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069be:	4614      	mov	r4, r2
 80069c0:	461a      	mov	r2, r3
 80069c2:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <__assert_func+0x2c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4605      	mov	r5, r0
 80069c8:	68d8      	ldr	r0, [r3, #12]
 80069ca:	b14c      	cbz	r4, 80069e0 <__assert_func+0x24>
 80069cc:	4b07      	ldr	r3, [pc, #28]	; (80069ec <__assert_func+0x30>)
 80069ce:	9100      	str	r1, [sp, #0]
 80069d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069d4:	4906      	ldr	r1, [pc, #24]	; (80069f0 <__assert_func+0x34>)
 80069d6:	462b      	mov	r3, r5
 80069d8:	f000 f81e 	bl	8006a18 <fiprintf>
 80069dc:	f000 f89f 	bl	8006b1e <abort>
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <__assert_func+0x38>)
 80069e2:	461c      	mov	r4, r3
 80069e4:	e7f3      	b.n	80069ce <__assert_func+0x12>
 80069e6:	bf00      	nop
 80069e8:	2000000c 	.word	0x2000000c
 80069ec:	08006f2d 	.word	0x08006f2d
 80069f0:	08006f3a 	.word	0x08006f3a
 80069f4:	08006f68 	.word	0x08006f68

080069f8 <_close_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d06      	ldr	r5, [pc, #24]	; (8006a14 <_close_r+0x1c>)
 80069fc:	2300      	movs	r3, #0
 80069fe:	4604      	mov	r4, r0
 8006a00:	4608      	mov	r0, r1
 8006a02:	602b      	str	r3, [r5, #0]
 8006a04:	f7fa fbcb 	bl	800119e <_close>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d102      	bne.n	8006a12 <_close_r+0x1a>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	b103      	cbz	r3, 8006a12 <_close_r+0x1a>
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	200002e4 	.word	0x200002e4

08006a18 <fiprintf>:
 8006a18:	b40e      	push	{r1, r2, r3}
 8006a1a:	b503      	push	{r0, r1, lr}
 8006a1c:	4601      	mov	r1, r0
 8006a1e:	ab03      	add	r3, sp, #12
 8006a20:	4805      	ldr	r0, [pc, #20]	; (8006a38 <fiprintf+0x20>)
 8006a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a26:	6800      	ldr	r0, [r0, #0]
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	f7ff fe31 	bl	8006690 <_vfiprintf_r>
 8006a2e:	b002      	add	sp, #8
 8006a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a34:	b003      	add	sp, #12
 8006a36:	4770      	bx	lr
 8006a38:	2000000c 	.word	0x2000000c

08006a3c <_fstat_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4d07      	ldr	r5, [pc, #28]	; (8006a5c <_fstat_r+0x20>)
 8006a40:	2300      	movs	r3, #0
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	f7fa fbb4 	bl	80011b6 <_fstat>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d102      	bne.n	8006a58 <_fstat_r+0x1c>
 8006a52:	682b      	ldr	r3, [r5, #0]
 8006a54:	b103      	cbz	r3, 8006a58 <_fstat_r+0x1c>
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	bd38      	pop	{r3, r4, r5, pc}
 8006a5a:	bf00      	nop
 8006a5c:	200002e4 	.word	0x200002e4

08006a60 <_isatty_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d06      	ldr	r5, [pc, #24]	; (8006a7c <_isatty_r+0x1c>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fa fbb3 	bl	80011d6 <_isatty>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_isatty_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_isatty_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	200002e4 	.word	0x200002e4

08006a80 <_lseek_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d07      	ldr	r5, [pc, #28]	; (8006aa0 <_lseek_r+0x20>)
 8006a84:	4604      	mov	r4, r0
 8006a86:	4608      	mov	r0, r1
 8006a88:	4611      	mov	r1, r2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	602a      	str	r2, [r5, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f7fa fbac 	bl	80011ec <_lseek>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d102      	bne.n	8006a9e <_lseek_r+0x1e>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	b103      	cbz	r3, 8006a9e <_lseek_r+0x1e>
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	200002e4 	.word	0x200002e4

08006aa4 <__ascii_mbtowc>:
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	b901      	cbnz	r1, 8006aaa <__ascii_mbtowc+0x6>
 8006aa8:	a901      	add	r1, sp, #4
 8006aaa:	b142      	cbz	r2, 8006abe <__ascii_mbtowc+0x1a>
 8006aac:	b14b      	cbz	r3, 8006ac2 <__ascii_mbtowc+0x1e>
 8006aae:	7813      	ldrb	r3, [r2, #0]
 8006ab0:	600b      	str	r3, [r1, #0]
 8006ab2:	7812      	ldrb	r2, [r2, #0]
 8006ab4:	1e10      	subs	r0, r2, #0
 8006ab6:	bf18      	it	ne
 8006ab8:	2001      	movne	r0, #1
 8006aba:	b002      	add	sp, #8
 8006abc:	4770      	bx	lr
 8006abe:	4610      	mov	r0, r2
 8006ac0:	e7fb      	b.n	8006aba <__ascii_mbtowc+0x16>
 8006ac2:	f06f 0001 	mvn.w	r0, #1
 8006ac6:	e7f8      	b.n	8006aba <__ascii_mbtowc+0x16>

08006ac8 <__malloc_lock>:
 8006ac8:	4801      	ldr	r0, [pc, #4]	; (8006ad0 <__malloc_lock+0x8>)
 8006aca:	f7ff b902 	b.w	8005cd2 <__retarget_lock_acquire_recursive>
 8006ace:	bf00      	nop
 8006ad0:	200002dc 	.word	0x200002dc

08006ad4 <__malloc_unlock>:
 8006ad4:	4801      	ldr	r0, [pc, #4]	; (8006adc <__malloc_unlock+0x8>)
 8006ad6:	f7ff b8fd 	b.w	8005cd4 <__retarget_lock_release_recursive>
 8006ada:	bf00      	nop
 8006adc:	200002dc 	.word	0x200002dc

08006ae0 <_read_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	; (8006b00 <_read_r+0x20>)
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	4608      	mov	r0, r1
 8006ae8:	4611      	mov	r1, r2
 8006aea:	2200      	movs	r2, #0
 8006aec:	602a      	str	r2, [r5, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fa fb1c 	bl	800112c <_read>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_read_r+0x1e>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_read_r+0x1e>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	200002e4 	.word	0x200002e4

08006b04 <__ascii_wctomb>:
 8006b04:	b149      	cbz	r1, 8006b1a <__ascii_wctomb+0x16>
 8006b06:	2aff      	cmp	r2, #255	; 0xff
 8006b08:	bf85      	ittet	hi
 8006b0a:	238a      	movhi	r3, #138	; 0x8a
 8006b0c:	6003      	strhi	r3, [r0, #0]
 8006b0e:	700a      	strbls	r2, [r1, #0]
 8006b10:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b14:	bf98      	it	ls
 8006b16:	2001      	movls	r0, #1
 8006b18:	4770      	bx	lr
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	4770      	bx	lr

08006b1e <abort>:
 8006b1e:	b508      	push	{r3, lr}
 8006b20:	2006      	movs	r0, #6
 8006b22:	f000 f82b 	bl	8006b7c <raise>
 8006b26:	2001      	movs	r0, #1
 8006b28:	f7fa faf6 	bl	8001118 <_exit>

08006b2c <_raise_r>:
 8006b2c:	291f      	cmp	r1, #31
 8006b2e:	b538      	push	{r3, r4, r5, lr}
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	d904      	bls.n	8006b40 <_raise_r+0x14>
 8006b36:	2316      	movs	r3, #22
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b42:	b112      	cbz	r2, 8006b4a <_raise_r+0x1e>
 8006b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b48:	b94b      	cbnz	r3, 8006b5e <_raise_r+0x32>
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 f830 	bl	8006bb0 <_getpid_r>
 8006b50:	462a      	mov	r2, r5
 8006b52:	4601      	mov	r1, r0
 8006b54:	4620      	mov	r0, r4
 8006b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b5a:	f000 b817 	b.w	8006b8c <_kill_r>
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d00a      	beq.n	8006b78 <_raise_r+0x4c>
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	d103      	bne.n	8006b6e <_raise_r+0x42>
 8006b66:	2316      	movs	r3, #22
 8006b68:	6003      	str	r3, [r0, #0]
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	e7e7      	b.n	8006b3e <_raise_r+0x12>
 8006b6e:	2400      	movs	r4, #0
 8006b70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b74:	4628      	mov	r0, r5
 8006b76:	4798      	blx	r3
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e7e0      	b.n	8006b3e <_raise_r+0x12>

08006b7c <raise>:
 8006b7c:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <raise+0xc>)
 8006b7e:	4601      	mov	r1, r0
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f7ff bfd3 	b.w	8006b2c <_raise_r>
 8006b86:	bf00      	nop
 8006b88:	2000000c 	.word	0x2000000c

08006b8c <_kill_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d07      	ldr	r5, [pc, #28]	; (8006bac <_kill_r+0x20>)
 8006b90:	2300      	movs	r3, #0
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	f7fa faad 	bl	80010f8 <_kill>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d102      	bne.n	8006ba8 <_kill_r+0x1c>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	b103      	cbz	r3, 8006ba8 <_kill_r+0x1c>
 8006ba6:	6023      	str	r3, [r4, #0]
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
 8006baa:	bf00      	nop
 8006bac:	200002e4 	.word	0x200002e4

08006bb0 <_getpid_r>:
 8006bb0:	f7fa ba9a 	b.w	80010e8 <_getpid>

08006bb4 <_init>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	bf00      	nop
 8006bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bba:	bc08      	pop	{r3}
 8006bbc:	469e      	mov	lr, r3
 8006bbe:	4770      	bx	lr

08006bc0 <_fini>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr
